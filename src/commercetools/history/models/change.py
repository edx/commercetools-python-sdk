# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen

import datetime
import enum
import typing

from ._abstract import _BaseType
from .common import (
    AttributeConstraintEnum,
    AuthenticationMode,
    BusinessUnitAssociateMode,
    BusinessUnitStatus,
    BusinessUnitStoreMode,
    ChannelRoleEnum,
    OrderState,
    PaymentState,
    Permission,
    QuoteRequestState,
    QuoteState,
    ReturnPaymentState,
    ReturnShipmentState,
    RoundingMode,
    ShipmentState,
    StackingMode,
    StagedQuoteState,
    StateRoleEnum,
    StateTypeEnum,
    TaxCalculationMode,
    TaxMode,
    TextInputHint,
    TransactionState,
)

if typing.TYPE_CHECKING:
    from .change_value import (
        AssetChangeValue,
        AttributeValue,
        ChangeTargetChangeValue,
        ChangeValueChangeValue,
        CustomFieldExpandedValue,
        CustomShippingMethodChangeValue,
        DeliveryChangeValue,
        EnumValue,
        FieldDefinitionOrderValue,
        InventoryQuantityValue,
        LocalizedEnumValue,
        ParcelChangeValue,
        SetCartClassificationShippingRateInputValue,
        SetCartScoreShippingRateInputValue,
        ShippingMethodChangeValue,
        ShippingMethodTaxAmountChangeValue,
        ShoppingListLineItemValue,
        TextLineItemValue,
        TransactionChangeValue,
        ValidFromAndUntilValue,
    )
    from .common import (
        Address,
        Asset,
        AssetSource,
        Associate,
        AttributeConstraintEnum,
        AttributeDefinition,
        AttributeLocalizedEnumValue,
        AttributePlainEnumValue,
        AuthenticationMode,
        BusinessUnitAssociateMode,
        BusinessUnitStatus,
        BusinessUnitStoreMode,
        CategoryOrderHints,
        ChannelRoleEnum,
        CustomFields,
        CustomLineItem,
        Delivery,
        DeliveryItem,
        DiscountCodeInfo,
        DiscountedLineItemPrice,
        DiscountedLineItemPriceForQuantity,
        FieldDefinition,
        GeoLocation,
        Image,
        InheritedAssociate,
        ItemShippingDetails,
        ItemState,
        KeyReference,
        LineItem,
        LocalizedString,
        Location,
        Money,
        OrderState,
        Parcel,
        ParcelMeasurements,
        PaymentInfo,
        PaymentState,
        Permission,
        Price,
        ProductSelectionSetting,
        ProductVariantAvailability,
        ProductVariantSelection,
        QuoteRequestState,
        QuoteState,
        Reference,
        Reservation,
        ReturnInfo,
        ReturnPaymentState,
        ReturnShipmentState,
        ReviewRatingStatistics,
        RoundingMode,
        SearchKeywords,
        ShipmentState,
        StackingMode,
        StagedQuoteState,
        StateRoleEnum,
        StateTypeEnum,
        StoreCountry,
        SyncInfo,
        TaxCalculationMode,
        TaxedItemPrice,
        TaxedPrice,
        TaxMode,
        TaxRate,
        TextInputHint,
        TextLineItem,
        TrackingData,
        Transaction,
        TransactionState,
        Variant,
    )

__all__ = [
    "AddAddressChange",
    "AddAssetChange",
    "AddAssociateChange",
    "AddAttributeDefinitionChange",
    "AddBillingAddressIdChange",
    "AddChannelRolesChange",
    "AddCustomLineItemChange",
    "AddDeliveryChange",
    "AddDiscountCodeChange",
    "AddEnumValueChange",
    "AddExternalImageChange",
    "AddFieldDefinitionChange",
    "AddInheritedAssociateChange",
    "AddInterfaceInteractionChange",
    "AddItemShippingAddressesChange",
    "AddLocalizedEnumValueChange",
    "AddLocationChange",
    "AddOrderLineItemChange",
    "AddParcelToDeliveryChange",
    "AddPaymentChange",
    "AddPlainEnumValueChange",
    "AddPriceChange",
    "AddProductChange",
    "AddProductSelectionChange",
    "AddPropertyChange",
    "AddReturnInfoChange",
    "AddShippingAddressIdChange",
    "AddShoppingListLineItemChange",
    "AddStateRolesChange",
    "AddTaxRateChange",
    "AddTextLineItemChange",
    "AddToCategoryChange",
    "AddTransactionChange",
    "AddVariantChange",
    "Change",
    "ChangeAddressChange",
    "ChangeAmountAuthorizedChange",
    "ChangeAmountPlannedChange",
    "ChangeAssetNameChange",
    "ChangeAssetOrderChange",
    "ChangeAssociateChange",
    "ChangeAssociateModeChange",
    "ChangeAttributeConstraintChange",
    "ChangeAttributeOrderByNameChange",
    "ChangeBuyerAssignableChange",
    "ChangeCartDiscountsChange",
    "ChangeCartPredicateChange",
    "ChangeCustomLineItemQuantityChange",
    "ChangeDescriptionChange",
    "ChangeEmailChange",
    "ChangeEnumValueLabelChange",
    "ChangeEnumValueOrderChange",
    "ChangeFieldDefinitionOrderChange",
    "ChangeGroupsChange",
    "ChangeInheritedAssociateChange",
    "ChangeInitialChange",
    "ChangeInputHintChange",
    "ChangeIsActiveChange",
    "ChangeIsSearchableChange",
    "ChangeKeyChange",
    "ChangeLabelChange",
    "ChangeLineItemQuantityChange",
    "ChangeLocalizedDescriptionChange",
    "ChangeLocalizedEnumValueLabelChange",
    "ChangeLocalizedEnumValueOrderChange",
    "ChangeLocalizedNameChange",
    "ChangeMasterVariantChange",
    "ChangeNameChange",
    "ChangeOrderHintChange",
    "ChangeOrderStateChange",
    "ChangeParentChange",
    "ChangeParentUnitChange",
    "ChangePaymentStateChange",
    "ChangePlainEnumValueLabelChange",
    "ChangePlainEnumValueOrderChange",
    "ChangePredicateChange",
    "ChangePriceChange",
    "ChangeProductSelectionActiveChange",
    "ChangeQuantityChange",
    "ChangeQuoteRequestStateChange",
    "ChangeQuoteStateChange",
    "ChangeRequiresDiscountCodeChange",
    "ChangeReviewRatingStatisticsChange",
    "ChangeShipmentStateChange",
    "ChangeShoppingListLineItemQuantityChange",
    "ChangeShoppingListLineItemsOrderChange",
    "ChangeSlugChange",
    "ChangeSortOrderChange",
    "ChangeStackingModeChange",
    "ChangeStagedQuoteStateChange",
    "ChangeStateTypeChange",
    "ChangeStatusChange",
    "ChangeTargetChange",
    "ChangeTaxCalculationModeChange",
    "ChangeTaxModeChange",
    "ChangeTaxRoundingModeChange",
    "ChangeTextLineItemNameChange",
    "ChangeTextLineItemQuantityChange",
    "ChangeTextLineItemsOrderChange",
    "ChangeTransactionInteractionIdChange",
    "ChangeTransactionStateChange",
    "ChangeTransactionTimestampChange",
    "ChangeValueChange",
    "MoveImageToPositionChange",
    "PublishChange",
    "RemoveAddressChange",
    "RemoveAssetChange",
    "RemoveAssociateChange",
    "RemoveAttributeDefinitionChange",
    "RemoveBillingAddressIdChange",
    "RemoveChannelRolesChange",
    "RemoveCustomLineItemChange",
    "RemoveDeliveryItemsChange",
    "RemoveDiscountCodeChange",
    "RemoveEnumValuesChange",
    "RemoveFieldDefinitionChange",
    "RemoveFromCategoryChange",
    "RemoveImageChange",
    "RemoveInheritedAssociateChange",
    "RemoveItemShippingAddressesChange",
    "RemoveLocalizedEnumValuesChange",
    "RemoveLocationChange",
    "RemoveOrderLineItemChange",
    "RemoveParcelFromDeliveryChange",
    "RemovePaymentChange",
    "RemovePriceChange",
    "RemoveProductChange",
    "RemoveProductSelectionChange",
    "RemovePropertyChange",
    "RemoveShippingAddressIdChange",
    "RemoveShoppingListLineItemChange",
    "RemoveStateRolesChange",
    "RemoveTaxRateChange",
    "RemoveTextLineItemChange",
    "RemoveVariantChange",
    "RequestQuoteRenegotiationChange",
    "SetAddressChange",
    "SetAddressCustomFieldChange",
    "SetAddressCustomTypeChange",
    "SetAnonymousIdChange",
    "SetApplicationVersionChange",
    "SetAssetCustomFieldChange",
    "SetAssetCustomTypeChange",
    "SetAssetDescriptionChange",
    "SetAssetKeyChange",
    "SetAssetSourcesChange",
    "SetAssetTagsChange",
    "SetAttributeChange",
    "SetAuthenticationModeChange",
    "SetAuthorNameChange",
    "SetBillingAddressChange",
    "SetCartPredicateChange",
    "SetCategoryOrderHintChange",
    "SetChannelRolesChange",
    "SetCompanyNameChange",
    "SetContactEmailChange",
    "SetCountriesChange",
    "SetCountryChange",
    "SetCustomFieldChange",
    "SetCustomLineItemCustomFieldChange",
    "SetCustomLineItemCustomTypeChange",
    "SetCustomLineItemMoneyChange",
    "SetCustomLineItemShippingDetailsChange",
    "SetCustomLineItemTaxAmountChange",
    "SetCustomLineItemTaxCategoryChange",
    "SetCustomLineItemTaxRateChange",
    "SetCustomLineItemTaxedPriceChange",
    "SetCustomLineItemTotalPriceChange",
    "SetCustomShippingMethodChange",
    "SetCustomTypeChange",
    "SetCustomerChange",
    "SetCustomerEmailChange",
    "SetCustomerGroupChange",
    "SetCustomerIdChange",
    "SetCustomerNumberChange",
    "SetDateOfBirthChange",
    "SetDefaultBillingAddressChange",
    "SetDefaultShippingAddressChange",
    "SetDeleteDaysAfterLastModificationChange",
    "SetDeliveryAddressChange",
    "SetDeliveryItemsChange",
    "SetDescriptionChange",
    "SetDiscountedPriceChange",
    "SetDistributionChannelsChange",
    "SetExpectedDeliveryChange",
    "SetExternalIdChange",
    "SetFirstNameChange",
    "SetGeoLocationChange",
    "SetImageLabelChange",
    "SetInputTipChange",
    "SetInterfaceIdChange",
    "SetIsValidChange",
    "SetKeyChange",
    "SetLanguagesChange",
    "SetLastNameChange",
    "SetLineItemDeactivatedAtChange",
    "SetLineItemDiscountedPriceChange",
    "SetLineItemDiscountedPricePerQuantityChange",
    "SetLineItemDistributionChannelChange",
    "SetLineItemPriceChange",
    "SetLineItemProductKeyChange",
    "SetLineItemProductSlugChange",
    "SetLineItemShippingDetailsChange",
    "SetLineItemTaxAmountChange",
    "SetLineItemTaxRateChange",
    "SetLineItemTaxedPriceChange",
    "SetLineItemTotalPriceChange",
    "SetLocaleChange",
    "SetLocalizedDescriptionChange",
    "SetLocalizedNameChange",
    "SetMaxApplicationsChange",
    "SetMaxApplicationsPerCustomerChange",
    "SetMetaDescriptionChange",
    "SetMetaKeywordsChange",
    "SetMetaTitleChange",
    "SetMethodInfoInterfaceChange",
    "SetMethodInfoMethodChange",
    "SetMethodInfoNameChange",
    "SetMiddleNameChange",
    "SetNameChange",
    "SetOrderLineItemCustomFieldChange",
    "SetOrderLineItemCustomTypeChange",
    "SetOrderNumberChange",
    "SetOrderTaxedPriceChange",
    "SetOrderTotalPriceChange",
    "SetOrderTotalTaxChange",
    "SetParcelItemsChange",
    "SetParcelMeasurementsChange",
    "SetParcelTrackingDataChange",
    "SetPermissionsChange",
    "SetPricesChange",
    "SetProductCountChange",
    "SetProductPriceCustomFieldChange",
    "SetProductPriceCustomTypeChange",
    "SetProductSelectionsChange",
    "SetProductVariantKeyChange",
    "SetPropertyChange",
    "SetPurchaseOrderNumberChange",
    "SetRatingChange",
    "SetReservationsChange",
    "SetRestockableInDaysChange",
    "SetReturnPaymentStateChange",
    "SetReturnShipmentStateChange",
    "SetSalutationChange",
    "SetSearchKeywordsChange",
    "SetSellerCommentChange",
    "SetShippingAddressChange",
    "SetShippingInfoPriceChange",
    "SetShippingInfoTaxedPriceChange",
    "SetShippingMethodChange",
    "SetShippingMethodTaxAmountChange",
    "SetShippingMethodTaxRateChange",
    "SetShippingRateChange",
    "SetShippingRateInputChange",
    "SetShoppingListLineItemCustomFieldChange",
    "SetShoppingListLineItemCustomTypeChange",
    "SetSkuChange",
    "SetSlugChange",
    "SetStateRolesChange",
    "SetStatusInterfaceCodeChange",
    "SetStatusInterfaceTextChange",
    "SetStoreChange",
    "SetStoreModeChange",
    "SetStoresChange",
    "SetSupplyChannelChange",
    "SetSupplyChannelsChange",
    "SetTargetChange",
    "SetTaxCategoryChange",
    "SetTextChange",
    "SetTextLineItemCustomFieldChange",
    "SetTextLineItemCustomTypeChange",
    "SetTextLineItemDescriptionChange",
    "SetTitleChange",
    "SetTransitionsChange",
    "SetValidFromAndUntilChange",
    "SetValidFromChange",
    "SetValidToChange",
    "SetValidUntilChange",
    "SetValueChange",
    "SetVariantAvailabilityChange",
    "SetVariantSelectionChange",
    "SetVatIdChange",
    "TransitionCustomLineItemStateChange",
    "TransitionLineItemStateChange",
    "TransitionStateChange",
    "UnknownChange",
    "UnpublishChange",
    "UpdateSyncInfoChange",
    "VerifyEmailChange",
]


class Change(_BaseType):
    """Difference between the previous and next version of a resource represented by `previousValue` (omitted, for example, on creations) and `nextValue` of the associated change. A Change can also contain extra fields that provide further information.

    They are not identical to the actual update actions sent.

    """

    #: Unique discriminator value to reliably deserialize the data type.
    type: str
    #: [Type of change](#type-of-change) on a resource that is similar to the update action it relates to, where possible.
    #: It is not a unique identifier for the data structure, for example, the `setDescription` change can occur with a localized and non-localized representation.
    #:
    #: [Records](ctp:history:type:Record) can be filtered by this value using the `changes` query parameter.
    change: str

    def __init__(self, *, type: str, change: str):
        self.type = type
        self.change = change

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "Change":
        if data["type"] == "AddAddressChange":
            from ._schemas.change import AddAddressChangeSchema

            return AddAddressChangeSchema().load(data)
        if data["type"] == "AddAssetChange":
            from ._schemas.change import AddAssetChangeSchema

            return AddAssetChangeSchema().load(data)
        if data["type"] == "AddAssociateChange":
            from ._schemas.change import AddAssociateChangeSchema

            return AddAssociateChangeSchema().load(data)
        if data["type"] == "AddAttributeDefinitionChange":
            from ._schemas.change import AddAttributeDefinitionChangeSchema

            return AddAttributeDefinitionChangeSchema().load(data)
        if data["type"] == "AddBillingAddressIdChange":
            from ._schemas.change import AddBillingAddressIdChangeSchema

            return AddBillingAddressIdChangeSchema().load(data)
        if data["type"] == "AddChannelRolesChange":
            from ._schemas.change import AddChannelRolesChangeSchema

            return AddChannelRolesChangeSchema().load(data)
        if data["type"] == "AddCustomLineItemChange":
            from ._schemas.change import AddCustomLineItemChangeSchema

            return AddCustomLineItemChangeSchema().load(data)
        if data["type"] == "AddDeliveryChange":
            from ._schemas.change import AddDeliveryChangeSchema

            return AddDeliveryChangeSchema().load(data)
        if data["type"] == "AddDiscountCodeChange":
            from ._schemas.change import AddDiscountCodeChangeSchema

            return AddDiscountCodeChangeSchema().load(data)
        if data["type"] == "AddEnumValueChange":
            from ._schemas.change import AddEnumValueChangeSchema

            return AddEnumValueChangeSchema().load(data)
        if data["type"] == "AddExternalImageChange":
            from ._schemas.change import AddExternalImageChangeSchema

            return AddExternalImageChangeSchema().load(data)
        if data["type"] == "AddFieldDefinitionChange":
            from ._schemas.change import AddFieldDefinitionChangeSchema

            return AddFieldDefinitionChangeSchema().load(data)
        if data["type"] == "AddInheritedAssociateChange":
            from ._schemas.change import AddInheritedAssociateChangeSchema

            return AddInheritedAssociateChangeSchema().load(data)
        if data["type"] == "AddInterfaceInteractionChange":
            from ._schemas.change import AddInterfaceInteractionChangeSchema

            return AddInterfaceInteractionChangeSchema().load(data)
        if data["type"] == "AddItemShippingAddressesChange":
            from ._schemas.change import AddItemShippingAddressesChangeSchema

            return AddItemShippingAddressesChangeSchema().load(data)
        if data["type"] == "AddLocalizedEnumValueChange":
            from ._schemas.change import AddLocalizedEnumValueChangeSchema

            return AddLocalizedEnumValueChangeSchema().load(data)
        if data["type"] == "AddLocationChange":
            from ._schemas.change import AddLocationChangeSchema

            return AddLocationChangeSchema().load(data)
        if data["type"] == "AddOrderLineItemChange":
            from ._schemas.change import AddOrderLineItemChangeSchema

            return AddOrderLineItemChangeSchema().load(data)
        if data["type"] == "AddParcelToDeliveryChange":
            from ._schemas.change import AddParcelToDeliveryChangeSchema

            return AddParcelToDeliveryChangeSchema().load(data)
        if data["type"] == "AddPaymentChange":
            from ._schemas.change import AddPaymentChangeSchema

            return AddPaymentChangeSchema().load(data)
        if data["type"] == "AddPlainEnumValueChange":
            from ._schemas.change import AddPlainEnumValueChangeSchema

            return AddPlainEnumValueChangeSchema().load(data)
        if data["type"] == "AddPriceChange":
            from ._schemas.change import AddPriceChangeSchema

            return AddPriceChangeSchema().load(data)
        if data["type"] == "AddProductChange":
            from ._schemas.change import AddProductChangeSchema

            return AddProductChangeSchema().load(data)
        if data["type"] == "AddProductSelectionChange":
            from ._schemas.change import AddProductSelectionChangeSchema

            return AddProductSelectionChangeSchema().load(data)
        if data["type"] == "AddPropertyChange":
            from ._schemas.change import AddPropertyChangeSchema

            return AddPropertyChangeSchema().load(data)
        if data["type"] == "AddReturnInfoChange":
            from ._schemas.change import AddReturnInfoChangeSchema

            return AddReturnInfoChangeSchema().load(data)
        if data["type"] == "AddShippingAddressIdChange":
            from ._schemas.change import AddShippingAddressIdChangeSchema

            return AddShippingAddressIdChangeSchema().load(data)
        if data["type"] == "AddShoppingListLineItemChange":
            from ._schemas.change import AddShoppingListLineItemChangeSchema

            return AddShoppingListLineItemChangeSchema().load(data)
        if data["type"] == "AddStateRolesChange":
            from ._schemas.change import AddStateRolesChangeSchema

            return AddStateRolesChangeSchema().load(data)
        if data["type"] == "AddTaxRateChange":
            from ._schemas.change import AddTaxRateChangeSchema

            return AddTaxRateChangeSchema().load(data)
        if data["type"] == "AddTextLineItemChange":
            from ._schemas.change import AddTextLineItemChangeSchema

            return AddTextLineItemChangeSchema().load(data)
        if data["type"] == "AddToCategoryChange":
            from ._schemas.change import AddToCategoryChangeSchema

            return AddToCategoryChangeSchema().load(data)
        if data["type"] == "AddTransactionChange":
            from ._schemas.change import AddTransactionChangeSchema

            return AddTransactionChangeSchema().load(data)
        if data["type"] == "AddVariantChange":
            from ._schemas.change import AddVariantChangeSchema

            return AddVariantChangeSchema().load(data)
        if data["type"] == "ChangeAddressChange":
            from ._schemas.change import ChangeAddressChangeSchema

            return ChangeAddressChangeSchema().load(data)
        if data["type"] == "ChangeAmountAuthorizedChange":
            from ._schemas.change import ChangeAmountAuthorizedChangeSchema

            return ChangeAmountAuthorizedChangeSchema().load(data)
        if data["type"] == "ChangeAmountPlannedChange":
            from ._schemas.change import ChangeAmountPlannedChangeSchema

            return ChangeAmountPlannedChangeSchema().load(data)
        if data["type"] == "ChangeAssetNameChange":
            from ._schemas.change import ChangeAssetNameChangeSchema

            return ChangeAssetNameChangeSchema().load(data)
        if data["type"] == "ChangeAssetOrderChange":
            from ._schemas.change import ChangeAssetOrderChangeSchema

            return ChangeAssetOrderChangeSchema().load(data)
        if data["type"] == "ChangeAssociateChange":
            from ._schemas.change import ChangeAssociateChangeSchema

            return ChangeAssociateChangeSchema().load(data)
        if data["type"] == "ChangeAssociateModeChange":
            from ._schemas.change import ChangeAssociateModeChangeSchema

            return ChangeAssociateModeChangeSchema().load(data)
        if data["type"] == "ChangeAttributeConstraintChange":
            from ._schemas.change import ChangeAttributeConstraintChangeSchema

            return ChangeAttributeConstraintChangeSchema().load(data)
        if data["type"] == "ChangeAttributeOrderByNameChange":
            from ._schemas.change import ChangeAttributeOrderByNameChangeSchema

            return ChangeAttributeOrderByNameChangeSchema().load(data)
        if data["type"] == "ChangeBuyerAssignableChange":
            from ._schemas.change import ChangeBuyerAssignableChangeSchema

            return ChangeBuyerAssignableChangeSchema().load(data)
        if data["type"] == "ChangeCartDiscountsChange":
            from ._schemas.change import ChangeCartDiscountsChangeSchema

            return ChangeCartDiscountsChangeSchema().load(data)
        if data["type"] == "ChangeCartPredicateChange":
            from ._schemas.change import ChangeCartPredicateChangeSchema

            return ChangeCartPredicateChangeSchema().load(data)
        if data["type"] == "ChangeCustomLineItemQuantityChange":
            from ._schemas.change import ChangeCustomLineItemQuantityChangeSchema

            return ChangeCustomLineItemQuantityChangeSchema().load(data)
        if data["type"] == "ChangeDescriptionChange":
            from ._schemas.change import ChangeDescriptionChangeSchema

            return ChangeDescriptionChangeSchema().load(data)
        if data["type"] == "ChangeEmailChange":
            from ._schemas.change import ChangeEmailChangeSchema

            return ChangeEmailChangeSchema().load(data)
        if data["type"] == "ChangeEnumValueLabelChange":
            from ._schemas.change import ChangeEnumValueLabelChangeSchema

            return ChangeEnumValueLabelChangeSchema().load(data)
        if data["type"] == "ChangeEnumValueOrderChange":
            from ._schemas.change import ChangeEnumValueOrderChangeSchema

            return ChangeEnumValueOrderChangeSchema().load(data)
        if data["type"] == "ChangeFieldDefinitionOrderChange":
            from ._schemas.change import ChangeFieldDefinitionOrderChangeSchema

            return ChangeFieldDefinitionOrderChangeSchema().load(data)
        if data["type"] == "ChangeGroupsChange":
            from ._schemas.change import ChangeGroupsChangeSchema

            return ChangeGroupsChangeSchema().load(data)
        if data["type"] == "ChangeInheritedAssociateChange":
            from ._schemas.change import ChangeInheritedAssociateChangeSchema

            return ChangeInheritedAssociateChangeSchema().load(data)
        if data["type"] == "ChangeInitialChange":
            from ._schemas.change import ChangeInitialChangeSchema

            return ChangeInitialChangeSchema().load(data)
        if data["type"] == "ChangeInputHintChange":
            from ._schemas.change import ChangeInputHintChangeSchema

            return ChangeInputHintChangeSchema().load(data)
        if data["type"] == "ChangeIsActiveChange":
            from ._schemas.change import ChangeIsActiveChangeSchema

            return ChangeIsActiveChangeSchema().load(data)
        if data["type"] == "ChangeIsSearchableChange":
            from ._schemas.change import ChangeIsSearchableChangeSchema

            return ChangeIsSearchableChangeSchema().load(data)
        if data["type"] == "ChangeKeyChange":
            from ._schemas.change import ChangeKeyChangeSchema

            return ChangeKeyChangeSchema().load(data)
        if data["type"] == "ChangeLabelChange":
            from ._schemas.change import ChangeLabelChangeSchema

            return ChangeLabelChangeSchema().load(data)
        if data["type"] == "ChangeLineItemQuantityChange":
            from ._schemas.change import ChangeLineItemQuantityChangeSchema

            return ChangeLineItemQuantityChangeSchema().load(data)
        if data["type"] == "ChangeLocalizedDescriptionChange":
            from ._schemas.change import ChangeLocalizedDescriptionChangeSchema

            return ChangeLocalizedDescriptionChangeSchema().load(data)
        if data["type"] == "ChangeLocalizedEnumValueLabelChange":
            from ._schemas.change import ChangeLocalizedEnumValueLabelChangeSchema

            return ChangeLocalizedEnumValueLabelChangeSchema().load(data)
        if data["type"] == "ChangeLocalizedEnumValueOrderChange":
            from ._schemas.change import ChangeLocalizedEnumValueOrderChangeSchema

            return ChangeLocalizedEnumValueOrderChangeSchema().load(data)
        if data["type"] == "ChangeLocalizedNameChange":
            from ._schemas.change import ChangeLocalizedNameChangeSchema

            return ChangeLocalizedNameChangeSchema().load(data)
        if data["type"] == "ChangeMasterVariantChange":
            from ._schemas.change import ChangeMasterVariantChangeSchema

            return ChangeMasterVariantChangeSchema().load(data)
        if data["type"] == "ChangeNameChange":
            from ._schemas.change import ChangeNameChangeSchema

            return ChangeNameChangeSchema().load(data)
        if data["type"] == "ChangeOrderHintChange":
            from ._schemas.change import ChangeOrderHintChangeSchema

            return ChangeOrderHintChangeSchema().load(data)
        if data["type"] == "ChangeOrderStateChange":
            from ._schemas.change import ChangeOrderStateChangeSchema

            return ChangeOrderStateChangeSchema().load(data)
        if data["type"] == "ChangeParentChange":
            from ._schemas.change import ChangeParentChangeSchema

            return ChangeParentChangeSchema().load(data)
        if data["type"] == "ChangeParentUnitChange":
            from ._schemas.change import ChangeParentUnitChangeSchema

            return ChangeParentUnitChangeSchema().load(data)
        if data["type"] == "ChangePaymentStateChange":
            from ._schemas.change import ChangePaymentStateChangeSchema

            return ChangePaymentStateChangeSchema().load(data)
        if data["type"] == "ChangePlainEnumValueLabelChange":
            from ._schemas.change import ChangePlainEnumValueLabelChangeSchema

            return ChangePlainEnumValueLabelChangeSchema().load(data)
        if data["type"] == "ChangePlainEnumValueOrderChange":
            from ._schemas.change import ChangePlainEnumValueOrderChangeSchema

            return ChangePlainEnumValueOrderChangeSchema().load(data)
        if data["type"] == "ChangePredicateChange":
            from ._schemas.change import ChangePredicateChangeSchema

            return ChangePredicateChangeSchema().load(data)
        if data["type"] == "ChangePriceChange":
            from ._schemas.change import ChangePriceChangeSchema

            return ChangePriceChangeSchema().load(data)
        if data["type"] == "ChangeProductSelectionActiveChange":
            from ._schemas.change import ChangeProductSelectionActiveChangeSchema

            return ChangeProductSelectionActiveChangeSchema().load(data)
        if data["type"] == "ChangeQuantityChange":
            from ._schemas.change import ChangeQuantityChangeSchema

            return ChangeQuantityChangeSchema().load(data)
        if data["type"] == "ChangeQuoteRequestStateChange":
            from ._schemas.change import ChangeQuoteRequestStateChangeSchema

            return ChangeQuoteRequestStateChangeSchema().load(data)
        if data["type"] == "ChangeQuoteStateChange":
            from ._schemas.change import ChangeQuoteStateChangeSchema

            return ChangeQuoteStateChangeSchema().load(data)
        if data["type"] == "ChangeRequiresDiscountCodeChange":
            from ._schemas.change import ChangeRequiresDiscountCodeChangeSchema

            return ChangeRequiresDiscountCodeChangeSchema().load(data)
        if data["type"] == "ChangeReviewRatingStatisticsChange":
            from ._schemas.change import ChangeReviewRatingStatisticsChangeSchema

            return ChangeReviewRatingStatisticsChangeSchema().load(data)
        if data["type"] == "ChangeShipmentStateChange":
            from ._schemas.change import ChangeShipmentStateChangeSchema

            return ChangeShipmentStateChangeSchema().load(data)
        if data["type"] == "ChangeShoppingListLineItemQuantityChange":
            from ._schemas.change import ChangeShoppingListLineItemQuantityChangeSchema

            return ChangeShoppingListLineItemQuantityChangeSchema().load(data)
        if data["type"] == "ChangeShoppingListLineItemsOrderChange":
            from ._schemas.change import ChangeShoppingListLineItemsOrderChangeSchema

            return ChangeShoppingListLineItemsOrderChangeSchema().load(data)
        if data["type"] == "ChangeSlugChange":
            from ._schemas.change import ChangeSlugChangeSchema

            return ChangeSlugChangeSchema().load(data)
        if data["type"] == "ChangeSortOrderChange":
            from ._schemas.change import ChangeSortOrderChangeSchema

            return ChangeSortOrderChangeSchema().load(data)
        if data["type"] == "ChangeStackingModeChange":
            from ._schemas.change import ChangeStackingModeChangeSchema

            return ChangeStackingModeChangeSchema().load(data)
        if data["type"] == "ChangeStagedQuoteStateChange":
            from ._schemas.change import ChangeStagedQuoteStateChangeSchema

            return ChangeStagedQuoteStateChangeSchema().load(data)
        if data["type"] == "ChangeStateTypeChange":
            from ._schemas.change import ChangeStateTypeChangeSchema

            return ChangeStateTypeChangeSchema().load(data)
        if data["type"] == "ChangeStatusChange":
            from ._schemas.change import ChangeStatusChangeSchema

            return ChangeStatusChangeSchema().load(data)
        if data["type"] == "ChangeTargetChange":
            from ._schemas.change import ChangeTargetChangeSchema

            return ChangeTargetChangeSchema().load(data)
        if data["type"] == "ChangeTaxCalculationModeChange":
            from ._schemas.change import ChangeTaxCalculationModeChangeSchema

            return ChangeTaxCalculationModeChangeSchema().load(data)
        if data["type"] == "ChangeTaxModeChange":
            from ._schemas.change import ChangeTaxModeChangeSchema

            return ChangeTaxModeChangeSchema().load(data)
        if data["type"] == "ChangeTaxRoundingModeChange":
            from ._schemas.change import ChangeTaxRoundingModeChangeSchema

            return ChangeTaxRoundingModeChangeSchema().load(data)
        if data["type"] == "ChangeTextLineItemNameChange":
            from ._schemas.change import ChangeTextLineItemNameChangeSchema

            return ChangeTextLineItemNameChangeSchema().load(data)
        if data["type"] == "ChangeTextLineItemQuantityChange":
            from ._schemas.change import ChangeTextLineItemQuantityChangeSchema

            return ChangeTextLineItemQuantityChangeSchema().load(data)
        if data["type"] == "ChangeTextLineItemsOrderChange":
            from ._schemas.change import ChangeTextLineItemsOrderChangeSchema

            return ChangeTextLineItemsOrderChangeSchema().load(data)
        if data["type"] == "ChangeTransactionInteractionIdChange":
            from ._schemas.change import ChangeTransactionInteractionIdChangeSchema

            return ChangeTransactionInteractionIdChangeSchema().load(data)
        if data["type"] == "ChangeTransactionStateChange":
            from ._schemas.change import ChangeTransactionStateChangeSchema

            return ChangeTransactionStateChangeSchema().load(data)
        if data["type"] == "ChangeTransactionTimestampChange":
            from ._schemas.change import ChangeTransactionTimestampChangeSchema

            return ChangeTransactionTimestampChangeSchema().load(data)
        if data["type"] == "ChangeValueChange":
            from ._schemas.change import ChangeValueChangeSchema

            return ChangeValueChangeSchema().load(data)
        if data["type"] == "MoveImageToPositionChange":
            from ._schemas.change import MoveImageToPositionChangeSchema

            return MoveImageToPositionChangeSchema().load(data)
        if data["type"] == "PublishChange":
            from ._schemas.change import PublishChangeSchema

            return PublishChangeSchema().load(data)
        if data["type"] == "RemoveAddressChange":
            from ._schemas.change import RemoveAddressChangeSchema

            return RemoveAddressChangeSchema().load(data)
        if data["type"] == "RemoveAssetChange":
            from ._schemas.change import RemoveAssetChangeSchema

            return RemoveAssetChangeSchema().load(data)
        if data["type"] == "RemoveAssociateChange":
            from ._schemas.change import RemoveAssociateChangeSchema

            return RemoveAssociateChangeSchema().load(data)
        if data["type"] == "RemoveAttributeDefinitionChange":
            from ._schemas.change import RemoveAttributeDefinitionChangeSchema

            return RemoveAttributeDefinitionChangeSchema().load(data)
        if data["type"] == "RemoveBillingAddressIdChange":
            from ._schemas.change import RemoveBillingAddressIdChangeSchema

            return RemoveBillingAddressIdChangeSchema().load(data)
        if data["type"] == "RemoveChannelRolesChange":
            from ._schemas.change import RemoveChannelRolesChangeSchema

            return RemoveChannelRolesChangeSchema().load(data)
        if data["type"] == "RemoveCustomLineItemChange":
            from ._schemas.change import RemoveCustomLineItemChangeSchema

            return RemoveCustomLineItemChangeSchema().load(data)
        if data["type"] == "RemoveDeliveryItemsChange":
            from ._schemas.change import RemoveDeliveryItemsChangeSchema

            return RemoveDeliveryItemsChangeSchema().load(data)
        if data["type"] == "RemoveDiscountCodeChange":
            from ._schemas.change import RemoveDiscountCodeChangeSchema

            return RemoveDiscountCodeChangeSchema().load(data)
        if data["type"] == "RemoveEnumValuesChange":
            from ._schemas.change import RemoveEnumValuesChangeSchema

            return RemoveEnumValuesChangeSchema().load(data)
        if data["type"] == "RemoveFieldDefinitionChange":
            from ._schemas.change import RemoveFieldDefinitionChangeSchema

            return RemoveFieldDefinitionChangeSchema().load(data)
        if data["type"] == "RemoveFromCategoryChange":
            from ._schemas.change import RemoveFromCategoryChangeSchema

            return RemoveFromCategoryChangeSchema().load(data)
        if data["type"] == "RemoveImageChange":
            from ._schemas.change import RemoveImageChangeSchema

            return RemoveImageChangeSchema().load(data)
        if data["type"] == "RemoveInheritedAssociateChange":
            from ._schemas.change import RemoveInheritedAssociateChangeSchema

            return RemoveInheritedAssociateChangeSchema().load(data)
        if data["type"] == "RemoveItemShippingAddressesChange":
            from ._schemas.change import RemoveItemShippingAddressesChangeSchema

            return RemoveItemShippingAddressesChangeSchema().load(data)
        if data["type"] == "RemoveLocalizedEnumValuesChange":
            from ._schemas.change import RemoveLocalizedEnumValuesChangeSchema

            return RemoveLocalizedEnumValuesChangeSchema().load(data)
        if data["type"] == "RemoveLocationChange":
            from ._schemas.change import RemoveLocationChangeSchema

            return RemoveLocationChangeSchema().load(data)
        if data["type"] == "RemoveOrderLineItemChange":
            from ._schemas.change import RemoveOrderLineItemChangeSchema

            return RemoveOrderLineItemChangeSchema().load(data)
        if data["type"] == "RemoveParcelFromDeliveryChange":
            from ._schemas.change import RemoveParcelFromDeliveryChangeSchema

            return RemoveParcelFromDeliveryChangeSchema().load(data)
        if data["type"] == "RemovePaymentChange":
            from ._schemas.change import RemovePaymentChangeSchema

            return RemovePaymentChangeSchema().load(data)
        if data["type"] == "RemovePriceChange":
            from ._schemas.change import RemovePriceChangeSchema

            return RemovePriceChangeSchema().load(data)
        if data["type"] == "RemoveProductChange":
            from ._schemas.change import RemoveProductChangeSchema

            return RemoveProductChangeSchema().load(data)
        if data["type"] == "RemoveProductSelectionChange":
            from ._schemas.change import RemoveProductSelectionChangeSchema

            return RemoveProductSelectionChangeSchema().load(data)
        if data["type"] == "RemovePropertyChange":
            from ._schemas.change import RemovePropertyChangeSchema

            return RemovePropertyChangeSchema().load(data)
        if data["type"] == "RemoveShippingAddressIdChange":
            from ._schemas.change import RemoveShippingAddressIdChangeSchema

            return RemoveShippingAddressIdChangeSchema().load(data)
        if data["type"] == "RemoveShoppingListLineItemChange":
            from ._schemas.change import RemoveShoppingListLineItemChangeSchema

            return RemoveShoppingListLineItemChangeSchema().load(data)
        if data["type"] == "RemoveStateRolesChange":
            from ._schemas.change import RemoveStateRolesChangeSchema

            return RemoveStateRolesChangeSchema().load(data)
        if data["type"] == "RemoveTaxRateChange":
            from ._schemas.change import RemoveTaxRateChangeSchema

            return RemoveTaxRateChangeSchema().load(data)
        if data["type"] == "RemoveTextLineItemChange":
            from ._schemas.change import RemoveTextLineItemChangeSchema

            return RemoveTextLineItemChangeSchema().load(data)
        if data["type"] == "RemoveVariantChange":
            from ._schemas.change import RemoveVariantChangeSchema

            return RemoveVariantChangeSchema().load(data)
        if data["type"] == "RequestQuoteRenegotiationChange":
            from ._schemas.change import RequestQuoteRenegotiationChangeSchema

            return RequestQuoteRenegotiationChangeSchema().load(data)
        if data["type"] == "SetAddressChange":
            from ._schemas.change import SetAddressChangeSchema

            return SetAddressChangeSchema().load(data)
        if data["type"] == "SetAddressCustomFieldChange":
            from ._schemas.change import SetAddressCustomFieldChangeSchema

            return SetAddressCustomFieldChangeSchema().load(data)
        if data["type"] == "SetAddressCustomTypeChange":
            from ._schemas.change import SetAddressCustomTypeChangeSchema

            return SetAddressCustomTypeChangeSchema().load(data)
        if data["type"] == "SetAnonymousIdChange":
            from ._schemas.change import SetAnonymousIdChangeSchema

            return SetAnonymousIdChangeSchema().load(data)
        if data["type"] == "SetApplicationVersionChange":
            from ._schemas.change import SetApplicationVersionChangeSchema

            return SetApplicationVersionChangeSchema().load(data)
        if data["type"] == "SetAssetCustomFieldChange":
            from ._schemas.change import SetAssetCustomFieldChangeSchema

            return SetAssetCustomFieldChangeSchema().load(data)
        if data["type"] == "SetAssetCustomTypeChange":
            from ._schemas.change import SetAssetCustomTypeChangeSchema

            return SetAssetCustomTypeChangeSchema().load(data)
        if data["type"] == "SetAssetDescriptionChange":
            from ._schemas.change import SetAssetDescriptionChangeSchema

            return SetAssetDescriptionChangeSchema().load(data)
        if data["type"] == "SetAssetKeyChange":
            from ._schemas.change import SetAssetKeyChangeSchema

            return SetAssetKeyChangeSchema().load(data)
        if data["type"] == "SetAssetSourcesChange":
            from ._schemas.change import SetAssetSourcesChangeSchema

            return SetAssetSourcesChangeSchema().load(data)
        if data["type"] == "SetAssetTagsChange":
            from ._schemas.change import SetAssetTagsChangeSchema

            return SetAssetTagsChangeSchema().load(data)
        if data["type"] == "SetAttributeChange":
            from ._schemas.change import SetAttributeChangeSchema

            return SetAttributeChangeSchema().load(data)
        if data["type"] == "SetAuthenticationModeChange":
            from ._schemas.change import SetAuthenticationModeChangeSchema

            return SetAuthenticationModeChangeSchema().load(data)
        if data["type"] == "SetAuthorNameChange":
            from ._schemas.change import SetAuthorNameChangeSchema

            return SetAuthorNameChangeSchema().load(data)
        if data["type"] == "SetBillingAddressChange":
            from ._schemas.change import SetBillingAddressChangeSchema

            return SetBillingAddressChangeSchema().load(data)
        if data["type"] == "SetCartPredicateChange":
            from ._schemas.change import SetCartPredicateChangeSchema

            return SetCartPredicateChangeSchema().load(data)
        if data["type"] == "SetCategoryOrderHintChange":
            from ._schemas.change import SetCategoryOrderHintChangeSchema

            return SetCategoryOrderHintChangeSchema().load(data)
        if data["type"] == "SetChannelRolesChange":
            from ._schemas.change import SetChannelRolesChangeSchema

            return SetChannelRolesChangeSchema().load(data)
        if data["type"] == "SetCompanyNameChange":
            from ._schemas.change import SetCompanyNameChangeSchema

            return SetCompanyNameChangeSchema().load(data)
        if data["type"] == "SetContactEmailChange":
            from ._schemas.change import SetContactEmailChangeSchema

            return SetContactEmailChangeSchema().load(data)
        if data["type"] == "SetCountriesChange":
            from ._schemas.change import SetCountriesChangeSchema

            return SetCountriesChangeSchema().load(data)
        if data["type"] == "SetCountryChange":
            from ._schemas.change import SetCountryChangeSchema

            return SetCountryChangeSchema().load(data)
        if data["type"] == "SetCustomFieldChange":
            from ._schemas.change import SetCustomFieldChangeSchema

            return SetCustomFieldChangeSchema().load(data)
        if data["type"] == "SetCustomLineItemCustomFieldChange":
            from ._schemas.change import SetCustomLineItemCustomFieldChangeSchema

            return SetCustomLineItemCustomFieldChangeSchema().load(data)
        if data["type"] == "SetCustomLineItemCustomTypeChange":
            from ._schemas.change import SetCustomLineItemCustomTypeChangeSchema

            return SetCustomLineItemCustomTypeChangeSchema().load(data)
        if data["type"] == "SetCustomLineItemMoneyChange":
            from ._schemas.change import SetCustomLineItemMoneyChangeSchema

            return SetCustomLineItemMoneyChangeSchema().load(data)
        if data["type"] == "SetCustomLineItemShippingDetailsChange":
            from ._schemas.change import SetCustomLineItemShippingDetailsChangeSchema

            return SetCustomLineItemShippingDetailsChangeSchema().load(data)
        if data["type"] == "SetCustomLineItemTaxAmountChange":
            from ._schemas.change import SetCustomLineItemTaxAmountChangeSchema

            return SetCustomLineItemTaxAmountChangeSchema().load(data)
        if data["type"] == "SetCustomLineItemTaxCategoryChange":
            from ._schemas.change import SetCustomLineItemTaxCategoryChangeSchema

            return SetCustomLineItemTaxCategoryChangeSchema().load(data)
        if data["type"] == "SetCustomLineItemTaxRateChange":
            from ._schemas.change import SetCustomLineItemTaxRateChangeSchema

            return SetCustomLineItemTaxRateChangeSchema().load(data)
        if data["type"] == "SetCustomLineItemTaxedPriceChange":
            from ._schemas.change import SetCustomLineItemTaxedPriceChangeSchema

            return SetCustomLineItemTaxedPriceChangeSchema().load(data)
        if data["type"] == "SetCustomLineItemTotalPriceChange":
            from ._schemas.change import SetCustomLineItemTotalPriceChangeSchema

            return SetCustomLineItemTotalPriceChangeSchema().load(data)
        if data["type"] == "SetCustomShippingMethodChange":
            from ._schemas.change import SetCustomShippingMethodChangeSchema

            return SetCustomShippingMethodChangeSchema().load(data)
        if data["type"] == "SetCustomTypeChange":
            from ._schemas.change import SetCustomTypeChangeSchema

            return SetCustomTypeChangeSchema().load(data)
        if data["type"] == "SetCustomerChange":
            from ._schemas.change import SetCustomerChangeSchema

            return SetCustomerChangeSchema().load(data)
        if data["type"] == "SetCustomerEmailChange":
            from ._schemas.change import SetCustomerEmailChangeSchema

            return SetCustomerEmailChangeSchema().load(data)
        if data["type"] == "SetCustomerGroupChange":
            from ._schemas.change import SetCustomerGroupChangeSchema

            return SetCustomerGroupChangeSchema().load(data)
        if data["type"] == "SetCustomerIdChange":
            from ._schemas.change import SetCustomerIdChangeSchema

            return SetCustomerIdChangeSchema().load(data)
        if data["type"] == "SetCustomerNumberChange":
            from ._schemas.change import SetCustomerNumberChangeSchema

            return SetCustomerNumberChangeSchema().load(data)
        if data["type"] == "SetDateOfBirthChange":
            from ._schemas.change import SetDateOfBirthChangeSchema

            return SetDateOfBirthChangeSchema().load(data)
        if data["type"] == "SetDefaultBillingAddressChange":
            from ._schemas.change import SetDefaultBillingAddressChangeSchema

            return SetDefaultBillingAddressChangeSchema().load(data)
        if data["type"] == "SetDefaultShippingAddressChange":
            from ._schemas.change import SetDefaultShippingAddressChangeSchema

            return SetDefaultShippingAddressChangeSchema().load(data)
        if data["type"] == "SetDeleteDaysAfterLastModificationChange":
            from ._schemas.change import SetDeleteDaysAfterLastModificationChangeSchema

            return SetDeleteDaysAfterLastModificationChangeSchema().load(data)
        if data["type"] == "SetDeliveryAddressChange":
            from ._schemas.change import SetDeliveryAddressChangeSchema

            return SetDeliveryAddressChangeSchema().load(data)
        if data["type"] == "SetDeliveryItemsChange":
            from ._schemas.change import SetDeliveryItemsChangeSchema

            return SetDeliveryItemsChangeSchema().load(data)
        if data["type"] == "SetDescriptionChange":
            from ._schemas.change import SetDescriptionChangeSchema

            return SetDescriptionChangeSchema().load(data)
        if data["type"] == "SetDiscountedPriceChange":
            from ._schemas.change import SetDiscountedPriceChangeSchema

            return SetDiscountedPriceChangeSchema().load(data)
        if data["type"] == "SetDistributionChannelsChange":
            from ._schemas.change import SetDistributionChannelsChangeSchema

            return SetDistributionChannelsChangeSchema().load(data)
        if data["type"] == "SetExpectedDeliveryChange":
            from ._schemas.change import SetExpectedDeliveryChangeSchema

            return SetExpectedDeliveryChangeSchema().load(data)
        if data["type"] == "SetExternalIdChange":
            from ._schemas.change import SetExternalIdChangeSchema

            return SetExternalIdChangeSchema().load(data)
        if data["type"] == "SetFirstNameChange":
            from ._schemas.change import SetFirstNameChangeSchema

            return SetFirstNameChangeSchema().load(data)
        if data["type"] == "SetGeoLocationChange":
            from ._schemas.change import SetGeoLocationChangeSchema

            return SetGeoLocationChangeSchema().load(data)
        if data["type"] == "SetImageLabelChange":
            from ._schemas.change import SetImageLabelChangeSchema

            return SetImageLabelChangeSchema().load(data)
        if data["type"] == "SetInputTipChange":
            from ._schemas.change import SetInputTipChangeSchema

            return SetInputTipChangeSchema().load(data)
        if data["type"] == "SetInterfaceIdChange":
            from ._schemas.change import SetInterfaceIdChangeSchema

            return SetInterfaceIdChangeSchema().load(data)
        if data["type"] == "SetIsValidChange":
            from ._schemas.change import SetIsValidChangeSchema

            return SetIsValidChangeSchema().load(data)
        if data["type"] == "SetKeyChange":
            from ._schemas.change import SetKeyChangeSchema

            return SetKeyChangeSchema().load(data)
        if data["type"] == "SetLanguagesChange":
            from ._schemas.change import SetLanguagesChangeSchema

            return SetLanguagesChangeSchema().load(data)
        if data["type"] == "SetLastNameChange":
            from ._schemas.change import SetLastNameChangeSchema

            return SetLastNameChangeSchema().load(data)
        if data["type"] == "SetLineItemDeactivatedAtChange":
            from ._schemas.change import SetLineItemDeactivatedAtChangeSchema

            return SetLineItemDeactivatedAtChangeSchema().load(data)
        if data["type"] == "SetLineItemDiscountedPriceChange":
            from ._schemas.change import SetLineItemDiscountedPriceChangeSchema

            return SetLineItemDiscountedPriceChangeSchema().load(data)
        if data["type"] == "SetLineItemDiscountedPricePerQuantityChange":
            from ._schemas.change import (
                SetLineItemDiscountedPricePerQuantityChangeSchema,
            )

            return SetLineItemDiscountedPricePerQuantityChangeSchema().load(data)
        if data["type"] == "SetLineItemDistributionChannelChange":
            from ._schemas.change import SetLineItemDistributionChannelChangeSchema

            return SetLineItemDistributionChannelChangeSchema().load(data)
        if data["type"] == "SetLineItemPriceChange":
            from ._schemas.change import SetLineItemPriceChangeSchema

            return SetLineItemPriceChangeSchema().load(data)
        if data["type"] == "SetLineItemProductKeyChange":
            from ._schemas.change import SetLineItemProductKeyChangeSchema

            return SetLineItemProductKeyChangeSchema().load(data)
        if data["type"] == "SetLineItemProductSlugChange":
            from ._schemas.change import SetLineItemProductSlugChangeSchema

            return SetLineItemProductSlugChangeSchema().load(data)
        if data["type"] == "SetLineItemShippingDetailsChange":
            from ._schemas.change import SetLineItemShippingDetailsChangeSchema

            return SetLineItemShippingDetailsChangeSchema().load(data)
        if data["type"] == "SetLineItemTaxAmountChange":
            from ._schemas.change import SetLineItemTaxAmountChangeSchema

            return SetLineItemTaxAmountChangeSchema().load(data)
        if data["type"] == "SetLineItemTaxRateChange":
            from ._schemas.change import SetLineItemTaxRateChangeSchema

            return SetLineItemTaxRateChangeSchema().load(data)
        if data["type"] == "SetLineItemTaxedPriceChange":
            from ._schemas.change import SetLineItemTaxedPriceChangeSchema

            return SetLineItemTaxedPriceChangeSchema().load(data)
        if data["type"] == "SetLineItemTotalPriceChange":
            from ._schemas.change import SetLineItemTotalPriceChangeSchema

            return SetLineItemTotalPriceChangeSchema().load(data)
        if data["type"] == "SetLocaleChange":
            from ._schemas.change import SetLocaleChangeSchema

            return SetLocaleChangeSchema().load(data)
        if data["type"] == "SetLocalizedDescriptionChange":
            from ._schemas.change import SetLocalizedDescriptionChangeSchema

            return SetLocalizedDescriptionChangeSchema().load(data)
        if data["type"] == "SetMaxApplicationsChange":
            from ._schemas.change import SetMaxApplicationsChangeSchema

            return SetMaxApplicationsChangeSchema().load(data)
        if data["type"] == "SetMaxApplicationsPerCustomerChange":
            from ._schemas.change import SetMaxApplicationsPerCustomerChangeSchema

            return SetMaxApplicationsPerCustomerChangeSchema().load(data)
        if data["type"] == "SetMetaDescriptionChange":
            from ._schemas.change import SetMetaDescriptionChangeSchema

            return SetMetaDescriptionChangeSchema().load(data)
        if data["type"] == "SetMetaKeywordsChange":
            from ._schemas.change import SetMetaKeywordsChangeSchema

            return SetMetaKeywordsChangeSchema().load(data)
        if data["type"] == "SetMetaTitleChange":
            from ._schemas.change import SetMetaTitleChangeSchema

            return SetMetaTitleChangeSchema().load(data)
        if data["type"] == "SetMethodInfoInterfaceChange":
            from ._schemas.change import SetMethodInfoInterfaceChangeSchema

            return SetMethodInfoInterfaceChangeSchema().load(data)
        if data["type"] == "SetMethodInfoMethodChange":
            from ._schemas.change import SetMethodInfoMethodChangeSchema

            return SetMethodInfoMethodChangeSchema().load(data)
        if data["type"] == "SetMethodInfoNameChange":
            from ._schemas.change import SetMethodInfoNameChangeSchema

            return SetMethodInfoNameChangeSchema().load(data)
        if data["type"] == "SetMiddleNameChange":
            from ._schemas.change import SetMiddleNameChangeSchema

            return SetMiddleNameChangeSchema().load(data)
        if data["type"] == "SetNameChange":
            from ._schemas.change import SetNameChangeSchema

            return SetNameChangeSchema().load(data)
        if data["type"] == "SetLocalizedNameChange":
            from ._schemas.change import SetLocalizedNameChangeSchema

            return SetLocalizedNameChangeSchema().load(data)
        if data["type"] == "SetOrderLineItemCustomFieldChange":
            from ._schemas.change import SetOrderLineItemCustomFieldChangeSchema

            return SetOrderLineItemCustomFieldChangeSchema().load(data)
        if data["type"] == "SetOrderLineItemCustomTypeChange":
            from ._schemas.change import SetOrderLineItemCustomTypeChangeSchema

            return SetOrderLineItemCustomTypeChangeSchema().load(data)
        if data["type"] == "SetOrderNumberChange":
            from ._schemas.change import SetOrderNumberChangeSchema

            return SetOrderNumberChangeSchema().load(data)
        if data["type"] == "SetOrderTaxedPriceChange":
            from ._schemas.change import SetOrderTaxedPriceChangeSchema

            return SetOrderTaxedPriceChangeSchema().load(data)
        if data["type"] == "SetOrderTotalPriceChange":
            from ._schemas.change import SetOrderTotalPriceChangeSchema

            return SetOrderTotalPriceChangeSchema().load(data)
        if data["type"] == "SetOrderTotalTaxChange":
            from ._schemas.change import SetOrderTotalTaxChangeSchema

            return SetOrderTotalTaxChangeSchema().load(data)
        if data["type"] == "SetParcelItemsChange":
            from ._schemas.change import SetParcelItemsChangeSchema

            return SetParcelItemsChangeSchema().load(data)
        if data["type"] == "SetParcelMeasurementsChange":
            from ._schemas.change import SetParcelMeasurementsChangeSchema

            return SetParcelMeasurementsChangeSchema().load(data)
        if data["type"] == "SetParcelTrackingDataChange":
            from ._schemas.change import SetParcelTrackingDataChangeSchema

            return SetParcelTrackingDataChangeSchema().load(data)
        if data["type"] == "SetPermissionsChange":
            from ._schemas.change import SetPermissionsChangeSchema

            return SetPermissionsChangeSchema().load(data)
        if data["type"] == "SetPricesChange":
            from ._schemas.change import SetPricesChangeSchema

            return SetPricesChangeSchema().load(data)
        if data["type"] == "SetProductCountChange":
            from ._schemas.change import SetProductCountChangeSchema

            return SetProductCountChangeSchema().load(data)
        if data["type"] == "SetProductPriceCustomFieldChange":
            from ._schemas.change import SetProductPriceCustomFieldChangeSchema

            return SetProductPriceCustomFieldChangeSchema().load(data)
        if data["type"] == "SetProductPriceCustomTypeChange":
            from ._schemas.change import SetProductPriceCustomTypeChangeSchema

            return SetProductPriceCustomTypeChangeSchema().load(data)
        if data["type"] == "SetProductSelectionsChange":
            from ._schemas.change import SetProductSelectionsChangeSchema

            return SetProductSelectionsChangeSchema().load(data)
        if data["type"] == "SetProductVariantKeyChange":
            from ._schemas.change import SetProductVariantKeyChangeSchema

            return SetProductVariantKeyChangeSchema().load(data)
        if data["type"] == "SetPropertyChange":
            from ._schemas.change import SetPropertyChangeSchema

            return SetPropertyChangeSchema().load(data)
        if data["type"] == "SetPurchaseOrderNumberChange":
            from ._schemas.change import SetPurchaseOrderNumberChangeSchema

            return SetPurchaseOrderNumberChangeSchema().load(data)
        if data["type"] == "SetRatingChange":
            from ._schemas.change import SetRatingChangeSchema

            return SetRatingChangeSchema().load(data)
        if data["type"] == "SetReservationsChange":
            from ._schemas.change import SetReservationsChangeSchema

            return SetReservationsChangeSchema().load(data)
        if data["type"] == "SetRestockableInDaysChange":
            from ._schemas.change import SetRestockableInDaysChangeSchema

            return SetRestockableInDaysChangeSchema().load(data)
        if data["type"] == "SetReturnPaymentStateChange":
            from ._schemas.change import SetReturnPaymentStateChangeSchema

            return SetReturnPaymentStateChangeSchema().load(data)
        if data["type"] == "SetReturnShipmentStateChange":
            from ._schemas.change import SetReturnShipmentStateChangeSchema

            return SetReturnShipmentStateChangeSchema().load(data)
        if data["type"] == "SetSalutationChange":
            from ._schemas.change import SetSalutationChangeSchema

            return SetSalutationChangeSchema().load(data)
        if data["type"] == "SetSearchKeywordsChange":
            from ._schemas.change import SetSearchKeywordsChangeSchema

            return SetSearchKeywordsChangeSchema().load(data)
        if data["type"] == "SetSellerCommentChange":
            from ._schemas.change import SetSellerCommentChangeSchema

            return SetSellerCommentChangeSchema().load(data)
        if data["type"] == "SetShippingAddressChange":
            from ._schemas.change import SetShippingAddressChangeSchema

            return SetShippingAddressChangeSchema().load(data)
        if data["type"] == "SetShippingInfoPriceChange":
            from ._schemas.change import SetShippingInfoPriceChangeSchema

            return SetShippingInfoPriceChangeSchema().load(data)
        if data["type"] == "SetShippingInfoTaxedPriceChange":
            from ._schemas.change import SetShippingInfoTaxedPriceChangeSchema

            return SetShippingInfoTaxedPriceChangeSchema().load(data)
        if data["type"] == "SetShippingMethodChange":
            from ._schemas.change import SetShippingMethodChangeSchema

            return SetShippingMethodChangeSchema().load(data)
        if data["type"] == "SetShippingMethodTaxAmountChange":
            from ._schemas.change import SetShippingMethodTaxAmountChangeSchema

            return SetShippingMethodTaxAmountChangeSchema().load(data)
        if data["type"] == "SetShippingMethodTaxRateChange":
            from ._schemas.change import SetShippingMethodTaxRateChangeSchema

            return SetShippingMethodTaxRateChangeSchema().load(data)
        if data["type"] == "SetShippingRateChange":
            from ._schemas.change import SetShippingRateChangeSchema

            return SetShippingRateChangeSchema().load(data)
        if data["type"] == "SetShippingRateInputChange":
            from ._schemas.change import SetShippingRateInputChangeSchema

            return SetShippingRateInputChangeSchema().load(data)
        if data["type"] == "SetShoppingListLineItemCustomFieldChange":
            from ._schemas.change import SetShoppingListLineItemCustomFieldChangeSchema

            return SetShoppingListLineItemCustomFieldChangeSchema().load(data)
        if data["type"] == "SetShoppingListLineItemCustomTypeChange":
            from ._schemas.change import SetShoppingListLineItemCustomTypeChangeSchema

            return SetShoppingListLineItemCustomTypeChangeSchema().load(data)
        if data["type"] == "SetSkuChange":
            from ._schemas.change import SetSkuChangeSchema

            return SetSkuChangeSchema().load(data)
        if data["type"] == "SetSlugChange":
            from ._schemas.change import SetSlugChangeSchema

            return SetSlugChangeSchema().load(data)
        if data["type"] == "SetStateRolesChange":
            from ._schemas.change import SetStateRolesChangeSchema

            return SetStateRolesChangeSchema().load(data)
        if data["type"] == "SetStatusInterfaceCodeChange":
            from ._schemas.change import SetStatusInterfaceCodeChangeSchema

            return SetStatusInterfaceCodeChangeSchema().load(data)
        if data["type"] == "SetStatusInterfaceTextChange":
            from ._schemas.change import SetStatusInterfaceTextChangeSchema

            return SetStatusInterfaceTextChangeSchema().load(data)
        if data["type"] == "SetStoreChange":
            from ._schemas.change import SetStoreChangeSchema

            return SetStoreChangeSchema().load(data)
        if data["type"] == "SetStoreModeChange":
            from ._schemas.change import SetStoreModeChangeSchema

            return SetStoreModeChangeSchema().load(data)
        if data["type"] == "SetStoresChange":
            from ._schemas.change import SetStoresChangeSchema

            return SetStoresChangeSchema().load(data)
        if data["type"] == "SetSupplyChannelChange":
            from ._schemas.change import SetSupplyChannelChangeSchema

            return SetSupplyChannelChangeSchema().load(data)
        if data["type"] == "SetSupplyChannelsChange":
            from ._schemas.change import SetSupplyChannelsChangeSchema

            return SetSupplyChannelsChangeSchema().load(data)
        if data["type"] == "SetTargetChange":
            from ._schemas.change import SetTargetChangeSchema

            return SetTargetChangeSchema().load(data)
        if data["type"] == "SetTaxCategoryChange":
            from ._schemas.change import SetTaxCategoryChangeSchema

            return SetTaxCategoryChangeSchema().load(data)
        if data["type"] == "SetTextChange":
            from ._schemas.change import SetTextChangeSchema

            return SetTextChangeSchema().load(data)
        if data["type"] == "SetTextLineItemCustomFieldChange":
            from ._schemas.change import SetTextLineItemCustomFieldChangeSchema

            return SetTextLineItemCustomFieldChangeSchema().load(data)
        if data["type"] == "SetTextLineItemCustomTypeChange":
            from ._schemas.change import SetTextLineItemCustomTypeChangeSchema

            return SetTextLineItemCustomTypeChangeSchema().load(data)
        if data["type"] == "SetTextLineItemDescriptionChange":
            from ._schemas.change import SetTextLineItemDescriptionChangeSchema

            return SetTextLineItemDescriptionChangeSchema().load(data)
        if data["type"] == "SetTitleChange":
            from ._schemas.change import SetTitleChangeSchema

            return SetTitleChangeSchema().load(data)
        if data["type"] == "SetTransitionsChange":
            from ._schemas.change import SetTransitionsChangeSchema

            return SetTransitionsChangeSchema().load(data)
        if data["type"] == "SetValidFromAndUntilChange":
            from ._schemas.change import SetValidFromAndUntilChangeSchema

            return SetValidFromAndUntilChangeSchema().load(data)
        if data["type"] == "SetValidFromChange":
            from ._schemas.change import SetValidFromChangeSchema

            return SetValidFromChangeSchema().load(data)
        if data["type"] == "SetValidToChange":
            from ._schemas.change import SetValidToChangeSchema

            return SetValidToChangeSchema().load(data)
        if data["type"] == "SetValidUntilChange":
            from ._schemas.change import SetValidUntilChangeSchema

            return SetValidUntilChangeSchema().load(data)
        if data["type"] == "SetValueChange":
            from ._schemas.change import SetValueChangeSchema

            return SetValueChangeSchema().load(data)
        if data["type"] == "SetVariantAvailabilityChange":
            from ._schemas.change import SetVariantAvailabilityChangeSchema

            return SetVariantAvailabilityChangeSchema().load(data)
        if data["type"] == "SetVariantSelectionChange":
            from ._schemas.change import SetVariantSelectionChangeSchema

            return SetVariantSelectionChangeSchema().load(data)
        if data["type"] == "SetVatIdChange":
            from ._schemas.change import SetVatIdChangeSchema

            return SetVatIdChangeSchema().load(data)
        if data["type"] == "TransitionCustomLineItemStateChange":
            from ._schemas.change import TransitionCustomLineItemStateChangeSchema

            return TransitionCustomLineItemStateChangeSchema().load(data)
        if data["type"] == "TransitionLineItemStateChange":
            from ._schemas.change import TransitionLineItemStateChangeSchema

            return TransitionLineItemStateChangeSchema().load(data)
        if data["type"] == "TransitionStateChange":
            from ._schemas.change import TransitionStateChangeSchema

            return TransitionStateChangeSchema().load(data)
        if data["type"] == "UnknownChange":
            from ._schemas.change import UnknownChangeSchema

            return UnknownChangeSchema().load(data)
        if data["type"] == "UnpublishChange":
            from ._schemas.change import UnpublishChangeSchema

            return UnpublishChangeSchema().load(data)
        if data["type"] == "UpdateSyncInfoChange":
            from ._schemas.change import UpdateSyncInfoChangeSchema

            return UpdateSyncInfoChangeSchema().load(data)
        if data["type"] == "VerifyEmailChange":
            from ._schemas.change import VerifyEmailChangeSchema

            return VerifyEmailChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeSchema

        return ChangeSchema().dump(self)


class AddAddressChange(Change):
    """Change triggered by the [Add Address](ctp:api:type:CustomerAddAddressAction) update action."""

    #: Value after the change.
    next_value: "Address"

    def __init__(self, *, change: str, next_value: "Address"):
        self.next_value = next_value

        super().__init__(change=change, type="AddAddressChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddAddressChange":
        from ._schemas.change import AddAddressChangeSchema

        return AddAddressChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddAddressChangeSchema

        return AddAddressChangeSchema().dump(self)


class AddAssetChange(Change):
    """Change triggered by the following update actions:

    - [Add Asset](ctp:api:type:CategoryAddAssetAction) on Categories.
    - [Add Asset](ctp:api:type:ProductAddAssetAction) on Products.

    """

    #: Value before the change.
    previous_value: "Asset"
    #: Value after the change.
    next_value: "Asset"

    def __init__(self, *, change: str, previous_value: "Asset", next_value: "Asset"):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="AddAssetChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddAssetChange":
        from ._schemas.change import AddAssetChangeSchema

        return AddAssetChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddAssetChangeSchema

        return AddAssetChangeSchema().dump(self)


class AddAssociateChange(Change):
    """Change triggered by the [Add Associate](ctp:api:type:BusinessUnitAddAssociateAction) update action."""

    #: Value after the change.
    next_value: "Associate"

    def __init__(self, *, change: str, next_value: "Associate"):
        self.next_value = next_value

        super().__init__(change=change, type="AddAssociateChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddAssociateChange":
        from ._schemas.change import AddAssociateChangeSchema

        return AddAssociateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddAssociateChangeSchema

        return AddAssociateChangeSchema().dump(self)


class AddAttributeDefinitionChange(Change):
    """Change triggered by the [Add Attribute Definition](ctp:api:type:ProductTypeAddAttributeDefinitionAction) update action."""

    #: Value after the change.
    next_value: "AttributeDefinition"

    def __init__(self, *, change: str, next_value: "AttributeDefinition"):
        self.next_value = next_value

        super().__init__(change=change, type="AddAttributeDefinitionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddAttributeDefinitionChange":
        from ._schemas.change import AddAttributeDefinitionChangeSchema

        return AddAttributeDefinitionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddAttributeDefinitionChangeSchema

        return AddAttributeDefinitionChangeSchema().dump(self)


class AddBillingAddressIdChange(Change):
    """Change triggered by the [Add Billing Address ID](ctp:api:type:CustomerAddBillingAddressIdAction) update action."""

    #: Value before the change.
    previous_value: typing.List["str"]
    #: Value after the change.
    next_value: typing.List["str"]
    #: Address added to `billingAddressIds`.
    address: "Address"

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["str"],
        next_value: typing.List["str"],
        address: "Address"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.address = address

        super().__init__(change=change, type="AddBillingAddressIdChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddBillingAddressIdChange":
        from ._schemas.change import AddBillingAddressIdChangeSchema

        return AddBillingAddressIdChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddBillingAddressIdChangeSchema

        return AddBillingAddressIdChangeSchema().dump(self)


class AddChannelRolesChange(Change):
    """Change triggered by the [Add Roles](ctp:api:type:ChannelAddRolesAction) update action."""

    #: Value before the change.
    previous_value: typing.List["ChannelRoleEnum"]
    #: Value after the change.
    next_value: typing.List["ChannelRoleEnum"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["ChannelRoleEnum"],
        next_value: typing.List["ChannelRoleEnum"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="AddChannelRolesChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddChannelRolesChange":
        from ._schemas.change import AddChannelRolesChangeSchema

        return AddChannelRolesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddChannelRolesChangeSchema

        return AddChannelRolesChangeSchema().dump(self)


class AddCustomLineItemChange(Change):
    """Change triggered by the [Add CustomLineItem](ctp:api:type:StagedOrderAddCustomLineItemAction) update action."""

    #: Value before the change.
    previous_value: "CustomLineItem"
    #: Value after the change.
    next_value: "CustomLineItem"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "CustomLineItem",
        next_value: "CustomLineItem"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="AddCustomLineItemChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddCustomLineItemChange":
        from ._schemas.change import AddCustomLineItemChangeSchema

        return AddCustomLineItemChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddCustomLineItemChangeSchema

        return AddCustomLineItemChangeSchema().dump(self)


class AddDeliveryChange(Change):
    """Change triggered by the [Add Delivery](ctp:api:type:OrderAddDeliveryAction) update action."""

    #: Value before the change.
    previous_value: "DeliveryChangeValue"
    #: Value after the change.
    next_value: "DeliveryChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "DeliveryChangeValue",
        next_value: "DeliveryChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="AddDeliveryChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddDeliveryChange":
        from ._schemas.change import AddDeliveryChangeSchema

        return AddDeliveryChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddDeliveryChangeSchema

        return AddDeliveryChangeSchema().dump(self)


class AddDiscountCodeChange(Change):
    """Change triggered by the [Add DiscountCode](ctp:api:type:StagedOrderAddDiscountCodeAction) update action."""

    #: Value after the change.
    next_value: "DiscountCodeInfo"

    def __init__(self, *, change: str, next_value: "DiscountCodeInfo"):
        self.next_value = next_value

        super().__init__(change=change, type="AddDiscountCodeChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddDiscountCodeChange":
        from ._schemas.change import AddDiscountCodeChangeSchema

        return AddDiscountCodeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddDiscountCodeChangeSchema

        return AddDiscountCodeChangeSchema().dump(self)


class AddEnumValueChange(Change):
    """Change triggered by the [Add EnumValue to FieldDefinition](ctp:api:type:TypeAddEnumValueAction) update action."""

    #: Value after the change.
    next_value: "EnumValue"
    #: Name of the updated [FieldDefinition](ctp:api:type:FieldDefinition).
    field_name: str

    def __init__(self, *, change: str, next_value: "EnumValue", field_name: str):
        self.next_value = next_value
        self.field_name = field_name

        super().__init__(change=change, type="AddEnumValueChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddEnumValueChange":
        from ._schemas.change import AddEnumValueChangeSchema

        return AddEnumValueChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddEnumValueChangeSchema

        return AddEnumValueChangeSchema().dump(self)


class AddExternalImageChange(Change):
    """Change triggered by the [Add External Image](ctp:api:type:ProductAddExternalImageAction) update action."""

    #: Value before the change.
    previous_value: typing.List["Image"]
    #: Value after the change.
    next_value: typing.List["Image"]
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["Image"],
        next_value: typing.List["Image"],
        catalog_data: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data

        super().__init__(change=change, type="AddExternalImageChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddExternalImageChange":
        from ._schemas.change import AddExternalImageChangeSchema

        return AddExternalImageChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddExternalImageChangeSchema

        return AddExternalImageChangeSchema().dump(self)


class AddFieldDefinitionChange(Change):
    """Change triggered by the [Add FieldDefinition](ctp:api:type:TypeAddFieldDefinitionAction) update action."""

    #: Value after the change.
    next_value: "FieldDefinition"

    def __init__(self, *, change: str, next_value: "FieldDefinition"):
        self.next_value = next_value

        super().__init__(change=change, type="AddFieldDefinitionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddFieldDefinitionChange":
        from ._schemas.change import AddFieldDefinitionChangeSchema

        return AddFieldDefinitionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddFieldDefinitionChangeSchema

        return AddFieldDefinitionChangeSchema().dump(self)


class AddInheritedAssociateChange(Change):
    """Change triggered by the [Add Associate](ctp:api:type:BusinessUnitAddAssociateAction) update action on a parent of a Business Unit in cases where [inheritance applies](/../api/associates-overview#conditions-for-inheritance)."""

    #: Value after the change.
    next_value: "InheritedAssociate"

    def __init__(self, *, change: str, next_value: "InheritedAssociate"):
        self.next_value = next_value

        super().__init__(change=change, type="AddInheritedAssociateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddInheritedAssociateChange":
        from ._schemas.change import AddInheritedAssociateChangeSchema

        return AddInheritedAssociateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddInheritedAssociateChangeSchema

        return AddInheritedAssociateChangeSchema().dump(self)


class AddInterfaceInteractionChange(Change):
    """Change triggered by the [Add InterfaceInteraction](ctp:api:type:PaymentAddInterfaceInteractionAction) update action."""

    #: Value after the change.
    next_value: "CustomFieldExpandedValue"

    def __init__(self, *, change: str, next_value: "CustomFieldExpandedValue"):
        self.next_value = next_value

        super().__init__(change=change, type="AddInterfaceInteractionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddInterfaceInteractionChange":
        from ._schemas.change import AddInterfaceInteractionChangeSchema

        return AddInterfaceInteractionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddInterfaceInteractionChangeSchema

        return AddInterfaceInteractionChangeSchema().dump(self)


class AddItemShippingAddressesChange(Change):
    """Change triggered by the following update actions:

    - [Add ItemShippingAddress](ctp:api:type:OrderAddItemShippingAddressAction) on Orders.
    - [Add ItemShippingAddress](ctp:api:type:StagedOrderAddItemShippingAddressAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "Address"
    #: Value after the change.
    next_value: "Address"

    def __init__(
        self, *, change: str, previous_value: "Address", next_value: "Address"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="AddItemShippingAddressesChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddItemShippingAddressesChange":
        from ._schemas.change import AddItemShippingAddressesChangeSchema

        return AddItemShippingAddressesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddItemShippingAddressesChangeSchema

        return AddItemShippingAddressesChangeSchema().dump(self)


class AddLocalizedEnumValueChange(Change):
    """Change triggered by the following update actions:

    - [Add LocalizableEnumValue to AttributeDefinition](ctp:api:type:ProductTypeAddLocalizedEnumValueAction) on Product Types.
    - [Add LocalizedEnumValue to FieldDefinition](ctp:api:type:TypeAddLocalizedEnumValueAction) on Types.

    """

    #: Value after the change.
    next_value: "AttributeLocalizedEnumValue"
    #: Name of the updated [FieldDefinition](ctp:api:type:FieldDefinition); only present on changes to Types.
    field_name: str
    #: Name of the updated [AttributeDefinition](ctp:api:type:AttributeDefinition); only present on changes to Product Types.
    attribute_name: str

    def __init__(
        self,
        *,
        change: str,
        next_value: "AttributeLocalizedEnumValue",
        field_name: str,
        attribute_name: str
    ):
        self.next_value = next_value
        self.field_name = field_name
        self.attribute_name = attribute_name

        super().__init__(change=change, type="AddLocalizedEnumValueChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddLocalizedEnumValueChange":
        from ._schemas.change import AddLocalizedEnumValueChangeSchema

        return AddLocalizedEnumValueChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddLocalizedEnumValueChangeSchema

        return AddLocalizedEnumValueChangeSchema().dump(self)


class AddLocationChange(Change):
    """Change triggered by the [Add Location](ctp:api:type:ZoneAddLocationAction) update action."""

    #: Value after the change.
    next_value: "Location"

    def __init__(self, *, change: str, next_value: "Location"):
        self.next_value = next_value

        super().__init__(change=change, type="AddLocationChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddLocationChange":
        from ._schemas.change import AddLocationChangeSchema

        return AddLocationChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddLocationChangeSchema

        return AddLocationChangeSchema().dump(self)


class AddOrderLineItemChange(Change):
    """Change triggered by the [Add LineItem](ctp:api:type:StagedOrderAddLineItemAction) update action."""

    #: Value before the change.
    previous_value: "LineItem"
    #: Value after the change.
    next_value: "LineItem"

    def __init__(
        self, *, change: str, previous_value: "LineItem", next_value: "LineItem"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="AddOrderLineItemChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddOrderLineItemChange":
        from ._schemas.change import AddOrderLineItemChangeSchema

        return AddOrderLineItemChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddOrderLineItemChangeSchema

        return AddOrderLineItemChangeSchema().dump(self)


class AddParcelToDeliveryChange(Change):
    """Change triggered by the following update actions:

    - [Add Parcel](ctp:api:type:OrderAddParcelToDeliveryAction) on Orders.
    - [Add Parcel](ctp:api:type:StagedOrderAddParcelToDeliveryAction) on Staged Orders.

    """

    #: Value after the change.
    next_value: "Parcel"
    #: `id` of the [Delivery](ctp:api:type:Delivery) to which the Parcel was added.
    delivery_id: str

    def __init__(self, *, change: str, next_value: "Parcel", delivery_id: str):
        self.next_value = next_value
        self.delivery_id = delivery_id

        super().__init__(change=change, type="AddParcelToDeliveryChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddParcelToDeliveryChange":
        from ._schemas.change import AddParcelToDeliveryChangeSchema

        return AddParcelToDeliveryChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddParcelToDeliveryChangeSchema

        return AddParcelToDeliveryChangeSchema().dump(self)


class AddPaymentChange(Change):
    """Change triggered by the following update actions:

    - [Add Payment](ctp:api:type:OrderAddPaymentAction) on Orders.
    - [Add Payment](ctp:api:type:StagedOrderAddPaymentAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "PaymentInfo"
    #: Value after the change.
    next_value: "PaymentInfo"

    def __init__(
        self, *, change: str, previous_value: "PaymentInfo", next_value: "PaymentInfo"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="AddPaymentChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddPaymentChange":
        from ._schemas.change import AddPaymentChangeSchema

        return AddPaymentChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddPaymentChangeSchema

        return AddPaymentChangeSchema().dump(self)


class AddPlainEnumValueChange(Change):
    """Change triggered by the [Add PlainEnumValue to AttributeDefinition](ctp:api:type:ProductTypeAddPlainEnumValueAction) update action."""

    #: Value after the change.
    next_value: "AttributePlainEnumValue"
    #: Name of the updated [AttributeDefinition](ctp:api:type:AttributeDefinition).
    attribute_name: str

    def __init__(
        self, *, change: str, next_value: "AttributePlainEnumValue", attribute_name: str
    ):
        self.next_value = next_value
        self.attribute_name = attribute_name

        super().__init__(change=change, type="AddPlainEnumValueChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddPlainEnumValueChange":
        from ._schemas.change import AddPlainEnumValueChangeSchema

        return AddPlainEnumValueChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddPlainEnumValueChangeSchema

        return AddPlainEnumValueChangeSchema().dump(self)


class AddPriceChange(Change):
    """Change triggered by the [Add Price](ctp:api:type:ProductAddPriceAction) update action."""

    #: Value after the change.
    next_value: "Price"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str
    #: `id` of the Embedded [Price](ctp:api:type:Price).
    price_id: str

    def __init__(
        self, *, change: str, next_value: "Price", catalog_data: str, price_id: str
    ):
        self.next_value = next_value
        self.catalog_data = catalog_data
        self.price_id = price_id

        super().__init__(change=change, type="AddPriceChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddPriceChange":
        from ._schemas.change import AddPriceChangeSchema

        return AddPriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddPriceChangeSchema

        return AddPriceChangeSchema().dump(self)


class AddProductChange(Change):
    """Change triggered by the [Add Product](ctp:api:type:ProductSelectionAddProductAction) update action."""

    #: Value after the change.
    next_value: "Reference"
    #: The [Product Variants](ctp:api:type:ProductVariant) included in the [Product Selection](ctp:api:type:ProductSelection).
    variant_selection: "ProductVariantSelection"

    def __init__(
        self,
        *,
        change: str,
        next_value: "Reference",
        variant_selection: "ProductVariantSelection"
    ):
        self.next_value = next_value
        self.variant_selection = variant_selection

        super().__init__(change=change, type="AddProductChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddProductChange":
        from ._schemas.change import AddProductChangeSchema

        return AddProductChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddProductChangeSchema

        return AddProductChangeSchema().dump(self)


class AddProductSelectionChange(Change):
    """Change triggered by the [Add Product Selection](ctp:api:type:StoreAddProductSelectionAction) update action."""

    previous_value: "ProductSelectionSetting"
    next_value: "ProductSelectionSetting"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ProductSelectionSetting",
        next_value: "ProductSelectionSetting"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="AddProductSelectionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddProductSelectionChange":
        from ._schemas.change import AddProductSelectionChangeSchema

        return AddProductSelectionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddProductSelectionChangeSchema

        return AddProductSelectionChangeSchema().dump(self)


class AddPropertyChange(Change):
    """Change triggered by the [Update CustomObject](ctp:api:endpoint:/{projectKey}/custom-objects:POST) request when a new property is added."""

    #: Value after the change.
    next_value: typing.Any
    #: Path to the new property that was added.
    path: str

    def __init__(self, *, change: str, next_value: typing.Any, path: str):
        self.next_value = next_value
        self.path = path

        super().__init__(change=change, type="AddPropertyChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddPropertyChange":
        from ._schemas.change import AddPropertyChangeSchema

        return AddPropertyChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddPropertyChangeSchema

        return AddPropertyChangeSchema().dump(self)


class AddReturnInfoChange(Change):
    """Change triggered by the following update actions:

    - [Add ReturnInfo](ctp:api:type:OrderAddReturnInfoAction) on Orders.
    - [Add ReturnInfo](ctp:api:type:StagedOrderAddReturnInfoAction) on Staged Orders.

    """

    #: Value after the change.
    next_value: "ReturnInfo"

    def __init__(self, *, change: str, next_value: "ReturnInfo"):
        self.next_value = next_value

        super().__init__(change=change, type="AddReturnInfoChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddReturnInfoChange":
        from ._schemas.change import AddReturnInfoChangeSchema

        return AddReturnInfoChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddReturnInfoChangeSchema

        return AddReturnInfoChangeSchema().dump(self)


class AddShippingAddressIdChange(Change):
    """Change triggered by the [Add Shipping Address ID](ctp:api:type:CustomerAddShippingAddressIdAction) update action."""

    #: Value before the change.
    previous_value: typing.List["str"]
    #: Value after the change.
    next_value: typing.List["str"]
    #: Address added to `shippingAddressIds`.
    address: "Address"

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["str"],
        next_value: typing.List["str"],
        address: "Address"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.address = address

        super().__init__(change=change, type="AddShippingAddressIdChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddShippingAddressIdChange":
        from ._schemas.change import AddShippingAddressIdChangeSchema

        return AddShippingAddressIdChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddShippingAddressIdChangeSchema

        return AddShippingAddressIdChangeSchema().dump(self)


class AddShoppingListLineItemChange(Change):
    """Change triggered by the [Add ShoppingListLineItem](ctp:api:type:ShoppingListAddLineItemAction) update action."""

    #: Value before the change.
    previous_value: "LineItem"
    #: Value after the change.
    next_value: "LineItem"

    def __init__(
        self, *, change: str, previous_value: "LineItem", next_value: "LineItem"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="AddShoppingListLineItemChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "AddShoppingListLineItemChange":
        from ._schemas.change import AddShoppingListLineItemChangeSchema

        return AddShoppingListLineItemChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddShoppingListLineItemChangeSchema

        return AddShoppingListLineItemChangeSchema().dump(self)


class AddStateRolesChange(Change):
    """Change triggered by the [Add State roles](ctp:api:type:StateAddRolesAction) update action."""

    #: Value before the change.
    previous_value: typing.List["StateRoleEnum"]
    #: Value after the change.
    next_value: typing.List["StateRoleEnum"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["StateRoleEnum"],
        next_value: typing.List["StateRoleEnum"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="AddStateRolesChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddStateRolesChange":
        from ._schemas.change import AddStateRolesChangeSchema

        return AddStateRolesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddStateRolesChangeSchema

        return AddStateRolesChangeSchema().dump(self)


class AddTaxRateChange(Change):
    """Change triggered by the [Add TaxRate](ctp:api:type:TaxCategoryAddTaxRateAction) update action."""

    #: Value after the change.
    next_value: "TaxRate"

    def __init__(self, *, change: str, next_value: "TaxRate"):
        self.next_value = next_value

        super().__init__(change=change, type="AddTaxRateChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddTaxRateChange":
        from ._schemas.change import AddTaxRateChangeSchema

        return AddTaxRateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddTaxRateChangeSchema

        return AddTaxRateChangeSchema().dump(self)


class AddTextLineItemChange(Change):
    """Change triggered by the [Add TextLineItem](ctp:api:type:ShoppingListAddTextLineItemAction) update action."""

    #: Value after the change.
    next_value: "TextLineItem"

    def __init__(self, *, change: str, next_value: "TextLineItem"):
        self.next_value = next_value

        super().__init__(change=change, type="AddTextLineItemChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddTextLineItemChange":
        from ._schemas.change import AddTextLineItemChangeSchema

        return AddTextLineItemChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddTextLineItemChangeSchema

        return AddTextLineItemChangeSchema().dump(self)


class AddToCategoryChange(Change):
    """Change triggered by the [Add to Category](ctp:api:type:ProductAddToCategoryAction) update action."""

    #: Value before the change.
    previous_value: typing.List["Reference"]
    #: Value after the change.
    next_value: typing.List["Reference"]
    #: Category to which the Product was added.
    category: "Reference"

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["Reference"],
        next_value: typing.List["Reference"],
        category: "Reference"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.category = category

        super().__init__(change=change, type="AddToCategoryChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddToCategoryChange":
        from ._schemas.change import AddToCategoryChangeSchema

        return AddToCategoryChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddToCategoryChangeSchema

        return AddToCategoryChangeSchema().dump(self)


class AddTransactionChange(Change):
    """Change triggered by the [Add Transaction](ctp:api:type:PaymentAddTransactionAction) update action."""

    #: Value after the change.
    next_value: "Transaction"

    def __init__(self, *, change: str, next_value: "Transaction"):
        self.next_value = next_value

        super().__init__(change=change, type="AddTransactionChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddTransactionChange":
        from ._schemas.change import AddTransactionChangeSchema

        return AddTransactionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddTransactionChangeSchema

        return AddTransactionChangeSchema().dump(self)


class AddVariantChange(Change):
    """Change triggered by the [Add ProductVariant](ctp:api:type:ProductAddVariantAction) update action."""

    #: Value before the change.
    previous_value: "Variant"
    #: Value after the change.
    next_value: "Variant"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Variant",
        next_value: "Variant",
        catalog_data: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data

        super().__init__(change=change, type="AddVariantChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AddVariantChange":
        from ._schemas.change import AddVariantChangeSchema

        return AddVariantChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import AddVariantChangeSchema

        return AddVariantChangeSchema().dump(self)


class ChangeAddressChange(Change):
    """Change triggered by the [Change Address](ctp:api:type:CustomerChangeAddressAction) update action."""

    #: Value before the change.
    previous_value: "Address"
    #: Value after the change.
    next_value: "Address"

    def __init__(
        self, *, change: str, previous_value: "Address", next_value: "Address"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeAddressChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeAddressChange":
        from ._schemas.change import ChangeAddressChangeSchema

        return ChangeAddressChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeAddressChangeSchema

        return ChangeAddressChangeSchema().dump(self)


class ChangeAmountAuthorizedChange(Change):
    """Change triggered automatically due to a user-initiated change."""

    #: Value before the change.
    previous_value: "Money"
    #: Value after the change.
    next_value: "Money"

    def __init__(self, *, change: str, previous_value: "Money", next_value: "Money"):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeAmountAuthorizedChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeAmountAuthorizedChange":
        from ._schemas.change import ChangeAmountAuthorizedChangeSchema

        return ChangeAmountAuthorizedChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeAmountAuthorizedChangeSchema

        return ChangeAmountAuthorizedChangeSchema().dump(self)


class ChangeAmountPlannedChange(Change):
    """Change triggered by the [Change AmountPlanned](ctp:api:type:PaymentChangeAmountPlannedAction) update action."""

    #: Value before the change.
    previous_value: "Money"
    #: Value after the change.
    next_value: "Money"

    def __init__(self, *, change: str, previous_value: "Money", next_value: "Money"):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeAmountPlannedChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeAmountPlannedChange":
        from ._schemas.change import ChangeAmountPlannedChangeSchema

        return ChangeAmountPlannedChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeAmountPlannedChangeSchema

        return ChangeAmountPlannedChangeSchema().dump(self)


class ChangeAssetNameChange(Change):
    """Change triggered by the following update actions:

    - [Change Asset Name](ctp:api:type:CategoryChangeAssetNameAction) on Categories.
    - [Change Asset Name](ctp:api:type:ProductChangeAssetNameAction) on Products.

    """

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"
    #: Information about the updated Asset.
    asset: "AssetChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString",
        asset: "AssetChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.asset = asset

        super().__init__(change=change, type="ChangeAssetNameChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeAssetNameChange":
        from ._schemas.change import ChangeAssetNameChangeSchema

        return ChangeAssetNameChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeAssetNameChangeSchema

        return ChangeAssetNameChangeSchema().dump(self)


class ChangeAssetOrderChange(Change):
    """Change triggered by the following update actions:

    - [Change Asset Order](ctp:api:type:CategoryChangeAssetOrderAction) on Categories.
    - [Change Asset Order](ctp:api:type:ProductChangeAssetOrderAction) on Products.

    """

    #: Value before the change.
    previous_value: typing.List["LocalizedString"]
    #: Value after the change.
    next_value: typing.List["LocalizedString"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["LocalizedString"],
        next_value: typing.List["LocalizedString"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeAssetOrderChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeAssetOrderChange":
        from ._schemas.change import ChangeAssetOrderChangeSchema

        return ChangeAssetOrderChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeAssetOrderChangeSchema

        return ChangeAssetOrderChangeSchema().dump(self)


class ChangeAssociateChange(Change):
    """Change triggered by the [Change Associate](ctp:api:type:BusinessUnitChangeAssociateAction) update action."""

    #: Value before the change.
    previous_value: "Associate"
    #: Value after the change.
    next_value: "Associate"

    def __init__(
        self, *, change: str, previous_value: "Associate", next_value: "Associate"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeAssociateChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeAssociateChange":
        from ._schemas.change import ChangeAssociateChangeSchema

        return ChangeAssociateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeAssociateChangeSchema

        return ChangeAssociateChangeSchema().dump(self)


class ChangeAssociateModeChange(Change):
    """Change triggered by the [Change Associate Mode](ctp:api:type:BusinessUnitChangeAssociateModeAction) update action."""

    #: Value before the change.
    previous_value: "BusinessUnitAssociateMode"
    #: Value after the change.
    next_value: "BusinessUnitAssociateMode"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "BusinessUnitAssociateMode",
        next_value: "BusinessUnitAssociateMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeAssociateModeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeAssociateModeChange":
        from ._schemas.change import ChangeAssociateModeChangeSchema

        return ChangeAssociateModeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeAssociateModeChangeSchema

        return ChangeAssociateModeChangeSchema().dump(self)


class ChangeAttributeConstraintChange(Change):
    """Change triggered by the [Change AttributeDefinition AttributeConstraint](ctp:api:type:ProductTypeChangeAttributeConstraintAction) update action."""

    #: Value before the change.
    previous_value: "AttributeConstraintEnum"
    #: Value after the change.
    next_value: "AttributeConstraintEnum"
    #: Name of the updated [AttributeDefinition](ctp:api:type:AttributeDefinition).
    attribute_name: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "AttributeConstraintEnum",
        next_value: "AttributeConstraintEnum",
        attribute_name: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.attribute_name = attribute_name

        super().__init__(change=change, type="ChangeAttributeConstraintChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeAttributeConstraintChange":
        from ._schemas.change import ChangeAttributeConstraintChangeSchema

        return ChangeAttributeConstraintChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeAttributeConstraintChangeSchema

        return ChangeAttributeConstraintChangeSchema().dump(self)


class ChangeAttributeOrderByNameChange(Change):
    """Change triggered by the [Change the order of AttributeDefinitions](ctp:api:type:ProductTypeChangeAttributeOrderByNameAction) update action."""

    #: Value before the change.
    previous_value: typing.List["str"]
    #: Value after the change.
    next_value: typing.List["str"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["str"],
        next_value: typing.List["str"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeAttributeOrderByNameChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeAttributeOrderByNameChange":
        from ._schemas.change import ChangeAttributeOrderByNameChangeSchema

        return ChangeAttributeOrderByNameChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeAttributeOrderByNameChangeSchema

        return ChangeAttributeOrderByNameChangeSchema().dump(self)


class ChangeBuyerAssignableChange(Change):
    """Change triggered by the [Change BuyerAssignable](ctp:api:type:AssociateRoleChangeBuyerAssignableAction) update action."""

    #: Value before the change.
    previous_value: bool
    #: Value after the change.
    next_value: bool

    def __init__(self, *, change: str, previous_value: bool, next_value: bool):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeBuyerAssignableChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeBuyerAssignableChange":
        from ._schemas.change import ChangeBuyerAssignableChangeSchema

        return ChangeBuyerAssignableChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeBuyerAssignableChangeSchema

        return ChangeBuyerAssignableChangeSchema().dump(self)


class ChangeCartDiscountsChange(Change):
    """Change triggered by the [Change CartDiscounts](ctp:api:type:DiscountCodeChangeCartDiscountsAction) update action."""

    #: Value before the change.
    previous_value: typing.List["Reference"]
    #: Value after the change.
    next_value: typing.List["Reference"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["Reference"],
        next_value: typing.List["Reference"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeCartDiscountsChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeCartDiscountsChange":
        from ._schemas.change import ChangeCartDiscountsChangeSchema

        return ChangeCartDiscountsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeCartDiscountsChangeSchema

        return ChangeCartDiscountsChangeSchema().dump(self)


class ChangeCartPredicateChange(Change):
    """Change triggered by the [Change Cart Predicate](ctp:api:type:CartDiscountChangeCartPredicateAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeCartPredicateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeCartPredicateChange":
        from ._schemas.change import ChangeCartPredicateChangeSchema

        return ChangeCartPredicateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeCartPredicateChangeSchema

        return ChangeCartPredicateChangeSchema().dump(self)


class ChangeCustomLineItemQuantityChange(Change):
    """Change triggered by the [Change CustomLineItem Quantity](ctp:api:type:StagedOrderChangeCustomLineItemQuantityAction) update action."""

    #: Value before the change.
    previous_value: int
    #: Value after the change.
    next_value: int
    #: Name of the CustomLineItem.
    custom_line_item: "LocalizedString"
    #: `id` of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: int,
        next_value: int,
        custom_line_item: "LocalizedString",
        custom_line_item_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.custom_line_item = custom_line_item
        self.custom_line_item_id = custom_line_item_id

        super().__init__(change=change, type="ChangeCustomLineItemQuantityChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeCustomLineItemQuantityChange":
        from ._schemas.change import ChangeCustomLineItemQuantityChangeSchema

        return ChangeCustomLineItemQuantityChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeCustomLineItemQuantityChangeSchema

        return ChangeCustomLineItemQuantityChangeSchema().dump(self)


class ChangeDescriptionChange(Change):
    """Change triggered by the [Change Description](ctp:api:type:ProductTypeChangeDescriptionAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeDescriptionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeDescriptionChange":
        from ._schemas.change import ChangeDescriptionChangeSchema

        return ChangeDescriptionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeDescriptionChangeSchema

        return ChangeDescriptionChangeSchema().dump(self)


class ChangeEmailChange(Change):
    """Change triggered by the [Change Email](ctp:api:type:CustomerChangeEmailAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeEmailChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeEmailChange":
        from ._schemas.change import ChangeEmailChangeSchema

        return ChangeEmailChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeEmailChangeSchema

        return ChangeEmailChangeSchema().dump(self)


class ChangeEnumValueLabelChange(Change):
    """Change triggered by the [Change EnumValue Label](ctp:api:type:TypeChangeEnumValueLabelAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str
    #: Name of the updated [FieldDefinition](ctp:api:type:FieldDefinition).
    field_name: str
    #: Key of the updated values.
    value_key: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: str,
        next_value: str,
        field_name: str,
        value_key: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.field_name = field_name
        self.value_key = value_key

        super().__init__(change=change, type="ChangeEnumValueLabelChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeEnumValueLabelChange":
        from ._schemas.change import ChangeEnumValueLabelChangeSchema

        return ChangeEnumValueLabelChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeEnumValueLabelChangeSchema

        return ChangeEnumValueLabelChangeSchema().dump(self)


class ChangeEnumValueOrderChange(Change):
    """Change triggered by the [Change the order of EnumValues](ctp:api:type:TypeChangeEnumValueOrderAction) update action."""

    #: Value before the change.
    previous_value: typing.List["EnumValue"]
    #: Value after the change.
    next_value: typing.List["EnumValue"]
    #: Name of the updated [FieldDefinition](ctp:api:type:FieldDefinition).
    field_name: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["EnumValue"],
        next_value: typing.List["EnumValue"],
        field_name: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.field_name = field_name

        super().__init__(change=change, type="ChangeEnumValueOrderChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeEnumValueOrderChange":
        from ._schemas.change import ChangeEnumValueOrderChangeSchema

        return ChangeEnumValueOrderChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeEnumValueOrderChangeSchema

        return ChangeEnumValueOrderChangeSchema().dump(self)


class ChangeFieldDefinitionOrderChange(Change):
    """Change triggered by the [Change the order of FieldDefinitions](ctp:api:type:TypeChangeFieldDefinitionOrderAction) update action."""

    #: Value before the change.
    previous_value: typing.List["FieldDefinitionOrderValue"]
    #: Value after the change.
    next_value: typing.List["FieldDefinitionOrderValue"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["FieldDefinitionOrderValue"],
        next_value: typing.List["FieldDefinitionOrderValue"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeFieldDefinitionOrderChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeFieldDefinitionOrderChange":
        from ._schemas.change import ChangeFieldDefinitionOrderChangeSchema

        return ChangeFieldDefinitionOrderChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeFieldDefinitionOrderChangeSchema

        return ChangeFieldDefinitionOrderChangeSchema().dump(self)


class ChangeGroupsChange(Change):
    """Change triggered by the [Change Groups](ctp:api:type:DiscountCodeChangeGroupsAction) update action."""

    #: Value before the change.
    previous_value: typing.List["str"]
    #: Value after the change.
    next_value: typing.List["str"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["str"],
        next_value: typing.List["str"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeGroupsChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeGroupsChange":
        from ._schemas.change import ChangeGroupsChangeSchema

        return ChangeGroupsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeGroupsChangeSchema

        return ChangeGroupsChangeSchema().dump(self)


class ChangeInheritedAssociateChange(Change):
    """Change triggered by the [Change Associate](ctp:api:type:BusinessUnitChangeAssociateAction) update action on a parent of a Business Unit in cases where [inheritance applies](/../api/associates-overview#conditions-for-inheritance)."""

    #: Value before the change.
    previous_value: "InheritedAssociate"
    #: Value after the change.
    next_value: "InheritedAssociate"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "InheritedAssociate",
        next_value: "InheritedAssociate"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeInheritedAssociateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeInheritedAssociateChange":
        from ._schemas.change import ChangeInheritedAssociateChangeSchema

        return ChangeInheritedAssociateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeInheritedAssociateChangeSchema

        return ChangeInheritedAssociateChangeSchema().dump(self)


class ChangeInitialChange(Change):
    """Change triggered by the [Change initial State](ctp:api:type:StateChangeInitialAction) update action."""

    #: Value before the change.
    previous_value: bool
    #: Value after the change.
    next_value: bool

    def __init__(self, *, change: str, previous_value: bool, next_value: bool):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeInitialChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeInitialChange":
        from ._schemas.change import ChangeInitialChangeSchema

        return ChangeInitialChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeInitialChangeSchema

        return ChangeInitialChangeSchema().dump(self)


class ChangeInputHintChange(Change):
    """Change triggered by the following update actions:

    - [Change AttributeDefinition InputHint](ctp:api:type:ProductTypeChangeInputHintAction) on Product Types.
    - [Change InputHint](ctp:api:type:TypeChangeInputHintAction) on Types.

    """

    #: Value before the change.
    previous_value: "TextInputHint"
    #: Value after the change.
    next_value: "TextInputHint"
    #: Name of the updated [FieldDefinition](ctp:api:type:FieldDefinition); only present on changes to Types.
    field_name: str
    #: Name of the updated [AttributeDefinition](ctp:api:type:AttributeDefinition); only present on changes to Product Types.
    attribute_name: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "TextInputHint",
        next_value: "TextInputHint",
        field_name: str,
        attribute_name: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.field_name = field_name
        self.attribute_name = attribute_name

        super().__init__(change=change, type="ChangeInputHintChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeInputHintChange":
        from ._schemas.change import ChangeInputHintChangeSchema

        return ChangeInputHintChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeInputHintChangeSchema

        return ChangeInputHintChangeSchema().dump(self)


class ChangeIsActiveChange(Change):
    """Change triggered by the following update actions:

    - [Change IsActive](ctp:api:type:CartDiscountChangeIsActiveAction) on Cart Discounts.
    - [Change IsActive](ctp:api:type:DiscountCodeChangeIsActiveAction) on Discount Codes.
    - [Change IsActive](ctp:api:type:ProductDiscountChangeIsActiveAction) on Product Discounts.

    """

    #: Value before the change.
    previous_value: bool
    #: Value after the change.
    next_value: bool

    def __init__(self, *, change: str, previous_value: bool, next_value: bool):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeIsActiveChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeIsActiveChange":
        from ._schemas.change import ChangeIsActiveChangeSchema

        return ChangeIsActiveChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeIsActiveChangeSchema

        return ChangeIsActiveChangeSchema().dump(self)


class ChangeIsSearchableChange(Change):
    """Change triggered by the [Change AttributeDefinition IsSearchable](ctp:api:type:ProductTypeChangeIsSearchableAction) update action."""

    #: Value before the change.
    previous_value: bool
    #: Value after the change.
    next_value: bool
    #: Name of the updated [AttributeDefinition](ctp:api:type:AttributeDefinition).
    attribute_name: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: bool,
        next_value: bool,
        attribute_name: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.attribute_name = attribute_name

        super().__init__(change=change, type="ChangeIsSearchableChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeIsSearchableChange":
        from ._schemas.change import ChangeIsSearchableChangeSchema

        return ChangeIsSearchableChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeIsSearchableChangeSchema

        return ChangeIsSearchableChangeSchema().dump(self)


class ChangeKeyChange(Change):
    """Change triggered by the following update actions:

    - [Change Key](ctp:api:type:ChannelChangeKeyAction) on Channels.
    - [Change State key](ctp:api:type:StateChangeKeyAction) on States.
    - [Change Key](ctp:api:type:TypeChangeKeyAction) on Types.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeKeyChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeKeyChange":
        from ._schemas.change import ChangeKeyChangeSchema

        return ChangeKeyChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeKeyChangeSchema

        return ChangeKeyChangeSchema().dump(self)


class ChangeLabelChange(Change):
    """Change triggered by the following update actions:

    - [Change AttributeDefinition Label](ctp:api:type:ProductTypeChangeLabelAction) on Product Types.
    - [Change FieldDefinition Label](ctp:api:type:TypeChangeLabelAction) on Types.

    """

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"
    #: Name of the updated [FieldDefinition](ctp:api:type:FieldDefinition); only present on changes to Types).
    field_name: str
    #: Name of the updated [AttributeDefinition](ctp:api:type:AttributeDefinition); only present on changes to Product Types.
    attribute_name: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString",
        field_name: str,
        attribute_name: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.field_name = field_name
        self.attribute_name = attribute_name

        super().__init__(change=change, type="ChangeLabelChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeLabelChange":
        from ._schemas.change import ChangeLabelChangeSchema

        return ChangeLabelChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeLabelChangeSchema

        return ChangeLabelChangeSchema().dump(self)


class ChangeLineItemQuantityChange(Change):
    """Change triggered by the [Change LineItem Quantity](ctp:api:type:StagedOrderChangeLineItemQuantityAction) update action."""

    #: Value before the change.
    previous_value: int
    #: Value after the change
    next_value: int
    #: Name of the [Product](ctp:api:type:Product) the updated Line Item is based on.
    line_item: "LocalizedString"
    #: `id` of the updated [LineItem](ctp:api:type:LineItem).
    line_item_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: int,
        next_value: int,
        line_item: "LocalizedString",
        line_item_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item
        self.line_item_id = line_item_id

        super().__init__(change=change, type="ChangeLineItemQuantityChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeLineItemQuantityChange":
        from ._schemas.change import ChangeLineItemQuantityChangeSchema

        return ChangeLineItemQuantityChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeLineItemQuantityChangeSchema

        return ChangeLineItemQuantityChangeSchema().dump(self)


class ChangeLocalizedDescriptionChange(Change):
    """Change triggered by the [Change Description](ctp:api:type:ChannelChangeDescriptionAction) update action."""

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeLocalizedDescriptionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeLocalizedDescriptionChange":
        from ._schemas.change import ChangeLocalizedDescriptionChangeSchema

        return ChangeLocalizedDescriptionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeLocalizedDescriptionChangeSchema

        return ChangeLocalizedDescriptionChangeSchema().dump(self)


class ChangeLocalizedEnumValueLabelChange(Change):
    """Change triggered by the following update actions:

    - [Change the label of a LocalizedEnumValue](ctp:api:type:ProductTypeChangeLocalizedEnumValueLabelAction) on Product Types.
    - [Change LocalizedEnumValue Label](ctp:api:type:TypeChangeLocalizedEnumValueLabelAction) on Types.

    """

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"
    #: Name of the updated [FieldDefinition](ctp:api:type:FieldDefinition); only present on changes to Types.
    field_name: str
    #: Name of the updated [AttributeDefinition](ctp:api:type:AttributeDefinition); only present on changes to Product Types.
    attribute_name: str
    #: Key of the updated values.
    value_key: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString",
        field_name: str,
        attribute_name: str,
        value_key: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.field_name = field_name
        self.attribute_name = attribute_name
        self.value_key = value_key

        super().__init__(change=change, type="ChangeLocalizedEnumValueLabelChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeLocalizedEnumValueLabelChange":
        from ._schemas.change import ChangeLocalizedEnumValueLabelChangeSchema

        return ChangeLocalizedEnumValueLabelChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeLocalizedEnumValueLabelChangeSchema

        return ChangeLocalizedEnumValueLabelChangeSchema().dump(self)


class ChangeLocalizedEnumValueOrderChange(Change):
    """Change triggered by the following update actions:

    - [Change the order of LocalizedEnumValues](ctp:api:type:ProductTypeChangeLocalizedEnumValueOrderAction) on Product Types.
    - [Change the order of LocalizedEnumValues](ctp:api:type:TypeChangeLocalizedEnumValueOrderAction) on Types.

    """

    #: Value before the change.
    previous_value: typing.List["LocalizedEnumValue"]
    #: Value after the change.
    next_value: typing.List["LocalizedEnumValue"]
    #: Name of the updated [FieldDefinition](ctp:api:type:FieldDefinition); only present on changes to Types.
    field_name: str
    #: Name of the updated [AttributeDefinition](ctp:api:type:AttributeDefinition); only present on changes to Product Types.
    attribute_name: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["LocalizedEnumValue"],
        next_value: typing.List["LocalizedEnumValue"],
        field_name: str,
        attribute_name: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.field_name = field_name
        self.attribute_name = attribute_name

        super().__init__(change=change, type="ChangeLocalizedEnumValueOrderChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeLocalizedEnumValueOrderChange":
        from ._schemas.change import ChangeLocalizedEnumValueOrderChangeSchema

        return ChangeLocalizedEnumValueOrderChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeLocalizedEnumValueOrderChangeSchema

        return ChangeLocalizedEnumValueOrderChangeSchema().dump(self)


class ChangeLocalizedNameChange(Change):
    """Change triggered by the following update actions:

    - [Change Name](ctp:api:type:CartDiscountChangeNameAction) on Cart Discounts.
    - [Change Name](ctp:api:type:CategoryChangeNameAction) on Categories.
    - [Change Name](ctp:api:type:ChannelChangeNameAction) on Channels.
    - [Change Name](ctp:api:type:ProductChangeNameAction) on Products.
    - [Change Name](ctp:api:type:ProductDiscountChangeNameAction) on Product Discounts.
    - [Change Name](ctp:api:type:ProductSelectionChangeNameAction) on Product Selections.
    - [Change Name](ctp:api:type:ShoppingListChangeNameAction) on Shopping Lists.
    - [Change Name](ctp:api:type:ZoneChangeNameAction) on Zones.

    """

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeLocalizedNameChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeLocalizedNameChange":
        from ._schemas.change import ChangeLocalizedNameChangeSchema

        return ChangeLocalizedNameChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeLocalizedNameChangeSchema

        return ChangeLocalizedNameChangeSchema().dump(self)


class ChangeMasterVariantChange(Change):
    """Change triggered by the [Change Master Variant](ctp:api:type:ProductChangeMasterVariantAction) update action."""

    #: Value before the change.
    previous_value: "Variant"
    #: Value after the change.
    next_value: "Variant"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Variant",
        next_value: "Variant",
        catalog_data: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data

        super().__init__(change=change, type="ChangeMasterVariantChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeMasterVariantChange":
        from ._schemas.change import ChangeMasterVariantChangeSchema

        return ChangeMasterVariantChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeMasterVariantChangeSchema

        return ChangeMasterVariantChangeSchema().dump(self)


class ChangeNameChange(Change):
    """Change triggered by the following update actions:

    - [Change Name](ctp:api:type:CustomerGroupChangeNameAction) on Customer Groups.
    - [Change Name](ctp:api:type:ProductTypeChangeNameAction) on Product Types.
    - [Change Name](ctp:api:type:TaxCategoryChangeNameAction) on Tax Categories.
    - [Change Name](ctp:api:type:ZoneChangeNameAction) on Zones.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeNameChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeNameChange":
        from ._schemas.change import ChangeNameChangeSchema

        return ChangeNameChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeNameChangeSchema

        return ChangeNameChangeSchema().dump(self)


class ChangeOrderHintChange(Change):
    """Change triggered by the [Change OrderHint](ctp:api:type:CategoryChangeOrderHintAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeOrderHintChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeOrderHintChange":
        from ._schemas.change import ChangeOrderHintChangeSchema

        return ChangeOrderHintChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeOrderHintChangeSchema

        return ChangeOrderHintChangeSchema().dump(self)


class ChangeOrderStateChange(Change):
    """Change triggered by the following update actions:

    - [Change OrderState](ctp:api:type:OrderChangeOrderStateAction) on Orders.
    - [Change OrderState](ctp:api:type:StagedOrderChangeOrderStateAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "OrderState"
    #: Value after the change.
    next_value: "OrderState"

    def __init__(
        self, *, change: str, previous_value: "OrderState", next_value: "OrderState"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeOrderStateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeOrderStateChange":
        from ._schemas.change import ChangeOrderStateChangeSchema

        return ChangeOrderStateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeOrderStateChangeSchema

        return ChangeOrderStateChangeSchema().dump(self)


class ChangeParentChange(Change):
    """Change triggered by the [Change Parent](ctp:api:type:CategoryChangeParentAction) update action."""

    #: Value before the change.
    previous_value: "Reference"
    #: Value after the change.
    next_value: "Reference"

    def __init__(
        self, *, change: str, previous_value: "Reference", next_value: "Reference"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeParentChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeParentChange":
        from ._schemas.change import ChangeParentChangeSchema

        return ChangeParentChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeParentChangeSchema

        return ChangeParentChangeSchema().dump(self)


class ChangeParentUnitChange(Change):
    """Change triggered by the [Change Parent Unit](ctp:api:type:BusinessUnitChangeParentUnitAction) update action."""

    #: Value before the change.
    previous_value: "KeyReference"
    #: Value after the change.
    next_value: "KeyReference"

    def __init__(
        self, *, change: str, previous_value: "KeyReference", next_value: "KeyReference"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeParentUnitChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeParentUnitChange":
        from ._schemas.change import ChangeParentUnitChangeSchema

        return ChangeParentUnitChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeParentUnitChangeSchema

        return ChangeParentUnitChangeSchema().dump(self)


class ChangePaymentStateChange(Change):
    """Change triggered by the following update actions:

    - [Change PaymentState](ctp:api:type:OrderChangePaymentStateAction) on Orders.
    - [Change PaymentState](ctp:api:type:StagedOrderChangePaymentStateAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "PaymentState"
    #: Value after the change.
    next_value: "PaymentState"

    def __init__(
        self, *, change: str, previous_value: "PaymentState", next_value: "PaymentState"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangePaymentStateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangePaymentStateChange":
        from ._schemas.change import ChangePaymentStateChangeSchema

        return ChangePaymentStateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangePaymentStateChangeSchema

        return ChangePaymentStateChangeSchema().dump(self)


class ChangePlainEnumValueLabelChange(Change):
    """Change triggered by the [Change the label of an EnumValue](ctp:api:type:ProductTypeChangePlainEnumValueLabelAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str
    #: Name of the updated [AttributeDefinition](ctp:api:type:AttributeDefinition).
    attribute_name: str
    #: Key of the updated values.
    value_key: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: str,
        next_value: str,
        attribute_name: str,
        value_key: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.attribute_name = attribute_name
        self.value_key = value_key

        super().__init__(change=change, type="ChangePlainEnumValueLabelChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangePlainEnumValueLabelChange":
        from ._schemas.change import ChangePlainEnumValueLabelChangeSchema

        return ChangePlainEnumValueLabelChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangePlainEnumValueLabelChangeSchema

        return ChangePlainEnumValueLabelChangeSchema().dump(self)


class ChangePlainEnumValueOrderChange(Change):
    """Change triggered by the [Change the order of EnumValues](ctp:api:type:ProductTypeChangePlainEnumValueOrderAction) update action."""

    #: Value before the change.
    previous_value: typing.List["EnumValue"]
    #: Value after the change.
    next_value: typing.List["EnumValue"]
    #: Name of the updated [AttributeDefinition](ctp:api:type:AttributeDefinition).
    attribute_name: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["EnumValue"],
        next_value: typing.List["EnumValue"],
        attribute_name: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.attribute_name = attribute_name

        super().__init__(change=change, type="ChangePlainEnumValueOrderChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangePlainEnumValueOrderChange":
        from ._schemas.change import ChangePlainEnumValueOrderChangeSchema

        return ChangePlainEnumValueOrderChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangePlainEnumValueOrderChangeSchema

        return ChangePlainEnumValueOrderChangeSchema().dump(self)


class ChangePredicateChange(Change):
    """Change triggered by the [Change Predicate](ctp:api:type:ProductDiscountChangePredicateAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangePredicateChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangePredicateChange":
        from ._schemas.change import ChangePredicateChangeSchema

        return ChangePredicateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangePredicateChangeSchema

        return ChangePredicateChangeSchema().dump(self)


class ChangePriceChange(Change):
    """Change triggered by the [Change Price](ctp:api:type:ProductChangePriceAction) update action."""

    #: Value before the change.
    previous_value: "Price"
    #: Value after the change.
    next_value: "Price"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str
    #: `id` of the Embedded [Price](ctp:api:type:Price).
    price_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Price",
        next_value: "Price",
        catalog_data: str,
        price_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data
        self.price_id = price_id

        super().__init__(change=change, type="ChangePriceChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangePriceChange":
        from ._schemas.change import ChangePriceChangeSchema

        return ChangePriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangePriceChangeSchema

        return ChangePriceChangeSchema().dump(self)


class ChangeProductSelectionActiveChange(Change):
    """Change triggered by the [Change Product Selection Active](ctp:api:type:StoreChangeProductSelectionAction) update action."""

    #: Reference to the Product Selection which was changed.
    product_selection: "Reference"
    #: Value before the change.
    previous_value: bool
    #: Value after the change.
    next_value: bool

    def __init__(
        self,
        *,
        change: str,
        product_selection: "Reference",
        previous_value: bool,
        next_value: bool
    ):
        self.product_selection = product_selection
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeProductSelectionActiveChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeProductSelectionActiveChange":
        from ._schemas.change import ChangeProductSelectionActiveChangeSchema

        return ChangeProductSelectionActiveChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeProductSelectionActiveChangeSchema

        return ChangeProductSelectionActiveChangeSchema().dump(self)


class ChangeQuantityChange(Change):
    """Change triggered by the [Change Quantity](ctp:api:type:InventoryEntryChangeQuantityAction) update action."""

    #: Value before the change.
    previous_value: "InventoryQuantityValue"
    #: Value after the change.
    next_value: "InventoryQuantityValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "InventoryQuantityValue",
        next_value: "InventoryQuantityValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeQuantityChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeQuantityChange":
        from ._schemas.change import ChangeQuantityChangeSchema

        return ChangeQuantityChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeQuantityChangeSchema

        return ChangeQuantityChangeSchema().dump(self)


class ChangeQuoteRequestStateChange(Change):
    """Change triggered by the [Change Quote Request State](ctp:api:type:QuoteRequestChangeQuoteRequestStateAction) update action."""

    #: Value before the change.
    previous_value: "QuoteRequestState"
    #: Value after the change.
    next_value: "QuoteRequestState"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "QuoteRequestState",
        next_value: "QuoteRequestState"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeQuoteRequestStateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeQuoteRequestStateChange":
        from ._schemas.change import ChangeQuoteRequestStateChangeSchema

        return ChangeQuoteRequestStateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeQuoteRequestStateChangeSchema

        return ChangeQuoteRequestStateChangeSchema().dump(self)


class ChangeQuoteStateChange(Change):
    """Change triggered by the [Change Quote State](ctp:api:type:QuoteChangeQuoteStateAction) update action."""

    #: Value before the change.
    previous_value: "QuoteState"
    #: Value after the change.
    next_value: "QuoteState"

    def __init__(
        self, *, change: str, previous_value: "QuoteState", next_value: "QuoteState"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeQuoteStateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeQuoteStateChange":
        from ._schemas.change import ChangeQuoteStateChangeSchema

        return ChangeQuoteStateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeQuoteStateChangeSchema

        return ChangeQuoteStateChangeSchema().dump(self)


class ChangeRequiresDiscountCodeChange(Change):
    """Change triggered by the [Change Requires DiscountCode](ctp:api:type:CartDiscountChangeRequiresDiscountCodeAction) update action."""

    #: Value before the change.
    previous_value: bool
    #: Value after the change.
    next_value: bool

    def __init__(self, *, change: str, previous_value: bool, next_value: bool):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeRequiresDiscountCodeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeRequiresDiscountCodeChange":
        from ._schemas.change import ChangeRequiresDiscountCodeChangeSchema

        return ChangeRequiresDiscountCodeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeRequiresDiscountCodeChangeSchema

        return ChangeRequiresDiscountCodeChangeSchema().dump(self)


class ChangeReviewRatingStatisticsChange(Change):
    #: Value before the change.
    previous_value: "ReviewRatingStatistics"
    #: Value after the change.
    next_value: "ReviewRatingStatistics"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ReviewRatingStatistics",
        next_value: "ReviewRatingStatistics"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeReviewRatingStatisticsChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeReviewRatingStatisticsChange":
        from ._schemas.change import ChangeReviewRatingStatisticsChangeSchema

        return ChangeReviewRatingStatisticsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeReviewRatingStatisticsChangeSchema

        return ChangeReviewRatingStatisticsChangeSchema().dump(self)


class ChangeShipmentStateChange(Change):
    """Change triggered by the following update actions:

    - [Change ShipmentState](ctp:api:type:OrderChangeShipmentStateAction) on Orders.
    - [Change ShipmentState](ctp:api:type:StagedOrderChangeShipmentStateAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "ShipmentState"
    #: Value after the change.
    next_value: "ShipmentState"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ShipmentState",
        next_value: "ShipmentState"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeShipmentStateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeShipmentStateChange":
        from ._schemas.change import ChangeShipmentStateChangeSchema

        return ChangeShipmentStateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeShipmentStateChangeSchema

        return ChangeShipmentStateChangeSchema().dump(self)


class ChangeShoppingListLineItemQuantityChange(Change):
    """Change triggered by the [Change ShoppingListLineItem Quantity](ctp:api:type:ShoppingListChangeLineItemQuantityAction) update action."""

    #: Value before the change.
    previous_value: int
    #: Value after the change.
    next_value: int
    #: Holds information about the updated Shopping List Line Item.
    line_item: "ShoppingListLineItemValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: int,
        next_value: int,
        line_item: "ShoppingListLineItemValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item

        super().__init__(change=change, type="ChangeShoppingListLineItemQuantityChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeShoppingListLineItemQuantityChange":
        from ._schemas.change import ChangeShoppingListLineItemQuantityChangeSchema

        return ChangeShoppingListLineItemQuantityChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeShoppingListLineItemQuantityChangeSchema

        return ChangeShoppingListLineItemQuantityChangeSchema().dump(self)


class ChangeShoppingListLineItemsOrderChange(Change):
    """Change triggered by the [Change ShoppingListLineItems Order](ctp:api:type:ShoppingListChangeLineItemsOrderAction) update action."""

    #: Value before the change.
    previous_value: typing.List["ShoppingListLineItemValue"]
    #: Value after the change.
    next_value: typing.List["ShoppingListLineItemValue"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["ShoppingListLineItemValue"],
        next_value: typing.List["ShoppingListLineItemValue"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeShoppingListLineItemsOrderChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeShoppingListLineItemsOrderChange":
        from ._schemas.change import ChangeShoppingListLineItemsOrderChangeSchema

        return ChangeShoppingListLineItemsOrderChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeShoppingListLineItemsOrderChangeSchema

        return ChangeShoppingListLineItemsOrderChangeSchema().dump(self)


class ChangeSlugChange(Change):
    """Change triggered by the following update actions:

    - [Change Slug](ctp:api:type:CategoryChangeSlugAction) on Categories.
    - [Change Slug](ctp:api:type:ProductChangeSlugAction) on Products.

    """

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeSlugChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeSlugChange":
        from ._schemas.change import ChangeSlugChangeSchema

        return ChangeSlugChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeSlugChangeSchema

        return ChangeSlugChangeSchema().dump(self)


class ChangeSortOrderChange(Change):
    """Change triggered by the following update actions:

    - [Change Sort Order](ctp:api:type:CartDiscountChangeSortOrderAction) on Cart Discounts.
    - [Change Sort Order](ctp:api:type:ProductDiscountChangeSortOrderAction) on Product Discounts.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeSortOrderChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeSortOrderChange":
        from ._schemas.change import ChangeSortOrderChangeSchema

        return ChangeSortOrderChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeSortOrderChangeSchema

        return ChangeSortOrderChangeSchema().dump(self)


class ChangeStackingModeChange(Change):
    """Change triggered by the [Change Stacking Mode](ctp:api:type:CartDiscountChangeStackingModeAction) update action."""

    #: Value before the change.
    previous_value: "StackingMode"
    #: Value after the change.
    next_value: "StackingMode"

    def __init__(
        self, *, change: str, previous_value: "StackingMode", next_value: "StackingMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeStackingModeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeStackingModeChange":
        from ._schemas.change import ChangeStackingModeChangeSchema

        return ChangeStackingModeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeStackingModeChangeSchema

        return ChangeStackingModeChangeSchema().dump(self)


class ChangeStagedQuoteStateChange(Change):
    """Change triggered by the [ChangeStagedQuoteState](ctp:api:type:StagedQuoteChangeStagedQuoteStateAction) update action."""

    #: Value before the change.
    previous_value: "StagedQuoteState"
    #: Value after the change.
    next_value: "StagedQuoteState"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "StagedQuoteState",
        next_value: "StagedQuoteState"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeStagedQuoteStateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeStagedQuoteStateChange":
        from ._schemas.change import ChangeStagedQuoteStateChangeSchema

        return ChangeStagedQuoteStateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeStagedQuoteStateChangeSchema

        return ChangeStagedQuoteStateChangeSchema().dump(self)


class ChangeStateTypeChange(Change):
    """Change triggered by the [Change State Type](ctp:api:type:StateChangeTypeAction) update action."""

    #: Value before the change.
    previous_value: "StateTypeEnum"
    #: Value after the change.
    next_value: "StateTypeEnum"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "StateTypeEnum",
        next_value: "StateTypeEnum"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeStateTypeChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeStateTypeChange":
        from ._schemas.change import ChangeStateTypeChangeSchema

        return ChangeStateTypeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeStateTypeChangeSchema

        return ChangeStateTypeChangeSchema().dump(self)


class ChangeStatusChange(Change):
    """Change triggered by the [Change Status](ctp:api:type:BusinessUnitChangeStatusAction) update action."""

    #: Value before the change.
    previous_value: "BusinessUnitStatus"
    #: Value after the change.
    next_value: "BusinessUnitStatus"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "BusinessUnitStatus",
        next_value: "BusinessUnitStatus"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeStatusChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeStatusChange":
        from ._schemas.change import ChangeStatusChangeSchema

        return ChangeStatusChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeStatusChangeSchema

        return ChangeStatusChangeSchema().dump(self)


class ChangeTargetChange(Change):
    """Change triggered by the [Change Target](ctp:api:type:CartDiscountChangeTargetAction) update action."""

    #: Value before the change.
    previous_value: "ChangeTargetChangeValue"
    #: Value after the change.
    next_value: "ChangeTargetChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ChangeTargetChangeValue",
        next_value: "ChangeTargetChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeTargetChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeTargetChange":
        from ._schemas.change import ChangeTargetChangeSchema

        return ChangeTargetChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeTargetChangeSchema

        return ChangeTargetChangeSchema().dump(self)


class ChangeTaxCalculationModeChange(Change):
    """Change triggered by the [Change TaxCalculationMode](ctp:api:type:StagedOrderChangeTaxCalculationModeAction) update action."""

    #: Value before the change.
    previous_value: "TaxCalculationMode"
    #: Value after the change.
    next_value: "TaxCalculationMode"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "TaxCalculationMode",
        next_value: "TaxCalculationMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeTaxCalculationModeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTaxCalculationModeChange":
        from ._schemas.change import ChangeTaxCalculationModeChangeSchema

        return ChangeTaxCalculationModeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeTaxCalculationModeChangeSchema

        return ChangeTaxCalculationModeChangeSchema().dump(self)


class ChangeTaxModeChange(Change):
    """Change triggered by the [Change TaxMode](ctp:api:type:StagedOrderChangeTaxModeAction) update action."""

    #: Value before the change.
    previous_value: "TaxMode"
    #: Value after the change.
    next_value: "TaxMode"

    def __init__(
        self, *, change: str, previous_value: "TaxMode", next_value: "TaxMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeTaxModeChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeTaxModeChange":
        from ._schemas.change import ChangeTaxModeChangeSchema

        return ChangeTaxModeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeTaxModeChangeSchema

        return ChangeTaxModeChangeSchema().dump(self)


class ChangeTaxRoundingModeChange(Change):
    """Change triggered by the [Change Tax RoundingMode](ctp:api:type:StagedOrderChangeTaxRoundingModeAction) update action."""

    #: Value before the change.
    previous_value: "RoundingMode"
    #: Value after the change.
    next_value: "RoundingMode"

    def __init__(
        self, *, change: str, previous_value: "RoundingMode", next_value: "RoundingMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeTaxRoundingModeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTaxRoundingModeChange":
        from ._schemas.change import ChangeTaxRoundingModeChangeSchema

        return ChangeTaxRoundingModeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeTaxRoundingModeChangeSchema

        return ChangeTaxRoundingModeChangeSchema().dump(self)


class ChangeTextLineItemNameChange(Change):
    """Change triggered by the [Change TextLineItem Name](ctp:api:type:ShoppingListChangeTextLineItemNameAction) update action."""

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"
    #: Holds information about the updated Text Line Item.
    text_line_item: "TextLineItemValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString",
        text_line_item: "TextLineItemValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.text_line_item = text_line_item

        super().__init__(change=change, type="ChangeTextLineItemNameChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTextLineItemNameChange":
        from ._schemas.change import ChangeTextLineItemNameChangeSchema

        return ChangeTextLineItemNameChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeTextLineItemNameChangeSchema

        return ChangeTextLineItemNameChangeSchema().dump(self)


class ChangeTextLineItemQuantityChange(Change):
    """Change triggered by the [Change TextLineItem Quantity](ctp:api:type:ShoppingListChangeTextLineItemQuantityAction) update action."""

    #: Value before the change.
    previous_value: int
    #: Value after the change.
    next_value: int
    #: Holds information about the updated Text Line Item.
    text_line_item: "TextLineItemValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: int,
        next_value: int,
        text_line_item: "TextLineItemValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.text_line_item = text_line_item

        super().__init__(change=change, type="ChangeTextLineItemQuantityChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTextLineItemQuantityChange":
        from ._schemas.change import ChangeTextLineItemQuantityChangeSchema

        return ChangeTextLineItemQuantityChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeTextLineItemQuantityChangeSchema

        return ChangeTextLineItemQuantityChangeSchema().dump(self)


class ChangeTextLineItemsOrderChange(Change):
    """Change triggered by the [Change TextLineItems Order](ctp:api:type:ShoppingListChangeTextLineItemsOrderAction) update action."""

    #: Value before the change.
    previous_value: typing.List["TextLineItemValue"]
    #: Value after the change.
    next_value: typing.List["TextLineItemValue"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["TextLineItemValue"],
        next_value: typing.List["TextLineItemValue"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeTextLineItemsOrderChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTextLineItemsOrderChange":
        from ._schemas.change import ChangeTextLineItemsOrderChangeSchema

        return ChangeTextLineItemsOrderChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeTextLineItemsOrderChangeSchema

        return ChangeTextLineItemsOrderChangeSchema().dump(self)


class ChangeTransactionInteractionIdChange(Change):
    """Change triggered by the [Change TransactionInteractionId](ctp:api:type:PaymentChangeTransactionInteractionIdAction) update action."""

    #: Value after the change.
    previous_value: str
    #: Value before the change.
    next_value: str
    #: Holds information about the updated Transaction.
    transaction: "TransactionChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: str,
        next_value: str,
        transaction: "TransactionChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.transaction = transaction

        super().__init__(change=change, type="ChangeTransactionInteractionIdChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTransactionInteractionIdChange":
        from ._schemas.change import ChangeTransactionInteractionIdChangeSchema

        return ChangeTransactionInteractionIdChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeTransactionInteractionIdChangeSchema

        return ChangeTransactionInteractionIdChangeSchema().dump(self)


class ChangeTransactionStateChange(Change):
    """Change triggered by the [Change TransactionState](ctp:api:type:PaymentChangeTransactionStateAction) update action."""

    #: Value before the change.
    previous_value: "TransactionState"
    #: Value after the change.
    next_value: "TransactionState"
    #: Holds information about the updated Transaction.
    transaction: "TransactionChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "TransactionState",
        next_value: "TransactionState",
        transaction: "TransactionChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.transaction = transaction

        super().__init__(change=change, type="ChangeTransactionStateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTransactionStateChange":
        from ._schemas.change import ChangeTransactionStateChangeSchema

        return ChangeTransactionStateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeTransactionStateChangeSchema

        return ChangeTransactionStateChangeSchema().dump(self)


class ChangeTransactionTimestampChange(Change):
    """Change triggered by the [Change TransactionTimestamp](ctp:api:type:PaymentChangeTransactionTimestampAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str
    #: Holds information about the updated Transaction.
    transaction: "TransactionChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: str,
        next_value: str,
        transaction: "TransactionChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.transaction = transaction

        super().__init__(change=change, type="ChangeTransactionTimestampChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTransactionTimestampChange":
        from ._schemas.change import ChangeTransactionTimestampChangeSchema

        return ChangeTransactionTimestampChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeTransactionTimestampChangeSchema

        return ChangeTransactionTimestampChangeSchema().dump(self)


class ChangeValueChange(Change):
    """Change triggered by the following update actions:

    - [Change Value](ctp:api:type:CartDiscountChangeValueAction) on Cart Discounts.
    - [Change Value](ctp:api:type:ProductDiscountChangeValueAction) on Product Discounts.

    """

    #: Value before the change.
    previous_value: "ChangeValueChangeValue"
    #: Value after the change.
    next_value: "ChangeValueChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ChangeValueChangeValue",
        next_value: "ChangeValueChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="ChangeValueChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ChangeValueChange":
        from ._schemas.change import ChangeValueChangeSchema

        return ChangeValueChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import ChangeValueChangeSchema

        return ChangeValueChangeSchema().dump(self)


class MoveImageToPositionChange(Change):
    """Change triggered by the [Move image to position](ctp:api:type:ProductMoveImageToPositionAction) update action."""

    #: Value before the change.
    previous_value: typing.List["Image"]
    #: Value after the change.
    next_value: typing.List["Image"]
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["Image"],
        next_value: typing.List["Image"],
        catalog_data: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data

        super().__init__(change=change, type="MoveImageToPositionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "MoveImageToPositionChange":
        from ._schemas.change import MoveImageToPositionChangeSchema

        return MoveImageToPositionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import MoveImageToPositionChangeSchema

        return MoveImageToPositionChangeSchema().dump(self)


class PublishChange(Change):
    """Change triggered by the [Publish](ctp:api:type:ProductPublishAction) update action."""

    def __init__(self, *, change: str):

        super().__init__(change=change, type="PublishChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "PublishChange":
        from ._schemas.change import PublishChangeSchema

        return PublishChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import PublishChangeSchema

        return PublishChangeSchema().dump(self)


class RemoveAddressChange(Change):
    """Change triggered by the [Remove Address](ctp:api:type:CustomerRemoveAddressAction) update action."""

    #: Value before the change.
    previous_value: "Address"

    def __init__(self, *, change: str, previous_value: "Address"):
        self.previous_value = previous_value

        super().__init__(change=change, type="RemoveAddressChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RemoveAddressChange":
        from ._schemas.change import RemoveAddressChangeSchema

        return RemoveAddressChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveAddressChangeSchema

        return RemoveAddressChangeSchema().dump(self)


class RemoveAssetChange(Change):
    """Change triggered by the following update actions:

    - [Remove Asset](ctp:api:type:CategoryRemoveAssetAction) on Categories.
    - [Remove Asset](ctp:api:type:ProductRemoveAssetAction) on Products.

    """

    #: Value before the change.
    previous_value: "Asset"

    def __init__(self, *, change: str, previous_value: "Asset"):
        self.previous_value = previous_value

        super().__init__(change=change, type="RemoveAssetChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RemoveAssetChange":
        from ._schemas.change import RemoveAssetChangeSchema

        return RemoveAssetChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveAssetChangeSchema

        return RemoveAssetChangeSchema().dump(self)


class RemoveAssociateChange(Change):
    """Change triggered by the [Remove Associate](ctp:api:type:BusinessUnitRemoveAssociateAction) update action."""

    #: Value before the change.
    previous_value: "Associate"

    def __init__(self, *, change: str, previous_value: "Associate"):
        self.previous_value = previous_value

        super().__init__(change=change, type="RemoveAssociateChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RemoveAssociateChange":
        from ._schemas.change import RemoveAssociateChangeSchema

        return RemoveAssociateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveAssociateChangeSchema

        return RemoveAssociateChangeSchema().dump(self)


class RemoveAttributeDefinitionChange(Change):
    """Change triggered by the [Remove AttributeDefinition](ctp:api:type:ProductTypeRemoveAttributeDefinitionAction) update action."""

    #: Value before the change.
    previous_value: "AttributeDefinition"

    def __init__(self, *, change: str, previous_value: "AttributeDefinition"):
        self.previous_value = previous_value

        super().__init__(change=change, type="RemoveAttributeDefinitionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveAttributeDefinitionChange":
        from ._schemas.change import RemoveAttributeDefinitionChangeSchema

        return RemoveAttributeDefinitionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveAttributeDefinitionChangeSchema

        return RemoveAttributeDefinitionChangeSchema().dump(self)


class RemoveBillingAddressIdChange(Change):
    """Change triggered by the [Remove Billing Address ID](ctp:api:type:CustomerRemoveBillingAddressIdAction) update action."""

    #: Value before the change.
    previous_value: typing.List["str"]
    #: Value after the change.
    next_value: typing.List["str"]
    #: Address removed from `billingAddressesIds`.
    address: "Address"

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["str"],
        next_value: typing.List["str"],
        address: "Address"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.address = address

        super().__init__(change=change, type="RemoveBillingAddressIdChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveBillingAddressIdChange":
        from ._schemas.change import RemoveBillingAddressIdChangeSchema

        return RemoveBillingAddressIdChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveBillingAddressIdChangeSchema

        return RemoveBillingAddressIdChangeSchema().dump(self)


class RemoveChannelRolesChange(Change):
    """Change triggered by the [Remove Roles](ctp:api:type:ChannelRemoveRolesAction) update action."""

    #: Value before the change.
    previous_value: typing.List["ChannelRoleEnum"]
    #: Value after the change.
    next_value: typing.List["ChannelRoleEnum"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["ChannelRoleEnum"],
        next_value: typing.List["ChannelRoleEnum"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="RemoveChannelRolesChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveChannelRolesChange":
        from ._schemas.change import RemoveChannelRolesChangeSchema

        return RemoveChannelRolesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveChannelRolesChangeSchema

        return RemoveChannelRolesChangeSchema().dump(self)


class RemoveCustomLineItemChange(Change):
    """Change triggered by the [Remove CustomLineItem](ctp:api:type:StagedOrderRemoveCustomLineItemAction) update action."""

    #: Value before the change.
    previous_value: "CustomLineItem"
    #: Value after the change.
    next_value: "CustomLineItem"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "CustomLineItem",
        next_value: "CustomLineItem"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="RemoveCustomLineItemChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveCustomLineItemChange":
        from ._schemas.change import RemoveCustomLineItemChangeSchema

        return RemoveCustomLineItemChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveCustomLineItemChangeSchema

        return RemoveCustomLineItemChangeSchema().dump(self)


class RemoveDeliveryItemsChange(Change):
    """Change triggered by the [Remove Delivery](ctp:api:type:OrderRemoveDeliveryAction) update action."""

    #: Value before the change.
    previous_value: "Delivery"

    def __init__(self, *, change: str, previous_value: "Delivery"):
        self.previous_value = previous_value

        super().__init__(change=change, type="RemoveDeliveryItemsChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveDeliveryItemsChange":
        from ._schemas.change import RemoveDeliveryItemsChangeSchema

        return RemoveDeliveryItemsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveDeliveryItemsChangeSchema

        return RemoveDeliveryItemsChangeSchema().dump(self)


class RemoveDiscountCodeChange(Change):
    """Change triggered by the [Remove DiscountCode](ctp:api:type:StagedOrderRemoveDiscountCodeAction) update action."""

    #: Value before the change.
    previous_value: "DiscountCodeInfo"

    def __init__(self, *, change: str, previous_value: "DiscountCodeInfo"):
        self.previous_value = previous_value

        super().__init__(change=change, type="RemoveDiscountCodeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveDiscountCodeChange":
        from ._schemas.change import RemoveDiscountCodeChangeSchema

        return RemoveDiscountCodeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveDiscountCodeChangeSchema

        return RemoveDiscountCodeChangeSchema().dump(self)


class RemoveEnumValuesChange(Change):
    """Change triggered by the [Remove EnumValues from AttributeDefinition](ctp:api:type:ProductTypeRemoveEnumValuesAction) update action."""

    #: Value before the change.
    previous_value: "EnumValue"
    #: Name of the updated [AttributeDefinition](ctp:api:type:AttributeDefinition).
    attribute_name: str

    def __init__(
        self, *, change: str, previous_value: "EnumValue", attribute_name: str
    ):
        self.previous_value = previous_value
        self.attribute_name = attribute_name

        super().__init__(change=change, type="RemoveEnumValuesChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveEnumValuesChange":
        from ._schemas.change import RemoveEnumValuesChangeSchema

        return RemoveEnumValuesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveEnumValuesChangeSchema

        return RemoveEnumValuesChangeSchema().dump(self)


class RemoveFieldDefinitionChange(Change):
    """Change triggered by the [Remove FieldDefinition](ctp:api:type:TypeRemoveFieldDefinitionAction) update action."""

    #: Value before the change.
    previous_value: "FieldDefinition"

    def __init__(self, *, change: str, previous_value: "FieldDefinition"):
        self.previous_value = previous_value

        super().__init__(change=change, type="RemoveFieldDefinitionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveFieldDefinitionChange":
        from ._schemas.change import RemoveFieldDefinitionChangeSchema

        return RemoveFieldDefinitionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveFieldDefinitionChangeSchema

        return RemoveFieldDefinitionChangeSchema().dump(self)


class RemoveFromCategoryChange(Change):
    """Change triggered by the [Remove from Category](ctp:api:type:ProductRemoveFromCategoryAction) update action."""

    #: Value before the change.
    previous_value: typing.List["Reference"]
    #: Value after the change.
    next_value: typing.List["Reference"]
    #: Category from which the Product was removed.
    category: "Reference"

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["Reference"],
        next_value: typing.List["Reference"],
        category: "Reference"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.category = category

        super().__init__(change=change, type="RemoveFromCategoryChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveFromCategoryChange":
        from ._schemas.change import RemoveFromCategoryChangeSchema

        return RemoveFromCategoryChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveFromCategoryChangeSchema

        return RemoveFromCategoryChangeSchema().dump(self)


class RemoveImageChange(Change):
    """Change triggered by the [Remove Image](ctp:api:type:ProductRemoveImageAction) update action."""

    #: Value before the change.
    previous_value: typing.List["Image"]
    #: Value after the change.
    next_value: typing.List["Image"]
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["Image"],
        next_value: typing.List["Image"],
        catalog_data: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data

        super().__init__(change=change, type="RemoveImageChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RemoveImageChange":
        from ._schemas.change import RemoveImageChangeSchema

        return RemoveImageChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveImageChangeSchema

        return RemoveImageChangeSchema().dump(self)


class RemoveInheritedAssociateChange(Change):
    """Change triggered by the [Remove Associate](ctp:api:type:BusinessUnitRemoveAssociateAction) update action on a parent of a Business Unit in cases where [inheritance applies](/../api/associates-overview#conditions-for-inheritance)."""

    #: The value before the change.
    previous_value: "InheritedAssociate"

    def __init__(self, *, change: str, previous_value: "InheritedAssociate"):
        self.previous_value = previous_value

        super().__init__(change=change, type="RemoveInheritedAssociateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveInheritedAssociateChange":
        from ._schemas.change import RemoveInheritedAssociateChangeSchema

        return RemoveInheritedAssociateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveInheritedAssociateChangeSchema

        return RemoveInheritedAssociateChangeSchema().dump(self)


class RemoveItemShippingAddressesChange(Change):
    """Change triggered by the [Remove Item Shipping Address](ctp:api:type:OrderRemoveItemShippingAddressAction) update action."""

    #: Value before the change.
    previous_value: "Address"
    #: Value after the change.
    next_value: "Address"

    def __init__(
        self, *, change: str, previous_value: "Address", next_value: "Address"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="RemoveItemShippingAddressesChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveItemShippingAddressesChange":
        from ._schemas.change import RemoveItemShippingAddressesChangeSchema

        return RemoveItemShippingAddressesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveItemShippingAddressesChangeSchema

        return RemoveItemShippingAddressesChangeSchema().dump(self)


class RemoveLocalizedEnumValuesChange(Change):
    """Change triggered by the [Remove EnumValues from AttributeDefinition](ctp:api:type:ProductTypeRemoveEnumValuesAction) update action."""

    #: Value before the change.
    previous_value: "LocalizedEnumValue"
    #: Name of the updated [AttributeDefinition](ctp:api:type:AttributeDefinition).
    attribute_name: str

    def __init__(
        self, *, change: str, previous_value: "LocalizedEnumValue", attribute_name: str
    ):
        self.previous_value = previous_value
        self.attribute_name = attribute_name

        super().__init__(change=change, type="RemoveLocalizedEnumValuesChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveLocalizedEnumValuesChange":
        from ._schemas.change import RemoveLocalizedEnumValuesChangeSchema

        return RemoveLocalizedEnumValuesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveLocalizedEnumValuesChangeSchema

        return RemoveLocalizedEnumValuesChangeSchema().dump(self)


class RemoveLocationChange(Change):
    """Change triggered by the [Remove Location](ctp:api:type:ZoneRemoveLocationAction) update action."""

    #: Value before the change.
    previous_value: "Location"

    def __init__(self, *, change: str, previous_value: "Location"):
        self.previous_value = previous_value

        super().__init__(change=change, type="RemoveLocationChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RemoveLocationChange":
        from ._schemas.change import RemoveLocationChangeSchema

        return RemoveLocationChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveLocationChangeSchema

        return RemoveLocationChangeSchema().dump(self)


class RemoveOrderLineItemChange(Change):
    """Change triggered by the [Remove Parcel From Delivery](ctp:api:type:StagedOrderRemoveLineItemAction) update action."""

    #: Value before the change.
    previous_value: "LineItem"
    #: Value after the change.
    next_value: "LineItem"

    def __init__(
        self, *, change: str, previous_value: "LineItem", next_value: "LineItem"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="RemoveOrderLineItemChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveOrderLineItemChange":
        from ._schemas.change import RemoveOrderLineItemChangeSchema

        return RemoveOrderLineItemChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveOrderLineItemChangeSchema

        return RemoveOrderLineItemChangeSchema().dump(self)


class RemoveParcelFromDeliveryChange(Change):
    """Change triggered by the following update actions:

    - [Remove Parcel From Delivery](ctp:api:type:OrderRemoveParcelFromDeliveryAction) on Orders.
    - [Remove Parcel From Delivery](ctp:api:type:StagedOrderRemoveParcelFromDeliveryAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "Parcel"
    #: `id` of the [Delivery](ctp:api:type:Delivery) from which the Parcel was removed.
    delivery_id: str

    def __init__(self, *, change: str, previous_value: "Parcel", delivery_id: str):
        self.previous_value = previous_value
        self.delivery_id = delivery_id

        super().__init__(change=change, type="RemoveParcelFromDeliveryChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveParcelFromDeliveryChange":
        from ._schemas.change import RemoveParcelFromDeliveryChangeSchema

        return RemoveParcelFromDeliveryChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveParcelFromDeliveryChangeSchema

        return RemoveParcelFromDeliveryChangeSchema().dump(self)


class RemovePaymentChange(Change):
    """Change triggered by the following update actions:

    - [Remove Payment](ctp:api:type:OrderRemovePaymentAction) on Orders.
    - [Remove Payment](ctp:api:type:StagedOrderRemovePaymentAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "PaymentInfo"
    #: Value after the change.
    next_value: "PaymentInfo"

    def __init__(
        self, *, change: str, previous_value: "PaymentInfo", next_value: "PaymentInfo"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="RemovePaymentChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RemovePaymentChange":
        from ._schemas.change import RemovePaymentChangeSchema

        return RemovePaymentChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemovePaymentChangeSchema

        return RemovePaymentChangeSchema().dump(self)


class RemovePriceChange(Change):
    """Change triggered by the [Remove Embedded Price](ctp:api:type:ProductRemovePriceAction) update action."""

    #: Value before the change.
    previous_value: "Price"
    #: Value after the change.
    next_value: "Price"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str
    #: `id` of the Embedded [Price](ctp:api:type:Price).
    price_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Price",
        next_value: "Price",
        catalog_data: str,
        price_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data
        self.price_id = price_id

        super().__init__(change=change, type="RemovePriceChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RemovePriceChange":
        from ._schemas.change import RemovePriceChangeSchema

        return RemovePriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemovePriceChangeSchema

        return RemovePriceChangeSchema().dump(self)


class RemoveProductChange(Change):
    """Change triggered by the [Remove Product](ctp:api:type:ProductSelectionRemoveProductAction) update action."""

    #: Value before the change.
    previous_value: "Reference"

    def __init__(self, *, change: str, previous_value: "Reference"):
        self.previous_value = previous_value

        super().__init__(change=change, type="RemoveProductChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RemoveProductChange":
        from ._schemas.change import RemoveProductChangeSchema

        return RemoveProductChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveProductChangeSchema

        return RemoveProductChangeSchema().dump(self)


class RemoveProductSelectionChange(Change):
    """Change triggered by the [Remove Product Selection](ctp:api:type:StoreRemoveProductSelectionAction) update action."""

    #: Value before the change.
    previous_value: "ProductSelectionSetting"

    def __init__(self, *, change: str, previous_value: "ProductSelectionSetting"):
        self.previous_value = previous_value

        super().__init__(change=change, type="RemoveProductSelectionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveProductSelectionChange":
        from ._schemas.change import RemoveProductSelectionChangeSchema

        return RemoveProductSelectionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveProductSelectionChangeSchema

        return RemoveProductSelectionChangeSchema().dump(self)


class RemovePropertyChange(Change):
    """Change triggered by the [Update CustomObject](ctp:api:endpoint:/{projectKey}/custom-objects:POST) request when an existing property is removed."""

    #: Value before the change.
    previous_value: typing.Any
    #: Path to the property that was removed.
    path: str

    def __init__(self, *, change: str, previous_value: typing.Any, path: str):
        self.previous_value = previous_value
        self.path = path

        super().__init__(change=change, type="RemovePropertyChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RemovePropertyChange":
        from ._schemas.change import RemovePropertyChangeSchema

        return RemovePropertyChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemovePropertyChangeSchema

        return RemovePropertyChangeSchema().dump(self)


class RemoveShippingAddressIdChange(Change):
    """Change triggered by the [Remove Shipping Address ID](ctp:api:type:CustomerRemoveShippingAddressIdAction) update action."""

    #: Value before the change.
    previous_value: typing.List["str"]
    #: Value after the change.
    next_value: typing.List["str"]
    #: Address removed from `shippingAddressesIds`.
    address: "Address"

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["str"],
        next_value: typing.List["str"],
        address: "Address"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.address = address

        super().__init__(change=change, type="RemoveShippingAddressIdChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveShippingAddressIdChange":
        from ._schemas.change import RemoveShippingAddressIdChangeSchema

        return RemoveShippingAddressIdChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveShippingAddressIdChangeSchema

        return RemoveShippingAddressIdChangeSchema().dump(self)


class RemoveShoppingListLineItemChange(Change):
    """Change triggered by the [Remove ShoppingListLineItem](ctp:api:type:ShoppingListRemoveLineItemAction) update action."""

    #: Value before the change.
    previous_value: "LineItem"
    #: Value after the change.
    next_value: "LineItem"

    def __init__(
        self, *, change: str, previous_value: "LineItem", next_value: "LineItem"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="RemoveShoppingListLineItemChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveShoppingListLineItemChange":
        from ._schemas.change import RemoveShoppingListLineItemChangeSchema

        return RemoveShoppingListLineItemChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveShoppingListLineItemChangeSchema

        return RemoveShoppingListLineItemChangeSchema().dump(self)


class RemoveStateRolesChange(Change):
    """Change triggered by the [Remove State roles](ctp:api:type:StateRemoveRolesAction) update action."""

    #: Value before the change.
    previous_value: typing.List["StateRoleEnum"]
    #: Value after the change.
    next_value: typing.List["StateRoleEnum"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["StateRoleEnum"],
        next_value: typing.List["StateRoleEnum"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="RemoveStateRolesChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveStateRolesChange":
        from ._schemas.change import RemoveStateRolesChangeSchema

        return RemoveStateRolesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveStateRolesChangeSchema

        return RemoveStateRolesChangeSchema().dump(self)


class RemoveTaxRateChange(Change):
    """Change triggered by the [Remove TaxRate](ctp:api:type:TaxCategoryRemoveTaxRateAction) update action."""

    #: Value before the change.
    previous_value: "TaxRate"

    def __init__(self, *, change: str, previous_value: "TaxRate"):
        self.previous_value = previous_value

        super().__init__(change=change, type="RemoveTaxRateChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RemoveTaxRateChange":
        from ._schemas.change import RemoveTaxRateChangeSchema

        return RemoveTaxRateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveTaxRateChangeSchema

        return RemoveTaxRateChangeSchema().dump(self)


class RemoveTextLineItemChange(Change):
    """Change triggered by the [Remove TextLineItem](ctp:api:type:ShoppingListRemoveTextLineItemAction) update action."""

    #: Value before the change.
    previous_value: "TextLineItem"
    #: Value after the change.
    next_value: "TextLineItem"

    def __init__(
        self, *, change: str, previous_value: "TextLineItem", next_value: "TextLineItem"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="RemoveTextLineItemChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RemoveTextLineItemChange":
        from ._schemas.change import RemoveTextLineItemChangeSchema

        return RemoveTextLineItemChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveTextLineItemChangeSchema

        return RemoveTextLineItemChangeSchema().dump(self)


class RemoveVariantChange(Change):
    """Change triggered by the [Remove ProductVariant](ctp:api:type:ProductRemoveVariantAction) update action."""

    #: Value before the change.
    previous_value: "Variant"
    #: Value after the change.
    next_value: "Variant"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Variant",
        next_value: "Variant",
        catalog_data: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data

        super().__init__(change=change, type="RemoveVariantChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "RemoveVariantChange":
        from ._schemas.change import RemoveVariantChangeSchema

        return RemoveVariantChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RemoveVariantChangeSchema

        return RemoveVariantChangeSchema().dump(self)


class RequestQuoteRenegotiationChange(Change):
    """Change triggered by the [Request Quote Renegotiation](ctp:api:type:QuoteRequestQuoteRenegotiationAction) update action."""

    #: Value before the change.
    previous_value: "QuoteState"
    #: Value after the change.
    next_value: "QuoteState"
    #: Message from the [Buyer](/../api/quotes-overview#buyer) regarding the [Quote](ctp:api:type:Quote) renegotiation request.
    buyer_comment: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "QuoteState",
        next_value: "QuoteState",
        buyer_comment: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.buyer_comment = buyer_comment

        super().__init__(change=change, type="RequestQuoteRenegotiationChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "RequestQuoteRenegotiationChange":
        from ._schemas.change import RequestQuoteRenegotiationChangeSchema

        return RequestQuoteRenegotiationChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import RequestQuoteRenegotiationChangeSchema

        return RequestQuoteRenegotiationChangeSchema().dump(self)


class SetAddressChange(Change):
    """Change triggered by the [Set Address](ctp:api:type:ChannelSetAddressAction) update action."""

    #: Value before the change.
    previous_value: "Address"
    #: Value after the change.
    next_value: "Address"

    def __init__(
        self, *, change: str, previous_value: "Address", next_value: "Address"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetAddressChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetAddressChange":
        from ._schemas.change import SetAddressChangeSchema

        return SetAddressChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetAddressChangeSchema

        return SetAddressChangeSchema().dump(self)


class SetAddressCustomFieldChange(Change):
    """Change triggered by the [Set Address Custom Field](ctp:api:type:BusinessUnitSetAddressCustomFieldAction) update action."""

    #: [Address](ctp:api:type:Address) which was extended.
    address: "Address"
    #: Name of the [Custom Field](ctp:api:type:CustomFields).
    name: str
    #: `id` of the referenced [Type](ctp:api:type:Type).
    custom_type_id: str
    #: Value before the change.
    previous_value: typing.Any
    #: Value after the change.
    next_value: typing.Any

    def __init__(
        self,
        *,
        change: str,
        address: "Address",
        name: str,
        custom_type_id: str,
        previous_value: typing.Any,
        next_value: typing.Any
    ):
        self.address = address
        self.name = name
        self.custom_type_id = custom_type_id
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetAddressCustomFieldChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetAddressCustomFieldChange":
        from ._schemas.change import SetAddressCustomFieldChangeSchema

        return SetAddressCustomFieldChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetAddressCustomFieldChangeSchema

        return SetAddressCustomFieldChangeSchema().dump(self)


class SetAddressCustomTypeChange(Change):
    """Change triggered by the [Set Address Custom Type](ctp:api:type:BusinessUnitSetAddressCustomTypeAction) update action."""

    #: [Address](ctp:api:type:Address) which was extended.
    address: "Address"
    #: Value before the change.
    previous_value: "CustomFields"
    #: Value after the change.
    next_value: "CustomFields"

    def __init__(
        self,
        *,
        change: str,
        address: "Address",
        previous_value: "CustomFields",
        next_value: "CustomFields"
    ):
        self.address = address
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetAddressCustomTypeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetAddressCustomTypeChange":
        from ._schemas.change import SetAddressCustomTypeChangeSchema

        return SetAddressCustomTypeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetAddressCustomTypeChangeSchema

        return SetAddressCustomTypeChangeSchema().dump(self)


class SetAnonymousIdChange(Change):
    """Change triggered by the following update actions:

    - [Set AnonymousId](ctp:api:type:PaymentSetAnonymousIdAction) on Payments.
    - [Set AnonymousId](ctp:api:type:ShoppingListSetAnonymousIdAction) on Shopping Lists.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetAnonymousIdChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetAnonymousIdChange":
        from ._schemas.change import SetAnonymousIdChangeSchema

        return SetAnonymousIdChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetAnonymousIdChangeSchema

        return SetAnonymousIdChangeSchema().dump(self)


class SetApplicationVersionChange(Change):
    """Change triggered automatically due to a user-initiated change."""

    #: Value before the change.
    previous_value: int
    #: Value after the change.
    next_value: int

    def __init__(self, *, change: str, previous_value: int, next_value: int):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetApplicationVersionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetApplicationVersionChange":
        from ._schemas.change import SetApplicationVersionChangeSchema

        return SetApplicationVersionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetApplicationVersionChangeSchema

        return SetApplicationVersionChangeSchema().dump(self)


class SetAssetCustomFieldChange(Change):
    """Change triggered by the following update actions:

    - [Set Asset CustomField](ctp:api:type:CategorySetAssetCustomFieldAction) on Categories.
    - [Set Asset CustomField](ctp:api:type:ProductSetAssetCustomFieldAction) on Products.

    """

    #: Value before the change.
    previous_value: typing.Any
    #: Value after the change.
    next_value: typing.Any
    #: Name of the [Custom Field](/../api/projects/custom-fields).
    name: str
    #: `id` of the referenced [Type](ctp:api:type:Type).
    custom_type_id: str
    #: Information about the updated Asset.
    asset: "AssetChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.Any,
        next_value: typing.Any,
        name: str,
        custom_type_id: str,
        asset: "AssetChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.name = name
        self.custom_type_id = custom_type_id
        self.asset = asset

        super().__init__(change=change, type="SetAssetCustomFieldChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetAssetCustomFieldChange":
        from ._schemas.change import SetAssetCustomFieldChangeSchema

        return SetAssetCustomFieldChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetAssetCustomFieldChangeSchema

        return SetAssetCustomFieldChangeSchema().dump(self)


class SetAssetCustomTypeChange(Change):
    """Change triggered by the following update actions:

    - [Set Asset Custom Type](ctp:api:type:CategorySetAssetCustomTypeAction) on Categories.
    - [Set Asset Custom Type](ctp:api:type:ProductSetAssetCustomTypeAction) on Products.

    """

    #: Value before the change.
    previous_value: "CustomFields"
    #: Value after the change.
    next_value: "CustomFields"
    #: Information about the updated Asset.
    asset: "AssetChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "CustomFields",
        next_value: "CustomFields",
        asset: "AssetChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.asset = asset

        super().__init__(change=change, type="SetAssetCustomTypeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetAssetCustomTypeChange":
        from ._schemas.change import SetAssetCustomTypeChangeSchema

        return SetAssetCustomTypeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetAssetCustomTypeChangeSchema

        return SetAssetCustomTypeChangeSchema().dump(self)


class SetAssetDescriptionChange(Change):
    """Change triggered by the following update actions:

    - [Set Asset Description](ctp:api:type:CategorySetAssetDescriptionAction) on Categories.
    - [Set Asset Description](ctp:api:type:ProductSetAssetDescriptionAction) on Products.

    """

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"
    #: Information about the updated Asset.
    asset: "AssetChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString",
        asset: "AssetChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.asset = asset

        super().__init__(change=change, type="SetAssetDescriptionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetAssetDescriptionChange":
        from ._schemas.change import SetAssetDescriptionChangeSchema

        return SetAssetDescriptionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetAssetDescriptionChangeSchema

        return SetAssetDescriptionChangeSchema().dump(self)


class SetAssetKeyChange(Change):
    """Change triggered by the following update actions:

    - [Set Asset Key](ctp:api:type:CategorySetAssetKeyAction) on Categories.
    - [Set Asset Key](ctp:api:type:ProductSetAssetKeyAction) on Products.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str
    #: Information about the updated Asset.
    asset: "AssetChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: str,
        next_value: str,
        asset: "AssetChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.asset = asset

        super().__init__(change=change, type="SetAssetKeyChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetAssetKeyChange":
        from ._schemas.change import SetAssetKeyChangeSchema

        return SetAssetKeyChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetAssetKeyChangeSchema

        return SetAssetKeyChangeSchema().dump(self)


class SetAssetSourcesChange(Change):
    """Change triggered by the following update actions:

    - [Set Asset Sources](ctp:api:type:CategorySetAssetSourcesAction) on Categories.
    - [Set Asset Sources](ctp:api:type:ProductSetAssetSourcesAction) on Products.

    """

    #: Value before the change.
    previous_value: typing.List["AssetSource"]
    #: Value after the change.
    next_value: typing.List["AssetSource"]
    #: Information about the updated Asset.
    asset: "AssetChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["AssetSource"],
        next_value: typing.List["AssetSource"],
        asset: "AssetChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.asset = asset

        super().__init__(change=change, type="SetAssetSourcesChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetAssetSourcesChange":
        from ._schemas.change import SetAssetSourcesChangeSchema

        return SetAssetSourcesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetAssetSourcesChangeSchema

        return SetAssetSourcesChangeSchema().dump(self)


class SetAssetTagsChange(Change):
    """Change triggered by the following update actions:

    - [Change Asset Tags](ctp:api:type:CategorySetAssetTagsAction) on Categories.
    - [Change Asset Tags](ctp:api:type:ProductSetAssetTagsAction) on Products.

    """

    #: Value before the change.
    previous_value: typing.List["str"]
    #: Value after the change.
    next_value: typing.List["str"]
    #: Information about the updated Asset.
    asset: "AssetChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["str"],
        next_value: typing.List["str"],
        asset: "AssetChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.asset = asset

        super().__init__(change=change, type="SetAssetTagsChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetAssetTagsChange":
        from ._schemas.change import SetAssetTagsChangeSchema

        return SetAssetTagsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetAssetTagsChangeSchema

        return SetAssetTagsChangeSchema().dump(self)


class SetAttributeChange(Change):
    """Change triggered by the [Set Attribute](ctp:api:type:ProductSetAttributeAction) update action."""

    #: Value before the change.
    previous_value: "AttributeValue"
    #: Value after the change.
    next_value: "AttributeValue"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "AttributeValue",
        next_value: "AttributeValue",
        catalog_data: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data

        super().__init__(change=change, type="SetAttributeChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetAttributeChange":
        from ._schemas.change import SetAttributeChangeSchema

        return SetAttributeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetAttributeChangeSchema

        return SetAttributeChangeSchema().dump(self)


class SetAuthenticationModeChange(Change):
    """Change triggered by the [Set AuthenticationMode](ctp:api:type:CustomerSetAuthenticationModeAction) update action."""

    #: Value before the change.
    previous_value: "AuthenticationMode"
    #: Value after the change.
    next_value: "AuthenticationMode"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "AuthenticationMode",
        next_value: "AuthenticationMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetAuthenticationModeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetAuthenticationModeChange":
        from ._schemas.change import SetAuthenticationModeChangeSchema

        return SetAuthenticationModeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetAuthenticationModeChangeSchema

        return SetAuthenticationModeChangeSchema().dump(self)


class SetAuthorNameChange(Change):
    """Change triggered by the [Set Author Name](ctp:api:type:ReviewSetAuthorNameAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetAuthorNameChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetAuthorNameChange":
        from ._schemas.change import SetAuthorNameChangeSchema

        return SetAuthorNameChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetAuthorNameChangeSchema

        return SetAuthorNameChangeSchema().dump(self)


class SetBillingAddressChange(Change):
    """Change triggered by the following update actions:

    - [Set Billing Address](ctp:api:type:OrderSetBillingAddressAction) on Orders.
    - [Set Billing Address](ctp:api:type:StagedOrderSetBillingAddressAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "Address"
    #: Value after the change.
    next_value: "Address"

    def __init__(
        self, *, change: str, previous_value: "Address", next_value: "Address"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetBillingAddressChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetBillingAddressChange":
        from ._schemas.change import SetBillingAddressChangeSchema

        return SetBillingAddressChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetBillingAddressChangeSchema

        return SetBillingAddressChangeSchema().dump(self)


class SetCartPredicateChange(Change):
    """Change triggered by the [Set Cart Predicate](ctp:api:type:DiscountCodeSetCartPredicateAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetCartPredicateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCartPredicateChange":
        from ._schemas.change import SetCartPredicateChangeSchema

        return SetCartPredicateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCartPredicateChangeSchema

        return SetCartPredicateChangeSchema().dump(self)


class SetCategoryOrderHintChange(Change):
    """Change triggered by the [Set Category Order Hint](ctp:api:type:ProductSetCategoryOrderHintAction) update action."""

    #: Value before the change.
    previous_value: "CategoryOrderHints"
    #: Value after the change.
    next_value: "CategoryOrderHints"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str
    #: `id` of the updated [Category](ctp:api:type:Category).
    category_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "CategoryOrderHints",
        next_value: "CategoryOrderHints",
        catalog_data: str,
        category_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data
        self.category_id = category_id

        super().__init__(change=change, type="SetCategoryOrderHintChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCategoryOrderHintChange":
        from ._schemas.change import SetCategoryOrderHintChangeSchema

        return SetCategoryOrderHintChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCategoryOrderHintChangeSchema

        return SetCategoryOrderHintChangeSchema().dump(self)


class SetChannelRolesChange(Change):
    """Change triggered by the [Set Roles](ctp:api:type:ChannelSetRolesAction) update action."""

    #: Value before the change.
    previous_value: typing.List["ChannelRoleEnum"]
    #: Value after the change.
    next_value: typing.List["ChannelRoleEnum"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["ChannelRoleEnum"],
        next_value: typing.List["ChannelRoleEnum"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetChannelRolesChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetChannelRolesChange":
        from ._schemas.change import SetChannelRolesChangeSchema

        return SetChannelRolesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetChannelRolesChangeSchema

        return SetChannelRolesChangeSchema().dump(self)


class SetCompanyNameChange(Change):
    """Change triggered by the [Set Company Name](ctp:api:type:CustomerSetCompanyNameAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetCompanyNameChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetCompanyNameChange":
        from ._schemas.change import SetCompanyNameChangeSchema

        return SetCompanyNameChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCompanyNameChangeSchema

        return SetCompanyNameChangeSchema().dump(self)


class SetContactEmailChange(Change):
    """Change triggered by the [Set Contact Email](ctp:api:type:BusinessUnitSetContactEmailAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetContactEmailChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetContactEmailChange":
        from ._schemas.change import SetContactEmailChangeSchema

        return SetContactEmailChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetContactEmailChangeSchema

        return SetContactEmailChangeSchema().dump(self)


class SetCountriesChange(Change):
    """Change triggered by the [Set Countries](ctp:api:type:StoreSetCountriesAction) update action."""

    #: Value before the change.
    previous_value: typing.List["StoreCountry"]
    #: Value after the change.
    next_value: typing.List["StoreCountry"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["StoreCountry"],
        next_value: typing.List["StoreCountry"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetCountriesChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetCountriesChange":
        from ._schemas.change import SetCountriesChangeSchema

        return SetCountriesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCountriesChangeSchema

        return SetCountriesChangeSchema().dump(self)


class SetCountryChange(Change):
    """Change triggered by the [Set Country](ctp:api:type:StagedOrderSetCountryAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetCountryChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetCountryChange":
        from ._schemas.change import SetCountryChangeSchema

        return SetCountryChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCountryChangeSchema

        return SetCountryChangeSchema().dump(self)


class SetCustomFieldChange(Change):
    """Change triggered by the following update actions:

    - [Set CustomField](ctp:api:type:CartDiscountSetCustomFieldAction) on Cart Discounts.
    - [Set CustomField](ctp:api:type:CategorySetCustomFieldAction) on Categories.
    - [Set CustomField](ctp:api:type:ChannelSetCustomFieldAction) on Channels.
    - [Set CustomField](ctp:api:type:CustomerSetCustomFieldAction) on Customers.
    - [Set CustomField](ctp:api:type:CustomerGroupSetCustomFieldAction) on Customer Groups.
    - [Set CustomField](ctp:api:type:DiscountCodeSetCustomFieldAction) on Discount Codes.
    - [Set CustomField](ctp:api:type:InventoryEntrySetCustomFieldAction) on Inventories.
    - [Set CustomField](ctp:api:type:OrderSetCustomFieldAction) on Orders.
    - [Set CustomField](ctp:api:type:OrderEditSetCustomFieldAction) on Order Edits.
    - [Set CustomField](ctp:api:type:PaymentSetCustomFieldAction) on Payments.
    - [Set CustomField](ctp:api:type:ProductSelectionSetCustomFieldAction) on Product Selections.
    - [Set CustomField](ctp:api:type:QuoteSetCustomFieldAction) on Quotes.
    - [Set CustomField](ctp:api:type:QuoteRequestSetCustomFieldAction) on Quote Requests.
    - [Set CustomField](ctp:api:type:ReviewSetCustomFieldAction) on Reviews.
    - [Set CustomField](ctp:api:type:ShoppingListSetCustomFieldAction) on Shopping Lists.
    - [Set CustomField](ctp:api:type:StagedOrderSetCustomFieldAction) on Staged Orders.
    - [Set CustomField](ctp:api:type:StagedQuoteSetCustomFieldAction) on Staged Quotes.
    - [Set CustomField](ctp:api:type:StoreSetCustomFieldAction) on Stores.

    """

    #: Value before the change.
    previous_value: typing.Any
    #: Value after the change.
    next_value: typing.Any
    #: Name of the [Custom Field](/../api/projects/custom-fields).
    name: str
    #: `id` of the referenced [Type](ctp:api:type:Type).
    custom_type_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.Any,
        next_value: typing.Any,
        name: str,
        custom_type_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.name = name
        self.custom_type_id = custom_type_id

        super().__init__(change=change, type="SetCustomFieldChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetCustomFieldChange":
        from ._schemas.change import SetCustomFieldChangeSchema

        return SetCustomFieldChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomFieldChangeSchema

        return SetCustomFieldChangeSchema().dump(self)


class SetCustomLineItemCustomFieldChange(Change):
    """Change triggered by the following update actions:

    - [Set CustomLineItem Custom Type](ctp:api:type:OrderSetCustomLineItemCustomFieldAction) on Orders.
    - [Set CustomLineItem Custom Type](ctp:api:type:StagedOrderSetCustomLineItemCustomFieldAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: typing.Any
    #: Value after the change.
    next_value: typing.Any
    #: Name of the [Custom Field](/../api/projects/custom-fields).
    name: str
    #: Name of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item: "LocalizedString"
    #: `id` of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.Any,
        next_value: typing.Any,
        name: str,
        custom_line_item: "LocalizedString",
        custom_line_item_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.name = name
        self.custom_line_item = custom_line_item
        self.custom_line_item_id = custom_line_item_id

        super().__init__(change=change, type="SetCustomLineItemCustomFieldChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCustomLineItemCustomFieldChange":
        from ._schemas.change import SetCustomLineItemCustomFieldChangeSchema

        return SetCustomLineItemCustomFieldChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomLineItemCustomFieldChangeSchema

        return SetCustomLineItemCustomFieldChangeSchema().dump(self)


class SetCustomLineItemCustomTypeChange(Change):
    """Change triggered by the following update actions:

    - [Set CustomLineItem CustomField](ctp:api:type:OrderSetCustomLineItemCustomTypeAction) on Orders.
    - [Set CustomLineItem CustomField](ctp:api:type:StagedOrderSetCustomLineItemCustomTypeAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "CustomFields"
    #: Value after the change.
    next_value: "CustomFields"
    #: Name of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item: "LocalizedString"
    #: `id` of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "CustomFields",
        next_value: "CustomFields",
        custom_line_item: "LocalizedString",
        custom_line_item_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.custom_line_item = custom_line_item
        self.custom_line_item_id = custom_line_item_id

        super().__init__(change=change, type="SetCustomLineItemCustomTypeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCustomLineItemCustomTypeChange":
        from ._schemas.change import SetCustomLineItemCustomTypeChangeSchema

        return SetCustomLineItemCustomTypeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomLineItemCustomTypeChangeSchema

        return SetCustomLineItemCustomTypeChangeSchema().dump(self)


class SetCustomLineItemMoneyChange(Change):
    """Change triggered by the [Set CustomLineItem Money](ctp:api:type:StagedOrderChangeCustomLineItemMoneyAction) update action."""

    #: Value before the change.
    previous_value: "Money"
    #: Value after the change.
    next_value: "Money"
    #: Name of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item: "LocalizedString"
    #: `id` of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Money",
        next_value: "Money",
        custom_line_item: "LocalizedString",
        custom_line_item_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.custom_line_item = custom_line_item
        self.custom_line_item_id = custom_line_item_id

        super().__init__(change=change, type="SetCustomLineItemMoneyChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCustomLineItemMoneyChange":
        from ._schemas.change import SetCustomLineItemMoneyChangeSchema

        return SetCustomLineItemMoneyChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomLineItemMoneyChangeSchema

        return SetCustomLineItemMoneyChangeSchema().dump(self)


class SetCustomLineItemShippingDetailsChange(Change):
    """Change triggered by the following update actions:

    - [Set CustomLineItem ShippingDetails](ctp:api:type:OrderSetCustomLineItemShippingDetailsAction) on Orders.
    - [Set CustomLineItem ShippingDetails](ctp:api:type:StagedOrderSetCustomLineItemShippingDetailsAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "ItemShippingDetails"
    #: Value after the change.
    next_value: "ItemShippingDetails"
    #: `id` of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ItemShippingDetails",
        next_value: "ItemShippingDetails",
        custom_line_item_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.custom_line_item_id = custom_line_item_id

        super().__init__(change=change, type="SetCustomLineItemShippingDetailsChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCustomLineItemShippingDetailsChange":
        from ._schemas.change import SetCustomLineItemShippingDetailsChangeSchema

        return SetCustomLineItemShippingDetailsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomLineItemShippingDetailsChangeSchema

        return SetCustomLineItemShippingDetailsChangeSchema().dump(self)


class SetCustomLineItemTaxAmountChange(Change):
    """Change triggered by the [Set CustomLineItem TaxAmount](ctp:api:type:StagedOrderSetCustomLineItemTaxAmountAction) update action."""

    #: Value before the change.
    previous_value: "TaxRate"
    #: Value after the change.
    next_value: "TaxRate"
    #: Name of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item: "LocalizedString"
    #: `id` of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item_id: str
    #: `"ExternalAmount"`
    tax_mode: "TaxMode"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "TaxRate",
        next_value: "TaxRate",
        custom_line_item: "LocalizedString",
        custom_line_item_id: str,
        tax_mode: "TaxMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.custom_line_item = custom_line_item
        self.custom_line_item_id = custom_line_item_id
        self.tax_mode = tax_mode

        super().__init__(change=change, type="SetCustomLineItemTaxAmountChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCustomLineItemTaxAmountChange":
        from ._schemas.change import SetCustomLineItemTaxAmountChangeSchema

        return SetCustomLineItemTaxAmountChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomLineItemTaxAmountChangeSchema

        return SetCustomLineItemTaxAmountChangeSchema().dump(self)


class SetCustomLineItemTaxCategoryChange(Change):
    #: Value before the change.
    previous_value: "Reference"
    #: Value after the change.
    next_value: "Reference"
    #: Name of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item: "LocalizedString"
    #: `id` of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Reference",
        next_value: "Reference",
        custom_line_item: "LocalizedString",
        custom_line_item_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.custom_line_item = custom_line_item
        self.custom_line_item_id = custom_line_item_id

        super().__init__(change=change, type="SetCustomLineItemTaxCategoryChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCustomLineItemTaxCategoryChange":
        from ._schemas.change import SetCustomLineItemTaxCategoryChangeSchema

        return SetCustomLineItemTaxCategoryChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomLineItemTaxCategoryChangeSchema

        return SetCustomLineItemTaxCategoryChangeSchema().dump(self)


class SetCustomLineItemTaxRateChange(Change):
    """Change triggered by the [Set CustomLineItem TaxRate](ctp:api:type:StagedOrderSetCustomLineItemTaxRateAction) update action."""

    #: Value before the change.
    previous_value: "TaxRate"
    #: Value after the change.
    next_value: "TaxRate"
    #: Name of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item: "LocalizedString"
    #: `id` of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item_id: str
    #: `"External"`
    tax_mode: "TaxMode"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "TaxRate",
        next_value: "TaxRate",
        custom_line_item: "LocalizedString",
        custom_line_item_id: str,
        tax_mode: "TaxMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.custom_line_item = custom_line_item
        self.custom_line_item_id = custom_line_item_id
        self.tax_mode = tax_mode

        super().__init__(change=change, type="SetCustomLineItemTaxRateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCustomLineItemTaxRateChange":
        from ._schemas.change import SetCustomLineItemTaxRateChangeSchema

        return SetCustomLineItemTaxRateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomLineItemTaxRateChangeSchema

        return SetCustomLineItemTaxRateChangeSchema().dump(self)


class SetCustomLineItemTaxedPriceChange(Change):
    #: Value before the change.
    previous_value: "Money"
    #: Value after the change.
    next_value: "Money"
    #: Name of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item: "LocalizedString"
    #: `id` of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Money",
        next_value: "Money",
        custom_line_item: "LocalizedString",
        custom_line_item_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.custom_line_item = custom_line_item
        self.custom_line_item_id = custom_line_item_id

        super().__init__(change=change, type="SetCustomLineItemTaxedPriceChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCustomLineItemTaxedPriceChange":
        from ._schemas.change import SetCustomLineItemTaxedPriceChangeSchema

        return SetCustomLineItemTaxedPriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomLineItemTaxedPriceChangeSchema

        return SetCustomLineItemTaxedPriceChangeSchema().dump(self)


class SetCustomLineItemTotalPriceChange(Change):
    #: Value before the change.
    previous_value: "Money"
    #: Value after the change.
    next_value: "Money"
    #: Name of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item: "LocalizedString"
    #: `id` of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    custom_line_item_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Money",
        next_value: "Money",
        custom_line_item: "LocalizedString",
        custom_line_item_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.custom_line_item = custom_line_item
        self.custom_line_item_id = custom_line_item_id

        super().__init__(change=change, type="SetCustomLineItemTotalPriceChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCustomLineItemTotalPriceChange":
        from ._schemas.change import SetCustomLineItemTotalPriceChangeSchema

        return SetCustomLineItemTotalPriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomLineItemTotalPriceChangeSchema

        return SetCustomLineItemTotalPriceChangeSchema().dump(self)


class SetCustomShippingMethodChange(Change):
    """Change triggered by the [Set Custom ShippingMethod](ctp:api:type:StagedOrderSetCustomShippingMethodAction) update action."""

    #: Value before the change.
    previous_value: "CustomShippingMethodChangeValue"
    #: Value after the change.
    next_value: "CustomShippingMethodChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "CustomShippingMethodChangeValue",
        next_value: "CustomShippingMethodChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetCustomShippingMethodChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCustomShippingMethodChange":
        from ._schemas.change import SetCustomShippingMethodChangeSchema

        return SetCustomShippingMethodChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomShippingMethodChangeSchema

        return SetCustomShippingMethodChangeSchema().dump(self)


class SetCustomTypeChange(Change):
    """Change triggered by the following update actions:

    - [Set Custom Type](ctp:api:type:CartDiscountSetCustomTypeAction) on Cart Discounts.
    - [Set Custom Type](ctp:api:type:CategorySetCustomTypeAction) on Categories.
    - [Set Custom Type](ctp:api:type:ChannelSetCustomTypeAction) on Channels.
    - [Set Custom Type](ctp:api:type:CustomerSetCustomTypeAction) on Customers.
    - [Set Custom Type](ctp:api:type:CustomerGroupSetCustomTypeAction) on Customer Groups.
    - [Set Custom Type](ctp:api:type:DiscountCodeSetCustomTypeAction) on Discount Codes.
    - [Set Custom Type](ctp:api:type:InventoryEntrySetCustomTypeAction) on Inventories.
    - [Set Custom Type](ctp:api:type:OrderSetCustomTypeAction) on Orders.
    - [Set Custom Type](ctp:api:type:OrderEditSetCustomTypeAction) on Order Edits.
    - [Set Custom Type](ctp:api:type:StagedOrderSetCustomTypeAction) on Staged Orders.
    - [Set Custom Type](ctp:api:type:PaymentSetCustomTypeAction) on Payments.
    - [Set Custom Type](ctp:api:type:ProductSelectionSetCustomTypeAction) on Product Selections.
    - [Set Custom Type](ctp:api:type:QuoteSetCustomTypeAction) on Quotes.
    - [Set Custom Type](ctp:api:type:StagedQuoteSetCustomTypeAction) on Staged Quotes.
    - [Set Custom Type](ctp:api:type:QuoteRequestSetCustomTypeAction) on Quote Requests.
    - [Set Custom Type](ctp:api:type:ReviewSetCustomTypeAction) on Reviews.
    - [Set Custom Type](ctp:api:type:ShoppingListSetCustomTypeAction) on Shopping Lists.
    - [Set Custom Type](ctp:api:type:StoreSetCustomTypeAction) on Stores.

    """

    #: Value before the change.
    previous_value: "CustomFields"
    #: Value after the change.
    next_value: "CustomFields"

    def __init__(
        self, *, change: str, previous_value: "CustomFields", next_value: "CustomFields"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetCustomTypeChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetCustomTypeChange":
        from ._schemas.change import SetCustomTypeChangeSchema

        return SetCustomTypeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomTypeChangeSchema

        return SetCustomTypeChangeSchema().dump(self)


class SetCustomerChange(Change):
    """Change triggered by the following update actions:

    - [Set Customer](ctp:api:type:PaymentSetCustomerAction) on Payments.
    - [Set Customer](ctp:api:type:ReviewSetCustomerAction) on Reviews.
    - [Set Customer](ctp:api:type:ShoppingListSetCustomerAction) on Shopping Lists.

    """

    #: Value before the change.
    previous_value: "Reference"
    #: Value after the change.
    next_value: "Reference"

    def __init__(
        self, *, change: str, previous_value: "Reference", next_value: "Reference"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetCustomerChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetCustomerChange":
        from ._schemas.change import SetCustomerChangeSchema

        return SetCustomerChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomerChangeSchema

        return SetCustomerChangeSchema().dump(self)


class SetCustomerEmailChange(Change):
    """Change triggered by the following update actions:

    - [Set Customer Email](ctp:api:type:OrderSetCustomerEmailAction) on Orders.
    - [Set Customer Email](ctp:api:type:StagedOrderSetCustomerEmailAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetCustomerEmailChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCustomerEmailChange":
        from ._schemas.change import SetCustomerEmailChangeSchema

        return SetCustomerEmailChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomerEmailChangeSchema

        return SetCustomerEmailChangeSchema().dump(self)


class SetCustomerGroupChange(Change):
    """Change triggered by the [Set CustomerGroup](ctp:api:type:CustomerSetCustomerGroupAction) update action."""

    #: Value before the change.
    previous_value: "Reference"
    #: Value after the change.
    next_value: "Reference"

    def __init__(
        self, *, change: str, previous_value: "Reference", next_value: "Reference"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetCustomerGroupChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCustomerGroupChange":
        from ._schemas.change import SetCustomerGroupChangeSchema

        return SetCustomerGroupChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomerGroupChangeSchema

        return SetCustomerGroupChangeSchema().dump(self)


class SetCustomerIdChange(Change):
    """Change triggered by the following update actions:

    - [Set Customer ID](ctp:api:type:OrderSetCustomerIdAction) on Orders.
    - [Set Customer ID](ctp:api:type:StagedOrderSetCustomerIdAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetCustomerIdChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetCustomerIdChange":
        from ._schemas.change import SetCustomerIdChangeSchema

        return SetCustomerIdChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomerIdChangeSchema

        return SetCustomerIdChangeSchema().dump(self)


class SetCustomerNumberChange(Change):
    """Change triggered by the [Set Customer Number](ctp:api:type:CustomerSetCustomerNumberAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetCustomerNumberChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCustomerNumberChange":
        from ._schemas.change import SetCustomerNumberChangeSchema

        return SetCustomerNumberChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetCustomerNumberChangeSchema

        return SetCustomerNumberChangeSchema().dump(self)


class SetDateOfBirthChange(Change):
    """Change triggered by the [Set Date of Birth](ctp:api:type:CustomerSetDateOfBirthAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetDateOfBirthChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetDateOfBirthChange":
        from ._schemas.change import SetDateOfBirthChangeSchema

        return SetDateOfBirthChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetDateOfBirthChangeSchema

        return SetDateOfBirthChangeSchema().dump(self)


class SetDefaultBillingAddressChange(Change):
    """Change triggered by the [Set Default Billing Address](ctp:api:type:CustomerSetDefaultBillingAddressAction) update action."""

    #: Value before the change.
    previous_value: "Address"
    #: Value after the change.
    next_value: "Address"

    def __init__(
        self, *, change: str, previous_value: "Address", next_value: "Address"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetDefaultBillingAddressChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetDefaultBillingAddressChange":
        from ._schemas.change import SetDefaultBillingAddressChangeSchema

        return SetDefaultBillingAddressChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetDefaultBillingAddressChangeSchema

        return SetDefaultBillingAddressChangeSchema().dump(self)


class SetDefaultShippingAddressChange(Change):
    """Change triggered by the [Set Default Shipping Address](ctp:api:type:CustomerSetDefaultShippingAddressAction) update action."""

    #: Value before the change.
    previous_value: "Address"
    #: Value after the change.
    next_value: "Address"

    def __init__(
        self, *, change: str, previous_value: "Address", next_value: "Address"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetDefaultShippingAddressChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetDefaultShippingAddressChange":
        from ._schemas.change import SetDefaultShippingAddressChangeSchema

        return SetDefaultShippingAddressChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetDefaultShippingAddressChangeSchema

        return SetDefaultShippingAddressChangeSchema().dump(self)


class SetDeleteDaysAfterLastModificationChange(Change):
    """Change triggered by the [Set DeleteDaysAfterLastModification](ctp:api:type:ShoppingListSetDeleteDaysAfterLastModificationAction) update action."""

    #: Value before the change.
    previous_value: int
    #: Value after the change.
    next_value: int

    def __init__(self, *, change: str, previous_value: int, next_value: int):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetDeleteDaysAfterLastModificationChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetDeleteDaysAfterLastModificationChange":
        from ._schemas.change import SetDeleteDaysAfterLastModificationChangeSchema

        return SetDeleteDaysAfterLastModificationChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetDeleteDaysAfterLastModificationChangeSchema

        return SetDeleteDaysAfterLastModificationChangeSchema().dump(self)


class SetDeliveryAddressChange(Change):
    """Change triggered by the following update actions:

    - [Set DeliveryAddress](ctp:api:type:OrderSetDeliveryAddressAction) on Orders.
    - [Set DeliveryAddress](ctp:api:type:StagedOrderSetDeliveryAddressAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "Address"
    #: Value after the change.
    next_value: "Address"
    #: `id` of the updated [Delivery](ctp:api:type:Delivery).
    delivery_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Address",
        next_value: "Address",
        delivery_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.delivery_id = delivery_id

        super().__init__(change=change, type="SetDeliveryAddressChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetDeliveryAddressChange":
        from ._schemas.change import SetDeliveryAddressChangeSchema

        return SetDeliveryAddressChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetDeliveryAddressChangeSchema

        return SetDeliveryAddressChangeSchema().dump(self)


class SetDeliveryItemsChange(Change):
    """Change triggered by the following update actions:

    - [Set Delivery Items](ctp:api:type:OrderSetDeliveryItemsAction) on Orders.
    - [Set Delivery Items](ctp:api:type:StagedOrderSetDeliveryItemsAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: typing.List["DeliveryItem"]
    #: Value after the change.
    next_value: typing.List["DeliveryItem"]
    #: `id` of the updated [Delivery](ctp:api:type:Delivery).
    delivery_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["DeliveryItem"],
        next_value: typing.List["DeliveryItem"],
        delivery_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.delivery_id = delivery_id

        super().__init__(change=change, type="SetDeliveryItemsChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetDeliveryItemsChange":
        from ._schemas.change import SetDeliveryItemsChangeSchema

        return SetDeliveryItemsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetDeliveryItemsChangeSchema

        return SetDeliveryItemsChangeSchema().dump(self)


class SetDescriptionChange(Change):
    """Change triggered by the following update actions:

    - [Set Description](ctp:api:type:TaxCategorySetDescriptionAction) on Tax Categories.
    - [Set Description](ctp:api:type:ZoneSetDescriptionAction) on Zones.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetDescriptionChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetDescriptionChange":
        from ._schemas.change import SetDescriptionChangeSchema

        return SetDescriptionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetDescriptionChangeSchema

        return SetDescriptionChangeSchema().dump(self)


class SetDiscountedPriceChange(Change):
    """Change triggered by the [Set Discounted Embedded Price](ctp:api:type:ProductSetDiscountedPriceAction) update action."""

    #: Value before the change.
    previous_value: "Price"
    #: Value after the change.
    next_value: "Price"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str
    #: `sku` or `key` of the updated [ProductVariant](ctp:api:type:ProductVariant).
    variant: str
    #: `id` of the Embedded [Price](ctp:api:type:Price).
    price_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Price",
        next_value: "Price",
        catalog_data: str,
        variant: str,
        price_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data
        self.variant = variant
        self.price_id = price_id

        super().__init__(change=change, type="SetDiscountedPriceChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetDiscountedPriceChange":
        from ._schemas.change import SetDiscountedPriceChangeSchema

        return SetDiscountedPriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetDiscountedPriceChangeSchema

        return SetDiscountedPriceChangeSchema().dump(self)


class SetDistributionChannelsChange(Change):
    """Change triggered by the [Set Distribution Channels](ctp:api:type:StoreSetDistributionChannelsAction) update action."""

    #: Value before the change.
    previous_value: typing.List["Reference"]
    #: Value after the change.
    next_value: typing.List["Reference"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["Reference"],
        next_value: typing.List["Reference"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetDistributionChannelsChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetDistributionChannelsChange":
        from ._schemas.change import SetDistributionChannelsChangeSchema

        return SetDistributionChannelsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetDistributionChannelsChangeSchema

        return SetDistributionChannelsChangeSchema().dump(self)


class SetExpectedDeliveryChange(Change):
    """Change triggered by the [Set ExpectedDelivery](ctp:api:type:InventoryEntrySetExpectedDeliveryAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetExpectedDeliveryChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetExpectedDeliveryChange":
        from ._schemas.change import SetExpectedDeliveryChangeSchema

        return SetExpectedDeliveryChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetExpectedDeliveryChangeSchema

        return SetExpectedDeliveryChangeSchema().dump(self)


class SetExternalIdChange(Change):
    """Change triggered by the following update actions:

    - [Set External ID](ctp:api:type:CategorySetExternalIdAction) on Categories.
    - [Set External ID](ctp:api:type:CustomerSetExternalIdAction) on Customers.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetExternalIdChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetExternalIdChange":
        from ._schemas.change import SetExternalIdChangeSchema

        return SetExternalIdChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetExternalIdChangeSchema

        return SetExternalIdChangeSchema().dump(self)


class SetFirstNameChange(Change):
    """Change triggered by the [Set First Name](ctp:api:type:CustomerSetFirstNameAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetFirstNameChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetFirstNameChange":
        from ._schemas.change import SetFirstNameChangeSchema

        return SetFirstNameChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetFirstNameChangeSchema

        return SetFirstNameChangeSchema().dump(self)


class SetGeoLocationChange(Change):
    """Change triggered by the [Set GeoLocation](ctp:api:type:ChannelSetGeoLocationAction) update action."""

    #: Value before the change.
    previous_value: "GeoLocation"
    #: Value after the change.
    next_value: "GeoLocation"

    def __init__(
        self, *, change: str, previous_value: "GeoLocation", next_value: "GeoLocation"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetGeoLocationChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetGeoLocationChange":
        from ._schemas.change import SetGeoLocationChangeSchema

        return SetGeoLocationChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetGeoLocationChangeSchema

        return SetGeoLocationChangeSchema().dump(self)


class SetImageLabelChange(Change):
    """Change triggered by the [Set Image Label](ctp:api:type:ProductSetImageLabelAction) update action."""

    #: Value before the change.
    previous_value: "Image"
    #: Value after the change.
    next_value: "Image"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Image",
        next_value: "Image",
        catalog_data: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data

        super().__init__(change=change, type="SetImageLabelChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetImageLabelChange":
        from ._schemas.change import SetImageLabelChangeSchema

        return SetImageLabelChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetImageLabelChangeSchema

        return SetImageLabelChangeSchema().dump(self)


class SetInputTipChange(Change):
    """Change triggered by the [Set AttributeDefinition InputTip](ctp:api:type:ProductTypeSetInputTipAction) update action."""

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"
    #: Name of the updated [AttributeDefinition](ctp:api:type:AttributeDefinition).
    attribute_name: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString",
        attribute_name: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.attribute_name = attribute_name

        super().__init__(change=change, type="SetInputTipChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetInputTipChange":
        from ._schemas.change import SetInputTipChangeSchema

        return SetInputTipChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetInputTipChangeSchema

        return SetInputTipChangeSchema().dump(self)


class SetInterfaceIdChange(Change):
    """Change triggered by the [Set InterfaceId](ctp:api:type:PaymentSetInterfaceIdAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetInterfaceIdChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetInterfaceIdChange":
        from ._schemas.change import SetInterfaceIdChangeSchema

        return SetInterfaceIdChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetInterfaceIdChangeSchema

        return SetInterfaceIdChangeSchema().dump(self)


class SetIsValidChange(Change):
    """Change triggered automatically due to a user-initiated change."""

    #: Value before the change.
    previous_value: bool
    #: Value after the change.
    next_value: bool

    def __init__(self, *, change: str, previous_value: bool, next_value: bool):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetIsValidChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetIsValidChange":
        from ._schemas.change import SetIsValidChangeSchema

        return SetIsValidChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetIsValidChangeSchema

        return SetIsValidChangeSchema().dump(self)


class SetKeyChange(Change):
    """Change triggered by the following update actions:

    - [Set Key](ctp:api:type:CartDiscountSetKeyAction) on Cart Discounts.
    - [Set Key](ctp:api:type:CategorySetKeyAction) on Categories.
    - [Set Key](ctp:api:type:CustomerSetKeyAction) on Customers.
    - [Set Key](ctp:api:type:CustomerGroupSetKeyAction) on Customer Groups.
    - [Set Key](ctp:api:type:PaymentSetKeyAction) on Payments.
    - [Set Key](ctp:api:type:ProductSetKeyAction) on Products.
    - [Set Key](ctp:api:type:ProductDiscountSetKeyAction) on Product Discounts.
    - [Set Key](ctp:api:type:ProductSelectionSetKeyAction) on Product Selections.
    - [Set Key](ctp:api:type:ProductTypeSetKeyAction) on Product Types.
    - [Set Key](ctp:api:type:ReviewSetKeyAction) on Reviews.
    - [Set Key](ctp:api:type:ShoppingListSetKeyAction) on Shopping Lists.
    - [Set Key](ctp:api:type:ZoneSetKeyAction) on Zones.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetKeyChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetKeyChange":
        from ._schemas.change import SetKeyChangeSchema

        return SetKeyChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetKeyChangeSchema

        return SetKeyChangeSchema().dump(self)


class SetLanguagesChange(Change):
    """Change triggered by [Set Languages](ctp:api:type:StoreSetLanguagesAction) update action."""

    #: Value before the change.
    previous_value: typing.List["str"]
    #: Value after the change.
    next_value: typing.List["str"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["str"],
        next_value: typing.List["str"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetLanguagesChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetLanguagesChange":
        from ._schemas.change import SetLanguagesChangeSchema

        return SetLanguagesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLanguagesChangeSchema

        return SetLanguagesChangeSchema().dump(self)


class SetLastNameChange(Change):
    """Change triggered by [Set Last Name](ctp:api:type:CustomerSetLastNameAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetLastNameChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetLastNameChange":
        from ._schemas.change import SetLastNameChangeSchema

        return SetLastNameChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLastNameChangeSchema

        return SetLastNameChangeSchema().dump(self)


class SetLineItemDeactivatedAtChange(Change):
    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str
    #: Holds information about the updated Shopping List Line Item.
    line_item: "ShoppingListLineItemValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: str,
        next_value: str,
        line_item: "ShoppingListLineItemValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item

        super().__init__(change=change, type="SetLineItemDeactivatedAtChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLineItemDeactivatedAtChange":
        from ._schemas.change import SetLineItemDeactivatedAtChangeSchema

        return SetLineItemDeactivatedAtChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLineItemDeactivatedAtChangeSchema

        return SetLineItemDeactivatedAtChangeSchema().dump(self)


class SetLineItemDiscountedPriceChange(Change):
    #: Value before the change.
    previous_value: "DiscountedLineItemPrice"
    #: Value after the change.
    next_value: "DiscountedLineItemPrice"
    #: Name of the [Product](ctp:api:type:Product) the Line Item is based on.
    line_item: "LocalizedString"
    #: `sku` or `key` of the updated [ProductVariant](ctp:api:type:ProductVariant).
    variant: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "DiscountedLineItemPrice",
        next_value: "DiscountedLineItemPrice",
        line_item: "LocalizedString",
        variant: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item
        self.variant = variant

        super().__init__(change=change, type="SetLineItemDiscountedPriceChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLineItemDiscountedPriceChange":
        from ._schemas.change import SetLineItemDiscountedPriceChangeSchema

        return SetLineItemDiscountedPriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLineItemDiscountedPriceChangeSchema

        return SetLineItemDiscountedPriceChangeSchema().dump(self)


class SetLineItemDiscountedPricePerQuantityChange(Change):
    #: Value before the change.
    previous_value: "DiscountedLineItemPriceForQuantity"
    #: Value after the change.
    next_value: "DiscountedLineItemPriceForQuantity"
    #: Name of the [Product](ctp:api:type:Product) the Line Item is based on.
    line_item: "LocalizedString"
    #: `sku` or `key` of the updated [ProductVariant](ctp:api:type:ProductVariant).
    variant: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "DiscountedLineItemPriceForQuantity",
        next_value: "DiscountedLineItemPriceForQuantity",
        line_item: "LocalizedString",
        variant: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item
        self.variant = variant

        super().__init__(
            change=change, type="SetLineItemDiscountedPricePerQuantityChange"
        )

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLineItemDiscountedPricePerQuantityChange":
        from ._schemas.change import SetLineItemDiscountedPricePerQuantityChangeSchema

        return SetLineItemDiscountedPricePerQuantityChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLineItemDiscountedPricePerQuantityChangeSchema

        return SetLineItemDiscountedPricePerQuantityChangeSchema().dump(self)


class SetLineItemDistributionChannelChange(Change):
    """Change triggered by the [Set LineItem DistributionChannel](ctp:api:type:StagedOrderSetLineItemDistributionChannelAction) update action."""

    #: Value before the change.
    previous_value: "Reference"
    #: Value after the change.
    next_value: "Reference"
    #: Name of the [Product](ctp:api:type:Product) the Line Item is based on.
    line_item: "LocalizedString"
    #: `sku` or `key` of the updated [ProductVariant](ctp:api:type:ProductVariant).
    variant: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Reference",
        next_value: "Reference",
        line_item: "LocalizedString",
        variant: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item
        self.variant = variant

        super().__init__(change=change, type="SetLineItemDistributionChannelChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLineItemDistributionChannelChange":
        from ._schemas.change import SetLineItemDistributionChannelChangeSchema

        return SetLineItemDistributionChannelChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLineItemDistributionChannelChangeSchema

        return SetLineItemDistributionChannelChangeSchema().dump(self)


class SetLineItemPriceChange(Change):
    """Change triggered by the [Set LineItem Price](ctp:api:type:StagedOrderSetLineItemPriceAction) update action."""

    #: Value before the change.
    previous_value: "Price"
    #: Value after the change.
    next_value: "Price"
    #: Name of the [Product](ctp:api:type:Product) the updated Line Item is based on.
    line_item: "LocalizedString"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Price",
        next_value: "Price",
        line_item: "LocalizedString"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item

        super().__init__(change=change, type="SetLineItemPriceChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLineItemPriceChange":
        from ._schemas.change import SetLineItemPriceChangeSchema

        return SetLineItemPriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLineItemPriceChangeSchema

        return SetLineItemPriceChangeSchema().dump(self)


class SetLineItemProductKeyChange(Change):
    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str
    #: Name of the [Product](ctp:api:type:Product) the Line Item is based on.
    line_item: "LocalizedString"
    #: `id` of the updated [LineItem](ctp:api:type:LineItem).
    line_item_id: str
    #: `sku` or `key` of the updated [ProductVariant](ctp:api:type:ProductVariant).
    variant: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: str,
        next_value: str,
        line_item: "LocalizedString",
        line_item_id: str,
        variant: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item
        self.line_item_id = line_item_id
        self.variant = variant

        super().__init__(change=change, type="SetLineItemProductKeyChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLineItemProductKeyChange":
        from ._schemas.change import SetLineItemProductKeyChangeSchema

        return SetLineItemProductKeyChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLineItemProductKeyChangeSchema

        return SetLineItemProductKeyChangeSchema().dump(self)


class SetLineItemProductSlugChange(Change):
    """Change triggered automatically due to a user-initiated change."""

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"
    #: Name of the [Product](ctp:api:type:Product) the updated Line Item is based on.
    line_item: "LocalizedString"
    #: `sku` or `key` of the updated [ProductVariant](ctp:api:type:ProductVariant).
    variant: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString",
        line_item: "LocalizedString",
        variant: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item
        self.variant = variant

        super().__init__(change=change, type="SetLineItemProductSlugChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLineItemProductSlugChange":
        from ._schemas.change import SetLineItemProductSlugChangeSchema

        return SetLineItemProductSlugChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLineItemProductSlugChangeSchema

        return SetLineItemProductSlugChangeSchema().dump(self)


class SetLineItemShippingDetailsChange(Change):
    """Change triggered by the following update actions:

    - [Set LineItem ShippingDetails](ctp:api:type:OrderSetLineItemShippingDetailsAction) on Orders.
    - [Set LineItem ShippingDetails](ctp:api:type:StagedOrderSetLineItemShippingDetailsAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "ItemShippingDetails"
    #: Value after the change.
    next_value: "ItemShippingDetails"
    #: `id` of the updated [LineItem](ctp:api:type:LineItem).
    line_item_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ItemShippingDetails",
        next_value: "ItemShippingDetails",
        line_item_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item_id = line_item_id

        super().__init__(change=change, type="SetLineItemShippingDetailsChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLineItemShippingDetailsChange":
        from ._schemas.change import SetLineItemShippingDetailsChangeSchema

        return SetLineItemShippingDetailsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLineItemShippingDetailsChangeSchema

        return SetLineItemShippingDetailsChangeSchema().dump(self)


class SetLineItemTaxAmountChange(Change):
    """Change triggered by the [Set LineItem TaxAmount](ctp:api:type:StagedOrderSetLineItemTaxAmountAction) update action."""

    #: Value before the change.
    previous_value: "TaxRate"
    #: Value after the change.
    next_value: "TaxRate"
    #: Name of the [Product](ctp:api:type:Product) the Line Item is based on.
    line_item: "LocalizedString"
    #: `sku` or `key` of the [ProductVariant](ctp:api:type:ProductVariant).
    variant: str
    #: `"ExternalAmount"`
    tax_mode: "TaxMode"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "TaxRate",
        next_value: "TaxRate",
        line_item: "LocalizedString",
        variant: str,
        tax_mode: "TaxMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item
        self.variant = variant
        self.tax_mode = tax_mode

        super().__init__(change=change, type="SetLineItemTaxAmountChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLineItemTaxAmountChange":
        from ._schemas.change import SetLineItemTaxAmountChangeSchema

        return SetLineItemTaxAmountChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLineItemTaxAmountChangeSchema

        return SetLineItemTaxAmountChangeSchema().dump(self)


class SetLineItemTaxRateChange(Change):
    """Change triggered by the [Set LineItemTaxRate](ctp:api:type:StagedOrderSetLineItemTaxRateAction) update action."""

    #: Value before the change.
    previous_value: "TaxRate"
    #: Value after the change.
    next_value: "TaxRate"
    #: Name of the [Product](ctp:api:type:Product) the Line Item is based on.
    line_item: "LocalizedString"
    #: `sku` or `key` of the [ProductVariant](ctp:api:type:ProductVariant).
    variant: str
    #: `"External"`
    tax_mode: "TaxMode"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "TaxRate",
        next_value: "TaxRate",
        line_item: "LocalizedString",
        variant: str,
        tax_mode: "TaxMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item
        self.variant = variant
        self.tax_mode = tax_mode

        super().__init__(change=change, type="SetLineItemTaxRateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLineItemTaxRateChange":
        from ._schemas.change import SetLineItemTaxRateChangeSchema

        return SetLineItemTaxRateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLineItemTaxRateChangeSchema

        return SetLineItemTaxRateChangeSchema().dump(self)


class SetLineItemTaxedPriceChange(Change):
    #: Value before the change.
    previous_value: "TaxedItemPrice"
    #: Value after the change.
    next_value: "TaxedItemPrice"
    #: Name of the [Product](ctp:api:type:Product) the Line Item is based on.
    line_item: "LocalizedString"
    #: `id` of the updated [LineItem](ctp:api:type:LineItem).
    line_item_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "TaxedItemPrice",
        next_value: "TaxedItemPrice",
        line_item: "LocalizedString",
        line_item_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item
        self.line_item_id = line_item_id

        super().__init__(change=change, type="SetLineItemTaxedPriceChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLineItemTaxedPriceChange":
        from ._schemas.change import SetLineItemTaxedPriceChangeSchema

        return SetLineItemTaxedPriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLineItemTaxedPriceChangeSchema

        return SetLineItemTaxedPriceChangeSchema().dump(self)


class SetLineItemTotalPriceChange(Change):
    """Change triggered by the [Set LineItemTotalPrice](ctp:api:type:StagedOrderSetLineItemTotalPriceAction) update action."""

    #: Value before the change.
    previous_value: "Money"
    #: Value after the change.
    next_value: "Money"
    #: Name of the [Product](ctp:api:type:Product) the updated Line Item is based on.
    line_item: "LocalizedString"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Money",
        next_value: "Money",
        line_item: "LocalizedString"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item

        super().__init__(change=change, type="SetLineItemTotalPriceChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLineItemTotalPriceChange":
        from ._schemas.change import SetLineItemTotalPriceChangeSchema

        return SetLineItemTotalPriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLineItemTotalPriceChangeSchema

        return SetLineItemTotalPriceChangeSchema().dump(self)


class SetLocaleChange(Change):
    """Change triggered by the following update actions:

    - [Set Locale](ctp:api:type:CustomerSetLocaleAction) on Customers.
    - [Set Locale](ctp:api:type:OrderSetLocaleAction) on Orders.
    - [Set Locale](ctp:api:type:StagedOrderSetLocaleAction) on Staged Orders.
    - [Set Locale](ctp:api:type:ReviewSetLocaleAction) on Reviews.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetLocaleChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetLocaleChange":
        from ._schemas.change import SetLocaleChangeSchema

        return SetLocaleChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLocaleChangeSchema

        return SetLocaleChangeSchema().dump(self)


class SetLocalizedDescriptionChange(Change):
    """Change triggered by the following update actions:

    - [Set Description](ctp:api:type:CartDiscountSetDescriptionAction) on Cart Discounts.
    - [Set Description](ctp:api:type:CategorySetDescriptionAction) on Categories.
    - [Set Description](ctp:api:type:DiscountCodeSetDescriptionAction) on Discount Codes.
    - [Set Description](ctp:api:type:ProductSetDescriptionAction) on Products.
    - [Set Description](ctp:api:type:ProductDiscountSetDescriptionAction) on Product Discounts.
    - [Set Description](ctp:api:type:ShoppingListSetDescriptionAction) on Shopping Lists.
    - [Set Description](ctp:api:type:StateSetDescriptionAction) on States.
    - [Set Description](ctp:api:type:TypeSetDescriptionAction) on Types.

    """

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetLocalizedDescriptionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLocalizedDescriptionChange":
        from ._schemas.change import SetLocalizedDescriptionChangeSchema

        return SetLocalizedDescriptionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLocalizedDescriptionChangeSchema

        return SetLocalizedDescriptionChangeSchema().dump(self)


class SetMaxApplicationsChange(Change):
    """Change triggered by the [Set Max Applications](ctp:api:type:DiscountCodeSetMaxApplicationsAction) update action."""

    #: Value before the change.
    previous_value: int
    #: Value after the change.
    next_value: int

    def __init__(self, *, change: str, previous_value: int, next_value: int):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetMaxApplicationsChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetMaxApplicationsChange":
        from ._schemas.change import SetMaxApplicationsChangeSchema

        return SetMaxApplicationsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetMaxApplicationsChangeSchema

        return SetMaxApplicationsChangeSchema().dump(self)


class SetMaxApplicationsPerCustomerChange(Change):
    """Change triggered by the [Set Max Applications Per Customer](ctp:api:type:DiscountCodeSetMaxApplicationsPerCustomerAction) update action."""

    #: Value before the change.
    previous_value: int
    #: Value after the change.
    next_value: int

    def __init__(self, *, change: str, previous_value: int, next_value: int):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetMaxApplicationsPerCustomerChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetMaxApplicationsPerCustomerChange":
        from ._schemas.change import SetMaxApplicationsPerCustomerChangeSchema

        return SetMaxApplicationsPerCustomerChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetMaxApplicationsPerCustomerChangeSchema

        return SetMaxApplicationsPerCustomerChangeSchema().dump(self)


class SetMetaDescriptionChange(Change):
    """Change triggered by the following update actions:

    - [Set Meta Description](ctp:api:type:CategorySetMetaDescriptionAction) on Categories.
    - [Set Meta Description](ctp:api:type:ProductSetMetaDescriptionAction) on Products.

    """

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetMetaDescriptionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetMetaDescriptionChange":
        from ._schemas.change import SetMetaDescriptionChangeSchema

        return SetMetaDescriptionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetMetaDescriptionChangeSchema

        return SetMetaDescriptionChangeSchema().dump(self)


class SetMetaKeywordsChange(Change):
    """Change triggered by the following update actions:

    - [Set Meta Keywords](ctp:api:type:CategorySetMetaKeywordsAction) on Categories.
    - [Set Meta Keywords](ctp:api:type:ProductSetMetaKeywordsAction) on Products.

    """

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetMetaKeywordsChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetMetaKeywordsChange":
        from ._schemas.change import SetMetaKeywordsChangeSchema

        return SetMetaKeywordsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetMetaKeywordsChangeSchema

        return SetMetaKeywordsChangeSchema().dump(self)


class SetMetaTitleChange(Change):
    """Change triggered by the following update actions:

    - [Set Meta Title](ctp:api:type:CategorySetMetaTitleAction) on Categories.
    - [Set Meta Title](ctp:api:type:ProductSetMetaTitleAction) on Products.

    """

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetMetaTitleChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetMetaTitleChange":
        from ._schemas.change import SetMetaTitleChangeSchema

        return SetMetaTitleChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetMetaTitleChangeSchema

        return SetMetaTitleChangeSchema().dump(self)


class SetMethodInfoInterfaceChange(Change):
    """Change triggered by the [Set MethodInfoInterface](ctp:api:type:PaymentSetMethodInfoInterfaceAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetMethodInfoInterfaceChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetMethodInfoInterfaceChange":
        from ._schemas.change import SetMethodInfoInterfaceChangeSchema

        return SetMethodInfoInterfaceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetMethodInfoInterfaceChangeSchema

        return SetMethodInfoInterfaceChangeSchema().dump(self)


class SetMethodInfoMethodChange(Change):
    """Change triggered by the [Set MethodInfoInterface](ctp:api:type:PaymentSetMethodInfoMethodAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetMethodInfoMethodChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetMethodInfoMethodChange":
        from ._schemas.change import SetMethodInfoMethodChangeSchema

        return SetMethodInfoMethodChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetMethodInfoMethodChangeSchema

        return SetMethodInfoMethodChangeSchema().dump(self)


class SetMethodInfoNameChange(Change):
    """Change triggered by the [Set MethodInfoName](ctp:api:type:PaymentSetMethodInfoNameAction) update action."""

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetMethodInfoNameChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetMethodInfoNameChange":
        from ._schemas.change import SetMethodInfoNameChangeSchema

        return SetMethodInfoNameChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetMethodInfoNameChangeSchema

        return SetMethodInfoNameChangeSchema().dump(self)


class SetMiddleNameChange(Change):
    """Change triggered by the [Set Middle Name](ctp:api:type:CustomerSetMiddleNameAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetMiddleNameChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetMiddleNameChange":
        from ._schemas.change import SetMiddleNameChangeSchema

        return SetMiddleNameChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetMiddleNameChangeSchema

        return SetMiddleNameChangeSchema().dump(self)


class SetNameChange(Change):
    """Change triggered by the [Set Name](ctp:api:type:AssociateRoleSetNameAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetNameChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetNameChange":
        from ._schemas.change import SetNameChangeSchema

        return SetNameChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetNameChangeSchema

        return SetNameChangeSchema().dump(self)


class SetLocalizedNameChange(Change):
    """Change triggered by the following update actions:

    - [Set Name](ctp:api:type:DiscountCodeSetNameAction) on Discount Codes.
    - [Set State Name](ctp:api:type:StateSetNameAction) on States.
    - [Set Name](ctp:api:type:StoreSetNameAction) on Stores.

    """

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetLocalizedNameChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetLocalizedNameChange":
        from ._schemas.change import SetLocalizedNameChangeSchema

        return SetLocalizedNameChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetLocalizedNameChangeSchema

        return SetLocalizedNameChangeSchema().dump(self)


class SetOrderLineItemCustomFieldChange(Change):
    """Change triggered by the following update actions:

    - [Set LineItem CustomField](ctp:api:type:OrderSetLineItemCustomFieldAction) on Orders.
    - [Set LineItem CustomField](ctp:api:type:StagedOrderSetLineItemCustomFieldAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: typing.Any
    #: Value after the change.
    next_value: typing.Any
    #: `id` of the referenced [Type](ctp:api:type:Type).
    custom_type_id: str
    #: Name of the [Custom Field](/../api/projects/custom-fields).
    name: str
    #: Name of the [Product](ctp:api:type:Product) the Line Item is based on.
    line_item: "LocalizedString"
    #: `sku` or `key` of the [ProductVariant](ctp:api:type:ProductVariant).
    variant: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.Any,
        next_value: typing.Any,
        custom_type_id: str,
        name: str,
        line_item: "LocalizedString",
        variant: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.custom_type_id = custom_type_id
        self.name = name
        self.line_item = line_item
        self.variant = variant

        super().__init__(change=change, type="SetOrderLineItemCustomFieldChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetOrderLineItemCustomFieldChange":
        from ._schemas.change import SetOrderLineItemCustomFieldChangeSchema

        return SetOrderLineItemCustomFieldChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetOrderLineItemCustomFieldChangeSchema

        return SetOrderLineItemCustomFieldChangeSchema().dump(self)


class SetOrderLineItemCustomTypeChange(Change):
    """Change triggered by the following update actions:

    - [Set LineItem Custom Type](ctp:api:type:OrderSetLineItemCustomTypeAction) on Orders.
    - [Set LineItem Custom Type](ctp:api:type:StagedOrderSetLineItemCustomTypeAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "CustomFields"
    #: Value after the change.
    next_value: "CustomFields"
    #: Name of the [Product](ctp:api:type:Product) the updated Line Item is based on.
    line_item: "LocalizedString"
    #: `sku` or `key` of the [ProductVariant](ctp:api:type:ProductVariant).
    variant: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "CustomFields",
        next_value: "CustomFields",
        line_item: "LocalizedString",
        variant: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item
        self.variant = variant

        super().__init__(change=change, type="SetOrderLineItemCustomTypeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetOrderLineItemCustomTypeChange":
        from ._schemas.change import SetOrderLineItemCustomTypeChangeSchema

        return SetOrderLineItemCustomTypeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetOrderLineItemCustomTypeChangeSchema

        return SetOrderLineItemCustomTypeChangeSchema().dump(self)


class SetOrderNumberChange(Change):
    """Change triggered by the following update actions:

    - [Set Order Number](ctp:api:type:OrderSetOrderNumberAction) on Orders.
    - [Set Order Number](ctp:api:type:StagedOrderSetOrderNumberAction) on Staged Order.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetOrderNumberChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetOrderNumberChange":
        from ._schemas.change import SetOrderNumberChangeSchema

        return SetOrderNumberChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetOrderNumberChangeSchema

        return SetOrderNumberChangeSchema().dump(self)


class SetOrderTaxedPriceChange(Change):
    #: Value before the change.
    previous_value: "TaxedItemPrice"
    #: Value after the change.
    next_value: "TaxedItemPrice"
    tax_mode: "TaxMode"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "TaxedItemPrice",
        next_value: "TaxedItemPrice",
        tax_mode: "TaxMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.tax_mode = tax_mode

        super().__init__(change=change, type="SetOrderTaxedPriceChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetOrderTaxedPriceChange":
        from ._schemas.change import SetOrderTaxedPriceChangeSchema

        return SetOrderTaxedPriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetOrderTaxedPriceChangeSchema

        return SetOrderTaxedPriceChangeSchema().dump(self)


class SetOrderTotalPriceChange(Change):
    """Change triggered automatically due to a user-initiated change."""

    #: Value before the change.
    previous_value: "Money"
    #: Value after the change.
    next_value: "Money"

    def __init__(self, *, change: str, previous_value: "Money", next_value: "Money"):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetOrderTotalPriceChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetOrderTotalPriceChange":
        from ._schemas.change import SetOrderTotalPriceChangeSchema

        return SetOrderTotalPriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetOrderTotalPriceChangeSchema

        return SetOrderTotalPriceChangeSchema().dump(self)


class SetOrderTotalTaxChange(Change):
    """Change triggered by the [Set OrderTotalTax](ctp:api:type:StagedOrderSetOrderTotalTaxAction) update action."""

    #: Value before the change.
    previous_value: "Money"
    #: Value after the change.
    next_value: "Money"
    #: `"ExternalAmount"`
    tax_mode: "TaxMode"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "Money",
        next_value: "Money",
        tax_mode: "TaxMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.tax_mode = tax_mode

        super().__init__(change=change, type="SetOrderTotalTaxChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetOrderTotalTaxChange":
        from ._schemas.change import SetOrderTotalTaxChangeSchema

        return SetOrderTotalTaxChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetOrderTotalTaxChangeSchema

        return SetOrderTotalTaxChangeSchema().dump(self)


class SetParcelItemsChange(Change):
    """Change triggered by the following update actions:

    - [Set Parcel Items](ctp:api:type:OrderSetParcelItemsAction) on Orders.
    - [Set Parcel Items](ctp:api:type:StagedOrderSetParcelItemsAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: typing.List["DeliveryItem"]
    #: Value after the change.
    next_value: typing.List["DeliveryItem"]
    #: Information about the updated Parcel.
    parcel: "ParcelChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["DeliveryItem"],
        next_value: typing.List["DeliveryItem"],
        parcel: "ParcelChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.parcel = parcel

        super().__init__(change=change, type="SetParcelItemsChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetParcelItemsChange":
        from ._schemas.change import SetParcelItemsChangeSchema

        return SetParcelItemsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetParcelItemsChangeSchema

        return SetParcelItemsChangeSchema().dump(self)


class SetParcelMeasurementsChange(Change):
    """Change triggered by the following update actions:

    - [SetParcelMeasurements](ctp:api:type:OrderSetParcelMeasurementsAction) on Orders.
    - [SetParcelMeasurements](ctp:api:type:StagedOrderSetParcelMeasurementsAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "ParcelMeasurements"
    #: Value after the change.
    next_value: "ParcelMeasurements"
    #: Information about the updated Parcel.
    parcel: "ParcelChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ParcelMeasurements",
        next_value: "ParcelMeasurements",
        parcel: "ParcelChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.parcel = parcel

        super().__init__(change=change, type="SetParcelMeasurementsChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetParcelMeasurementsChange":
        from ._schemas.change import SetParcelMeasurementsChangeSchema

        return SetParcelMeasurementsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetParcelMeasurementsChangeSchema

        return SetParcelMeasurementsChangeSchema().dump(self)


class SetParcelTrackingDataChange(Change):
    """Change triggered by the following update actions:

    - [Set Parcel Tracking Data](ctp:api:type:OrderSetParcelTrackingDataAction) on Orders.
    - [Set Parcel Tracking Data](ctp:api:type:StagedOrderSetParcelTrackingDataAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "TrackingData"
    #: Value after the change.
    next_value: "TrackingData"
    #: Information about the updated Parcel.
    parcel: "ParcelChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "TrackingData",
        next_value: "TrackingData",
        parcel: "ParcelChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.parcel = parcel

        super().__init__(change=change, type="SetParcelTrackingDataChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetParcelTrackingDataChange":
        from ._schemas.change import SetParcelTrackingDataChangeSchema

        return SetParcelTrackingDataChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetParcelTrackingDataChangeSchema

        return SetParcelTrackingDataChangeSchema().dump(self)


class SetPermissionsChange(Change):
    """Change triggered by the [Set Permissions](ctp:api:type:AssociateRoleSetPermissionsAction), [Add Permission](ctp:api:type:AssociateRoleAddPermissionAction), and [Remove Permission](ctp:api:type:AssociateRoleRemovePermissionAction) update actions."""

    #: Value before the change.
    previous_value: typing.List["Permission"]
    #: Value after the change.
    next_value: typing.List["Permission"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["Permission"],
        next_value: typing.List["Permission"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetPermissionsChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetPermissionsChange":
        from ._schemas.change import SetPermissionsChangeSchema

        return SetPermissionsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetPermissionsChangeSchema

        return SetPermissionsChangeSchema().dump(self)


class SetPricesChange(Change):
    """Change triggered by the [Set Prices](ctp:api:type:ProductSetPricesAction) update action."""

    #: Value before the change.
    previous_value: typing.List["Price"]
    #: Value after the change.
    next_value: typing.List["Price"]
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str
    #: `sku` or `key` of the [ProductVariant](ctp:api:type:ProductVariant).
    variant: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["Price"],
        next_value: typing.List["Price"],
        catalog_data: str,
        variant: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data
        self.variant = variant

        super().__init__(change=change, type="SetPricesChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetPricesChange":
        from ._schemas.change import SetPricesChangeSchema

        return SetPricesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetPricesChangeSchema

        return SetPricesChangeSchema().dump(self)


class SetProductCountChange(Change):
    """Change triggered automatically by the [Add Product](ctp:api:type:ProductSelectionAddProductAction) or [Remove Product](ctp:api:type:ProductSelectionRemoveProductAction) update action."""

    #: Value before the change.
    previous_value: int
    #: Value after the change.
    next_value: int

    def __init__(self, *, change: str, previous_value: int, next_value: int):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetProductCountChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetProductCountChange":
        from ._schemas.change import SetProductCountChangeSchema

        return SetProductCountChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetProductCountChangeSchema

        return SetProductCountChangeSchema().dump(self)


class SetProductPriceCustomFieldChange(Change):
    """Change triggered by the [Set Price CustomField](ctp:api:type:ProductSetProductPriceCustomFieldAction) update action."""

    #: Value before the change.
    previous_value: "CustomFields"
    #: Value after the change.
    next_value: "CustomFields"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "CustomFields",
        next_value: "CustomFields",
        catalog_data: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data

        super().__init__(change=change, type="SetProductPriceCustomFieldChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetProductPriceCustomFieldChange":
        from ._schemas.change import SetProductPriceCustomFieldChangeSchema

        return SetProductPriceCustomFieldChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetProductPriceCustomFieldChangeSchema

        return SetProductPriceCustomFieldChangeSchema().dump(self)


class SetProductPriceCustomTypeChange(Change):
    """Change triggered by the [Set Price Custom Type](ctp:api:type:ProductSetProductPriceCustomTypeAction) update action."""

    #: Value before the change.
    previous_value: "CustomFields"
    #: Value after the change.
    next_value: "CustomFields"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "CustomFields",
        next_value: "CustomFields",
        catalog_data: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data

        super().__init__(change=change, type="SetProductPriceCustomTypeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetProductPriceCustomTypeChange":
        from ._schemas.change import SetProductPriceCustomTypeChangeSchema

        return SetProductPriceCustomTypeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetProductPriceCustomTypeChangeSchema

        return SetProductPriceCustomTypeChangeSchema().dump(self)


class SetProductSelectionsChange(Change):
    """Change triggered by the [Set Product Selections](ctp:api:type:StoreSetProductSelectionsAction) update action."""

    #: Value before the change.
    previous_value: typing.List["ProductSelectionSetting"]
    #: Value after the change.
    next_value: typing.List["ProductSelectionSetting"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["ProductSelectionSetting"],
        next_value: typing.List["ProductSelectionSetting"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetProductSelectionsChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetProductSelectionsChange":
        from ._schemas.change import SetProductSelectionsChangeSchema

        return SetProductSelectionsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetProductSelectionsChangeSchema

        return SetProductSelectionsChangeSchema().dump(self)


class SetProductVariantKeyChange(Change):
    """Change triggered by the [Set ProductVariant Key](ctp:api:type:ProductSetProductVariantKeyAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str

    def __init__(
        self, *, change: str, previous_value: str, next_value: str, catalog_data: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data

        super().__init__(change=change, type="SetProductVariantKeyChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetProductVariantKeyChange":
        from ._schemas.change import SetProductVariantKeyChangeSchema

        return SetProductVariantKeyChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetProductVariantKeyChangeSchema

        return SetProductVariantKeyChangeSchema().dump(self)


class SetPropertyChange(Change):
    """Change triggered by the [Update CustomObject](ctp:api:endpoint:/{projectKey}/custom-objects:POST) request when an existing property is updated."""

    #: Value before the change.
    previous_value: typing.Any
    #: Value after the change.
    next_value: typing.Any
    #: Path to the property that was updated.
    path: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.Any,
        next_value: typing.Any,
        path: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.path = path

        super().__init__(change=change, type="SetPropertyChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetPropertyChange":
        from ._schemas.change import SetPropertyChangeSchema

        return SetPropertyChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetPropertyChangeSchema

        return SetPropertyChangeSchema().dump(self)


class SetPurchaseOrderNumberChange(Change):
    """Change triggered by the following update actions:

    - [Set Purchase Order Number](ctp:api:type:OrderSetPurchaseOrderNumberAction) on Orders.
    - [Set Purchase Order Number](ctp:api:type:StagedOrderSetPurchaseOrderNumberAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetPurchaseOrderNumberChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetPurchaseOrderNumberChange":
        from ._schemas.change import SetPurchaseOrderNumberChangeSchema

        return SetPurchaseOrderNumberChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetPurchaseOrderNumberChangeSchema

        return SetPurchaseOrderNumberChangeSchema().dump(self)


class SetRatingChange(Change):
    """Change triggered by the [Set Rating](ctp:api:type:ReviewSetRatingAction) update action."""

    #: Value before the change.
    previous_value: int
    #: Value after the change.
    next_value: int

    def __init__(self, *, change: str, previous_value: int, next_value: int):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetRatingChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetRatingChange":
        from ._schemas.change import SetRatingChangeSchema

        return SetRatingChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetRatingChangeSchema

        return SetRatingChangeSchema().dump(self)


class SetReservationsChange(Change):
    #: Value before the change.
    previous_value: typing.List["Reservation"]
    #: Value after the change.
    next_value: typing.List["Reservation"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["Reservation"],
        next_value: typing.List["Reservation"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetReservationsChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetReservationsChange":
        from ._schemas.change import SetReservationsChangeSchema

        return SetReservationsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetReservationsChangeSchema

        return SetReservationsChangeSchema().dump(self)


class SetRestockableInDaysChange(Change):
    """Change triggered by the [Set RestockableInDays](ctp:api:type:InventoryEntrySetRestockableInDaysAction) update action."""

    #: Value before the change.
    previous_value: int
    #: Value after the change.
    next_value: int

    def __init__(self, *, change: str, previous_value: int, next_value: int):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetRestockableInDaysChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetRestockableInDaysChange":
        from ._schemas.change import SetRestockableInDaysChangeSchema

        return SetRestockableInDaysChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetRestockableInDaysChangeSchema

        return SetRestockableInDaysChangeSchema().dump(self)


class SetReturnPaymentStateChange(Change):
    """Change triggered by the following update actions:

    - [Set PaymentShipmentState](ctp:api:type:OrderSetReturnPaymentStateAction) on Orders.
    - [Set PaymentShipmentState](ctp:api:type:StagedOrderSetReturnPaymentStateAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "ReturnPaymentState"
    #: Value after the change.
    next_value: "ReturnPaymentState"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ReturnPaymentState",
        next_value: "ReturnPaymentState"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetReturnPaymentStateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetReturnPaymentStateChange":
        from ._schemas.change import SetReturnPaymentStateChangeSchema

        return SetReturnPaymentStateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetReturnPaymentStateChangeSchema

        return SetReturnPaymentStateChangeSchema().dump(self)


class SetReturnShipmentStateChange(Change):
    """Change triggered by the following update actions:

    - [Set ReturnShipmentState](ctp:api:type:OrderSetReturnShipmentStateAction) on Orders.
    - [Set ReturnShipmentState](ctp:api:type:StagedOrderSetReturnShipmentStateAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "ReturnShipmentState"
    #: Value after the change.
    next_value: "ReturnShipmentState"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ReturnShipmentState",
        next_value: "ReturnShipmentState"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetReturnShipmentStateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetReturnShipmentStateChange":
        from ._schemas.change import SetReturnShipmentStateChangeSchema

        return SetReturnShipmentStateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetReturnShipmentStateChangeSchema

        return SetReturnShipmentStateChangeSchema().dump(self)


class SetSalutationChange(Change):
    """Change triggered by the [Set Salutation](ctp:api:type:CustomerSetSalutationAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetSalutationChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetSalutationChange":
        from ._schemas.change import SetSalutationChangeSchema

        return SetSalutationChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetSalutationChangeSchema

        return SetSalutationChangeSchema().dump(self)


class SetSearchKeywordsChange(Change):
    """Change triggered by the [Set SearchKeywords](ctp:api:type:ProductSetSearchKeywordsAction) update action."""

    #: Value before the change.
    previous_value: "SearchKeywords"
    #: Value after the change.
    next_value: "SearchKeywords"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "SearchKeywords",
        next_value: "SearchKeywords",
        catalog_data: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data

        super().__init__(change=change, type="SetSearchKeywordsChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetSearchKeywordsChange":
        from ._schemas.change import SetSearchKeywordsChangeSchema

        return SetSearchKeywordsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetSearchKeywordsChangeSchema

        return SetSearchKeywordsChangeSchema().dump(self)


class SetSellerCommentChange(Change):
    """Change triggered by the [Set Seller Comment](ctp:api:type:StagedQuoteSetSellerCommentAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetSellerCommentChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetSellerCommentChange":
        from ._schemas.change import SetSellerCommentChangeSchema

        return SetSellerCommentChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetSellerCommentChangeSchema

        return SetSellerCommentChangeSchema().dump(self)


class SetShippingAddressChange(Change):
    """Change triggered by the following update actions:

    - [Set Shipping Address](ctp:api:type:OrderSetShippingAddressAction) on Orders.
    - [Set Shipping Address](ctp:api:type:StagedOrderSetShippingAddressAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: "Address"
    #: Value after the change.
    next_value: "Address"

    def __init__(
        self, *, change: str, previous_value: "Address", next_value: "Address"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetShippingAddressChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetShippingAddressChange":
        from ._schemas.change import SetShippingAddressChangeSchema

        return SetShippingAddressChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetShippingAddressChangeSchema

        return SetShippingAddressChangeSchema().dump(self)


class SetShippingInfoPriceChange(Change):
    #: Value before the change.
    previous_value: "Money"
    #: Value after the change.
    next_value: "Money"

    def __init__(self, *, change: str, previous_value: "Money", next_value: "Money"):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetShippingInfoPriceChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetShippingInfoPriceChange":
        from ._schemas.change import SetShippingInfoPriceChangeSchema

        return SetShippingInfoPriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetShippingInfoPriceChangeSchema

        return SetShippingInfoPriceChangeSchema().dump(self)


class SetShippingInfoTaxedPriceChange(Change):
    #: Value before the change.
    previous_value: "TaxedPrice"
    #: Value after the change.
    next_value: "TaxedPrice"

    def __init__(
        self, *, change: str, previous_value: "TaxedPrice", next_value: "TaxedPrice"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetShippingInfoTaxedPriceChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetShippingInfoTaxedPriceChange":
        from ._schemas.change import SetShippingInfoTaxedPriceChangeSchema

        return SetShippingInfoTaxedPriceChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetShippingInfoTaxedPriceChangeSchema

        return SetShippingInfoTaxedPriceChangeSchema().dump(self)


class SetShippingMethodChange(Change):
    """Change triggered by the [Set ShippingMethod](ctp:api:type:StagedOrderSetShippingMethodAction) update action."""

    #: Value before the change.
    previous_value: "ShippingMethodChangeValue"
    #: Value after the change.
    next_value: "ShippingMethodChangeValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ShippingMethodChangeValue",
        next_value: "ShippingMethodChangeValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetShippingMethodChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetShippingMethodChange":
        from ._schemas.change import SetShippingMethodChangeSchema

        return SetShippingMethodChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetShippingMethodChangeSchema

        return SetShippingMethodChangeSchema().dump(self)


class SetShippingMethodTaxAmountChange(Change):
    """Change triggered by the [Set ShippingMethod TaxAmount](ctp:api:type:StagedOrderSetShippingMethodTaxAmountAction) update action."""

    #: Value before the change.
    previous_value: "ShippingMethodTaxAmountChangeValue"
    #: Value after the change.
    next_value: "ShippingMethodTaxAmountChangeValue"
    #: `"ExternalAmount"`
    tax_mode: "TaxMode"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ShippingMethodTaxAmountChangeValue",
        next_value: "ShippingMethodTaxAmountChangeValue",
        tax_mode: "TaxMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.tax_mode = tax_mode

        super().__init__(change=change, type="SetShippingMethodTaxAmountChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetShippingMethodTaxAmountChange":
        from ._schemas.change import SetShippingMethodTaxAmountChangeSchema

        return SetShippingMethodTaxAmountChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetShippingMethodTaxAmountChangeSchema

        return SetShippingMethodTaxAmountChangeSchema().dump(self)


class SetShippingMethodTaxRateChange(Change):
    """Change triggered by the [Set ShippingMethod TaxRate](ctp:api:type:StagedOrderSetShippingMethodTaxRateAction) update action."""

    #: Value before the change.
    previous_value: "TaxRate"
    #: Value after the change.
    next_value: "TaxRate"
    #: `"External"`
    tax_mode: "TaxMode"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "TaxRate",
        next_value: "TaxRate",
        tax_mode: "TaxMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.tax_mode = tax_mode

        super().__init__(change=change, type="SetShippingMethodTaxRateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetShippingMethodTaxRateChange":
        from ._schemas.change import SetShippingMethodTaxRateChangeSchema

        return SetShippingMethodTaxRateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetShippingMethodTaxRateChangeSchema

        return SetShippingMethodTaxRateChangeSchema().dump(self)


class SetShippingRateChange(Change):
    #: Value before the change.
    previous_value: "Money"
    #: Value after the change.
    next_value: "Money"

    def __init__(self, *, change: str, previous_value: "Money", next_value: "Money"):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetShippingRateChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetShippingRateChange":
        from ._schemas.change import SetShippingRateChangeSchema

        return SetShippingRateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetShippingRateChangeSchema

        return SetShippingRateChangeSchema().dump(self)


class SetShippingRateInputChange(Change):
    """Change triggered by the [Set Shipping Rate Input](ctp:api:type:StagedOrderSetShippingRateInputAction) update action."""

    #: Value before the change.
    previous_value: typing.Union[
        "SetCartClassificationShippingRateInputValue",
        "SetCartScoreShippingRateInputValue",
    ]
    #: Value after the change.
    next_value: typing.Union[
        "SetCartClassificationShippingRateInputValue",
        "SetCartScoreShippingRateInputValue",
    ]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.Union[
            "SetCartClassificationShippingRateInputValue",
            "SetCartScoreShippingRateInputValue",
        ],
        next_value: typing.Union[
            "SetCartClassificationShippingRateInputValue",
            "SetCartScoreShippingRateInputValue",
        ]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetShippingRateInputChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetShippingRateInputChange":
        from ._schemas.change import SetShippingRateInputChangeSchema

        return SetShippingRateInputChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetShippingRateInputChangeSchema

        return SetShippingRateInputChangeSchema().dump(self)


class SetShoppingListLineItemCustomFieldChange(Change):
    """Change triggered by the [Set ShoppingListLineItem Custom Field](ctp:api:type:ShoppingListSetLineItemCustomFieldAction) update action."""

    #: Value before the change.
    previous_value: typing.Any
    #: Value after the change.
    next_value: typing.Any
    #: Name of the [Custom Field](/../api/projects/custom-fields).
    name: str
    #: `id` of the referenced [Type](ctp:api:type:Type).
    custom_type_id: str
    #: Holds information about the updated Shopping List Line Item.
    line_item: "ShoppingListLineItemValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.Any,
        next_value: typing.Any,
        name: str,
        custom_type_id: str,
        line_item: "ShoppingListLineItemValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.name = name
        self.custom_type_id = custom_type_id
        self.line_item = line_item

        super().__init__(change=change, type="SetShoppingListLineItemCustomFieldChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetShoppingListLineItemCustomFieldChange":
        from ._schemas.change import SetShoppingListLineItemCustomFieldChangeSchema

        return SetShoppingListLineItemCustomFieldChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetShoppingListLineItemCustomFieldChangeSchema

        return SetShoppingListLineItemCustomFieldChangeSchema().dump(self)


class SetShoppingListLineItemCustomTypeChange(Change):
    """Change triggered by the [Set ShoppingListLineItem Custom Type](ctp:api:type:ShoppingListSetLineItemCustomTypeAction) update action."""

    #: Value before the change.
    previous_value: "CustomFields"
    #: Value after the change.
    next_value: "CustomFields"
    #: Holds information about the updated Shopping List Line Item.
    line_item: "ShoppingListLineItemValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "CustomFields",
        next_value: "CustomFields",
        line_item: "ShoppingListLineItemValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item = line_item

        super().__init__(change=change, type="SetShoppingListLineItemCustomTypeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetShoppingListLineItemCustomTypeChange":
        from ._schemas.change import SetShoppingListLineItemCustomTypeChangeSchema

        return SetShoppingListLineItemCustomTypeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetShoppingListLineItemCustomTypeChangeSchema

        return SetShoppingListLineItemCustomTypeChangeSchema().dump(self)


class SetSkuChange(Change):
    """Change triggered by the [Set SKU](ctp:api:type:ProductSetSkuAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str

    def __init__(
        self, *, change: str, previous_value: str, next_value: str, catalog_data: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data

        super().__init__(change=change, type="SetSkuChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetSkuChange":
        from ._schemas.change import SetSkuChangeSchema

        return SetSkuChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetSkuChangeSchema

        return SetSkuChangeSchema().dump(self)


class SetSlugChange(Change):
    """Change triggered by the [Set Slug](ctp:api:type:ShoppingListSetSlugAction) update action."""

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetSlugChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetSlugChange":
        from ._schemas.change import SetSlugChangeSchema

        return SetSlugChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetSlugChangeSchema

        return SetSlugChangeSchema().dump(self)


class SetStateRolesChange(Change):
    """Change triggered by the [Set State roles](ctp:api:type:StateSetRolesAction) update action."""

    #: Value before the change.
    previous_value: typing.List["StateRoleEnum"]
    #: Value after the change.
    next_value: typing.List["StateRoleEnum"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["StateRoleEnum"],
        next_value: typing.List["StateRoleEnum"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetStateRolesChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetStateRolesChange":
        from ._schemas.change import SetStateRolesChangeSchema

        return SetStateRolesChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetStateRolesChangeSchema

        return SetStateRolesChangeSchema().dump(self)


class SetStatusInterfaceCodeChange(Change):
    """Change triggered by the [Set StatusInterfaceCode](ctp:api:type:PaymentSetStatusInterfaceCodeAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetStatusInterfaceCodeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetStatusInterfaceCodeChange":
        from ._schemas.change import SetStatusInterfaceCodeChangeSchema

        return SetStatusInterfaceCodeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetStatusInterfaceCodeChangeSchema

        return SetStatusInterfaceCodeChangeSchema().dump(self)


class SetStatusInterfaceTextChange(Change):
    """Change triggered by the [Set StatusInterfaceText](ctp:api:type:PaymentSetStatusInterfaceTextAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetStatusInterfaceTextChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetStatusInterfaceTextChange":
        from ._schemas.change import SetStatusInterfaceTextChangeSchema

        return SetStatusInterfaceTextChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetStatusInterfaceTextChangeSchema

        return SetStatusInterfaceTextChangeSchema().dump(self)


class SetStoreChange(Change):
    """Change triggered by the following update actions:

    - [Set Store](ctp:api:type:OrderSetStoreAction) on Orders.
    - [Set Store](ctp:api:type:ShoppingListSetStoreAction) on Shopping Lists.

    """

    #: Value before the change.
    previous_value: "Reference"
    #: Value after the change.
    next_value: "Reference"

    def __init__(
        self, *, change: str, previous_value: "Reference", next_value: "Reference"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetStoreChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetStoreChange":
        from ._schemas.change import SetStoreChangeSchema

        return SetStoreChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetStoreChangeSchema

        return SetStoreChangeSchema().dump(self)


class SetStoreModeChange(Change):
    """Change triggered by the [Set Store Mode](ctp:api:type:BusinessUnitSetStoreModeAction) update action."""

    #: Value before the change.
    previous_value: "BusinessUnitStoreMode"
    #: Value after the change.
    next_value: "BusinessUnitStoreMode"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "BusinessUnitStoreMode",
        next_value: "BusinessUnitStoreMode"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetStoreModeChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetStoreModeChange":
        from ._schemas.change import SetStoreModeChangeSchema

        return SetStoreModeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetStoreModeChangeSchema

        return SetStoreModeChangeSchema().dump(self)


class SetStoresChange(Change):
    """Change triggered by the [Set Stores](ctp:api:type:CustomerSetStoresAction) update action."""

    #: Value before the change.
    previous_value: typing.List["Reference"]
    #: Value after the change.
    next_value: typing.List["Reference"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["Reference"],
        next_value: typing.List["Reference"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetStoresChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetStoresChange":
        from ._schemas.change import SetStoresChangeSchema

        return SetStoresChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetStoresChangeSchema

        return SetStoresChangeSchema().dump(self)


class SetSupplyChannelChange(Change):
    """Change triggered by the [Set SupplyChannel](ctp:api:type:InventoryEntrySetSupplyChannelAction) update action."""

    #: Value before the change.
    previous_value: "Reference"
    #: Value after the change.
    next_value: "Reference"

    def __init__(
        self, *, change: str, previous_value: "Reference", next_value: "Reference"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetSupplyChannelChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetSupplyChannelChange":
        from ._schemas.change import SetSupplyChannelChangeSchema

        return SetSupplyChannelChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetSupplyChannelChangeSchema

        return SetSupplyChannelChangeSchema().dump(self)


class SetSupplyChannelsChange(Change):
    """Change triggered by the [Set Supply Channels](ctp:api:type:StoreSetSupplyChannelsAction) update action."""

    #: Value before the change.
    previous_value: typing.List["Reference"]
    #: Value after the change.
    next_value: typing.List["Reference"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["Reference"],
        next_value: typing.List["Reference"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetSupplyChannelsChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetSupplyChannelsChange":
        from ._schemas.change import SetSupplyChannelsChangeSchema

        return SetSupplyChannelsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetSupplyChannelsChangeSchema

        return SetSupplyChannelsChangeSchema().dump(self)


class SetTargetChange(Change):
    """Change triggered by the [Set Target](ctp:api:type:ReviewSetTargetAction) update action."""

    #: Value before the change.
    previous_value: "Reference"
    #: Value after the change.
    next_value: "Reference"

    def __init__(
        self, *, change: str, previous_value: "Reference", next_value: "Reference"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetTargetChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetTargetChange":
        from ._schemas.change import SetTargetChangeSchema

        return SetTargetChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetTargetChangeSchema

        return SetTargetChangeSchema().dump(self)


class SetTaxCategoryChange(Change):
    """Change triggered by the [Set TaxCategory](ctp:api:type:ProductSetTaxCategoryAction) update action."""

    #: Value before the change.
    previous_value: "Reference"
    #: Value after the change.
    next_value: "Reference"

    def __init__(
        self, *, change: str, previous_value: "Reference", next_value: "Reference"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetTaxCategoryChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetTaxCategoryChange":
        from ._schemas.change import SetTaxCategoryChangeSchema

        return SetTaxCategoryChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetTaxCategoryChangeSchema

        return SetTaxCategoryChangeSchema().dump(self)


class SetTextChange(Change):
    """Change triggered by the [Set Text](ctp:api:type:ReviewSetTextAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetTextChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetTextChange":
        from ._schemas.change import SetTextChangeSchema

        return SetTextChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetTextChangeSchema

        return SetTextChangeSchema().dump(self)


class SetTextLineItemCustomFieldChange(Change):
    """Change triggered by the [Set TextLineItem CustomField](ctp:api:type:ShoppingListSetTextLineItemCustomFieldAction) update action."""

    #: Value before the change.
    previous_value: typing.Any
    #: Value after the change.
    next_value: typing.Any
    #: Name of the [Custom Field](/../api/projects/custom-fields).
    name: str
    #: `id` of the referenced [Type](ctp:api:type:Type).
    custom_type_id: str
    #: Holds information about the updated Text Line Item.
    text_line_item: "TextLineItemValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.Any,
        next_value: typing.Any,
        name: str,
        custom_type_id: str,
        text_line_item: "TextLineItemValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.name = name
        self.custom_type_id = custom_type_id
        self.text_line_item = text_line_item

        super().__init__(change=change, type="SetTextLineItemCustomFieldChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetTextLineItemCustomFieldChange":
        from ._schemas.change import SetTextLineItemCustomFieldChangeSchema

        return SetTextLineItemCustomFieldChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetTextLineItemCustomFieldChangeSchema

        return SetTextLineItemCustomFieldChangeSchema().dump(self)


class SetTextLineItemCustomTypeChange(Change):
    """Change triggered by the [Set TextLineItem Custom Type](ctp:api:type:ShoppingListSetTextLineItemCustomTypeAction) update action."""

    #: Value before the change.
    previous_value: "CustomFields"
    #: Value after the change.
    next_value: "CustomFields"
    #: Holds information about the updated Text Line Item.
    text_line_item: "TextLineItemValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "CustomFields",
        next_value: "CustomFields",
        text_line_item: "TextLineItemValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.text_line_item = text_line_item

        super().__init__(change=change, type="SetTextLineItemCustomTypeChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetTextLineItemCustomTypeChange":
        from ._schemas.change import SetTextLineItemCustomTypeChangeSchema

        return SetTextLineItemCustomTypeChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetTextLineItemCustomTypeChangeSchema

        return SetTextLineItemCustomTypeChangeSchema().dump(self)


class SetTextLineItemDescriptionChange(Change):
    """Change triggered by the [Set TextLineItem Description](ctp:api:type:ShoppingListSetTextLineItemDescriptionAction) update action."""

    #: Value before the change.
    previous_value: "LocalizedString"
    #: Value after the change.
    next_value: "LocalizedString"
    #: Holds information about the updated Text Line Item.
    text_line_item: "TextLineItemValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "LocalizedString",
        next_value: "LocalizedString",
        text_line_item: "TextLineItemValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.text_line_item = text_line_item

        super().__init__(change=change, type="SetTextLineItemDescriptionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetTextLineItemDescriptionChange":
        from ._schemas.change import SetTextLineItemDescriptionChangeSchema

        return SetTextLineItemDescriptionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetTextLineItemDescriptionChangeSchema

        return SetTextLineItemDescriptionChangeSchema().dump(self)


class SetTitleChange(Change):
    """Change triggered by the following update actions:

    - [Set Title](ctp:api:type:CustomerSetTitleAction) on Customers.
    - [Set Title](ctp:api:type:ReviewSetTitleAction) on Reviews.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetTitleChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetTitleChange":
        from ._schemas.change import SetTitleChangeSchema

        return SetTitleChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetTitleChangeSchema

        return SetTitleChangeSchema().dump(self)


class SetTransitionsChange(Change):
    """Change triggered by the [Set Transitions](ctp:api:type:StateSetTransitionsAction) update action."""

    #: Value before the change.
    previous_value: typing.List["Reference"]
    #: Value after the change.
    next_value: typing.List["Reference"]

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["Reference"],
        next_value: typing.List["Reference"]
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetTransitionsChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetTransitionsChange":
        from ._schemas.change import SetTransitionsChangeSchema

        return SetTransitionsChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetTransitionsChangeSchema

        return SetTransitionsChangeSchema().dump(self)


class SetValidFromAndUntilChange(Change):
    """Change triggered by the following update actions:

    - [Set Valid From and Until](ctp:api:type:CartDiscountSetValidFromAndUntilAction) on Cart Discounts.
    - [Set Valid From and Until](ctp:api:type:DiscountCodeSetValidFromAndUntilAction) on Discount Codes.
    - [Set Valid From and Until](ctp:api:type:ProductDiscountSetValidFromAndUntilAction) on Product Discounts.

    """

    #: Value before the change.
    previous_value: "ValidFromAndUntilValue"
    #: Value after the change.
    next_value: "ValidFromAndUntilValue"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ValidFromAndUntilValue",
        next_value: "ValidFromAndUntilValue"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetValidFromAndUntilChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetValidFromAndUntilChange":
        from ._schemas.change import SetValidFromAndUntilChangeSchema

        return SetValidFromAndUntilChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetValidFromAndUntilChangeSchema

        return SetValidFromAndUntilChangeSchema().dump(self)


class SetValidFromChange(Change):
    """Change triggered by the following update actions:

    - [Set Valid From](ctp:api:type:CartDiscountSetValidFromAction) on Cart Discounts.
    - [Set Valid From](ctp:api:type:DiscountCodeSetValidFromAction) on Discount Codes.
    - [Set Valid From](ctp:api:type:ProductDiscountSetValidFromAction) on Product Discounts.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetValidFromChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetValidFromChange":
        from ._schemas.change import SetValidFromChangeSchema

        return SetValidFromChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetValidFromChangeSchema

        return SetValidFromChangeSchema().dump(self)


class SetValidToChange(Change):
    """Change triggered by the [Set Valid To](ctp:api:type:StagedQuoteSetValidToAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetValidToChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetValidToChange":
        from ._schemas.change import SetValidToChangeSchema

        return SetValidToChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetValidToChangeSchema

        return SetValidToChangeSchema().dump(self)


class SetValidUntilChange(Change):
    """Change triggered by the following update actions:

    - [Set Valid Until](ctp:api:type:CartDiscountSetValidUntilAction) on Cart Discounts.
    - [Set Valid Until](ctp:api:type:DiscountCodeSetValidUntilAction) on Discount Codes.
    - [Set Valid Until](ctp:api:type:ProductDiscountSetValidUntilAction) on Product Discounts.

    """

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetValidUntilChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetValidUntilChange":
        from ._schemas.change import SetValidUntilChangeSchema

        return SetValidUntilChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetValidUntilChangeSchema

        return SetValidUntilChangeSchema().dump(self)


class SetValueChange(Change):
    """Change triggered by the [Update CustomObject](ctp:api:endpoint:/{projectKey}/custom-objects:POST) request when a value of a property is updated."""

    #: Value before the change.
    previous_value: typing.Any
    #: Value after the change.
    next_value: typing.Any

    def __init__(
        self, *, change: str, previous_value: typing.Any, next_value: typing.Any
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetValueChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetValueChange":
        from ._schemas.change import SetValueChangeSchema

        return SetValueChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetValueChangeSchema

        return SetValueChangeSchema().dump(self)


class SetVariantAvailabilityChange(Change):
    """Change triggered automatically when an [InventoryEntry](ctp:api:type:InventoryEntry) associated with a Product changes."""

    #: Value before the change.
    previous_value: "ProductVariantAvailability"
    #: Value after the change.
    next_value: "ProductVariantAvailability"
    #: - `staged`, if the staged [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    #: - `current`, if the current [ProductCatalogData](ctp:api:type:ProductCatalogData) was updated.
    catalog_data: str
    #: `sku` or `key` of the [ProductVariant](ctp:api:type:ProductVariant).
    variant: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ProductVariantAvailability",
        next_value: "ProductVariantAvailability",
        catalog_data: str,
        variant: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.catalog_data = catalog_data
        self.variant = variant

        super().__init__(change=change, type="SetVariantAvailabilityChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetVariantAvailabilityChange":
        from ._schemas.change import SetVariantAvailabilityChangeSchema

        return SetVariantAvailabilityChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetVariantAvailabilityChangeSchema

        return SetVariantAvailabilityChangeSchema().dump(self)


class SetVariantSelectionChange(Change):
    """Change triggered by the [Set Variant Selection](ctp:api:type:ProductSelectionSetVariantSelectionAction) update action."""

    #: Value before the change.
    previous_value: "ProductVariantSelection"
    #: Value after the change.
    next_value: "ProductVariantSelection"
    #: Reference to the updated [Product](ctp:api:type:Product).
    product: "Reference"

    def __init__(
        self,
        *,
        change: str,
        previous_value: "ProductVariantSelection",
        next_value: "ProductVariantSelection",
        product: "Reference"
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.product = product

        super().__init__(change=change, type="SetVariantSelectionChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetVariantSelectionChange":
        from ._schemas.change import SetVariantSelectionChangeSchema

        return SetVariantSelectionChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetVariantSelectionChangeSchema

        return SetVariantSelectionChangeSchema().dump(self)


class SetVatIdChange(Change):
    """Change triggered by the [Set Vat ID](ctp:api:type:CustomerSetVatIdAction) update action."""

    #: Value before the change.
    previous_value: str
    #: Value after the change.
    next_value: str

    def __init__(self, *, change: str, previous_value: str, next_value: str):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="SetVatIdChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "SetVatIdChange":
        from ._schemas.change import SetVatIdChangeSchema

        return SetVatIdChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import SetVatIdChangeSchema

        return SetVatIdChangeSchema().dump(self)


class TransitionCustomLineItemStateChange(Change):
    """Change triggered by the following update actions:

    - [Change the state of CustomLineItem according to allowed transitions](ctp:api:type:OrderTransitionCustomLineItemStateAction) on Orders.
    - [Change the state of CustomLineItem according to allowed transitions](ctp:api:type:StagedOrderTransitionCustomLineItemStateAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: typing.List["ItemState"]
    #: Value after the change.
    next_value: typing.List["ItemState"]
    #: `id` of the updated [CustomLineItem](ctp:api:type:CustomLineItem).
    line_item_id: str
    #: `id` of the [State](ctp:api:type:State) involved in the transition.
    state_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["ItemState"],
        next_value: typing.List["ItemState"],
        line_item_id: str,
        state_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item_id = line_item_id
        self.state_id = state_id

        super().__init__(change=change, type="TransitionCustomLineItemStateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "TransitionCustomLineItemStateChange":
        from ._schemas.change import TransitionCustomLineItemStateChangeSchema

        return TransitionCustomLineItemStateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import TransitionCustomLineItemStateChangeSchema

        return TransitionCustomLineItemStateChangeSchema().dump(self)


class TransitionLineItemStateChange(Change):
    """Change triggered by the following update actions:

    - [Change the state of LineItem according to allowed transitions](ctp:api:type:OrderTransitionLineItemStateAction) on Orders.
    - [Change the state of LineItem according to allowed transitions](ctp:api:type:OrderTransitionLineItemStateAction) on Staged Orders.

    """

    #: Value before the change.
    previous_value: typing.List["ItemState"]
    #: Value after the change.
    next_value: typing.List["ItemState"]
    #: `id` of the updated [LineItem](ctp:api:type:LineItem).
    line_item_id: str
    #: `id` of the [State](ctp:api:type:State) involved in the transition.
    state_id: str

    def __init__(
        self,
        *,
        change: str,
        previous_value: typing.List["ItemState"],
        next_value: typing.List["ItemState"],
        line_item_id: str,
        state_id: str
    ):
        self.previous_value = previous_value
        self.next_value = next_value
        self.line_item_id = line_item_id
        self.state_id = state_id

        super().__init__(change=change, type="TransitionLineItemStateChange")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "TransitionLineItemStateChange":
        from ._schemas.change import TransitionLineItemStateChangeSchema

        return TransitionLineItemStateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import TransitionLineItemStateChangeSchema

        return TransitionLineItemStateChangeSchema().dump(self)


class TransitionStateChange(Change):
    """Change triggered by the following update actions:

    - [Transition State](ctp:api:type:OrderTransitionStateAction) on Orders.
    - [Transition State](ctp:api:type:StagedOrderTransitionStateAction) on Staged Orders.
    - [Transition State](ctp:api:type:PaymentTransitionStateAction) on Payments.
    - [Transition State](ctp:api:type:ProductTransitionStateAction) on Products.
    - [Transition State](ctp:api:type:QuoteTransitionStateAction) on Quotes.
    - [Transition State](ctp:api:type:StagedQuoteTransitionStateAction) on Staged Quotes.
    - [Transition State](ctp:api:type:QuoteRequestTransitionStateAction) on Quote Requests.
    - [Transition State](ctp:api:type:ReviewTransitionStateAction) on Reviews.
    - [Transition State](ctp:api:type:StateSetTransitionsAction) on States.

    """

    #: Value before the change.
    previous_value: "Reference"
    #: Value after the change.
    next_value: "Reference"

    def __init__(
        self, *, change: str, previous_value: "Reference", next_value: "Reference"
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="TransitionStateChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "TransitionStateChange":
        from ._schemas.change import TransitionStateChangeSchema

        return TransitionStateChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import TransitionStateChangeSchema

        return TransitionStateChangeSchema().dump(self)


class UnknownChange(Change):
    """Change triggered when the format of changes on an entity is not identified by Audit Log."""

    #: Value before the change.
    previous_value: typing.Any
    #: Value after the change.
    next_value: typing.Any

    def __init__(
        self, *, change: str, previous_value: typing.Any, next_value: typing.Any
    ):
        self.previous_value = previous_value
        self.next_value = next_value

        super().__init__(change=change, type="UnknownChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "UnknownChange":
        from ._schemas.change import UnknownChangeSchema

        return UnknownChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import UnknownChangeSchema

        return UnknownChangeSchema().dump(self)


class UnpublishChange(Change):
    """Change triggered by the [Unpublish](ctp:api:type:ProductUnpublishAction) update action."""

    def __init__(self, *, change: str):

        super().__init__(change=change, type="UnpublishChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "UnpublishChange":
        from ._schemas.change import UnpublishChangeSchema

        return UnpublishChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import UnpublishChangeSchema

        return UnpublishChangeSchema().dump(self)


class UpdateSyncInfoChange(Change):
    """Change triggered by the following update actions:

    - [Update SyncInfo](ctp:api:type:OrderUpdateSyncInfoAction) on Orders.
    - [Update SyncInfo](ctp:api:type:StagedOrderUpdateSyncInfoAction) on Staged Orders.

    """

    #: Value after the change.
    next_value: "SyncInfo"
    #: `id` of the updated [Channel](ctp:api:type:Channel).
    channel_id: str

    def __init__(self, *, change: str, next_value: "SyncInfo", channel_id: str):
        self.next_value = next_value
        self.channel_id = channel_id

        super().__init__(change=change, type="UpdateSyncInfoChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "UpdateSyncInfoChange":
        from ._schemas.change import UpdateSyncInfoChangeSchema

        return UpdateSyncInfoChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import UpdateSyncInfoChangeSchema

        return UpdateSyncInfoChangeSchema().dump(self)


class VerifyEmailChange(Change):
    """Change triggered by a Customer email verification."""

    def __init__(self, *, change: str):

        super().__init__(change=change, type="VerifyEmailChange")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "VerifyEmailChange":
        from ._schemas.change import VerifyEmailChangeSchema

        return VerifyEmailChangeSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change import VerifyEmailChangeSchema

        return VerifyEmailChangeSchema().dump(self)
