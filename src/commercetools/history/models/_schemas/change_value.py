# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import re
import typing

import marshmallow
import marshmallow_enum

from commercetools import helpers

from ... import models
from ..common import SelectionMode
from .common import LocalizedStringField

# Fields


# Marshmallow Schemas
class ChangeTargetChangeValueSchema(helpers.BaseSchema):
    type = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTargetChangeValue(**data)


class ChangeValueChangeValueSchema(helpers.BaseSchema):
    type = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeValueChangeValue(**data)


class AssetChangeValueSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.AssetChangeValue(**data)


class AttributeValueSchema(helpers.BaseSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    value = marshmallow.fields.Raw(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.AttributeValue(**data)


class ChangeTargetCustomLineItemsChangeValueSchema(ChangeTargetChangeValueSchema):
    predicate = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTargetCustomLineItemsChangeValue(**data)


class ChangeTargetLineItemsChangeValueSchema(ChangeTargetChangeValueSchema):
    predicate = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTargetLineItemsChangeValue(**data)


class ChangeTargetMultiBuyCustomLineItemsChangeValueSchema(
    ChangeTargetChangeValueSchema
):
    predicate = marshmallow.fields.String(allow_none=True, load_default=None)
    trigger_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="triggerQuantity"
    )
    discounted_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="discountedQuantity"
    )
    max_occurrence = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="maxOccurrence"
    )
    selection_mode = marshmallow_enum.EnumField(
        SelectionMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="selectionMode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTargetMultiBuyCustomLineItemsChangeValue(**data)


class ChangeTargetMultiBuyLineItemsChangeValueSchema(ChangeTargetChangeValueSchema):
    predicate = marshmallow.fields.String(allow_none=True, load_default=None)
    trigger_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="triggerQuantity"
    )
    discounted_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="discountedQuantity"
    )
    max_occurrence = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="maxOccurrence"
    )
    selection_mode = marshmallow_enum.EnumField(
        SelectionMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="selectionMode",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTargetMultiBuyLineItemsChangeValue(**data)


class ChangeTargetShippingChangeValueSchema(ChangeTargetChangeValueSchema):

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTargetShippingChangeValue(**data)


class ChangeValueAbsoluteChangeValueSchema(ChangeValueChangeValueSchema):
    money = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeValueAbsoluteChangeValue(**data)


class ChangeValueExternalChangeValueSchema(ChangeValueChangeValueSchema):

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeValueExternalChangeValue(**data)


class ChangeValueGiftLineItemChangeValueSchema(ChangeValueChangeValueSchema):
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )
    supply_channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
        data_key="supplyChannel",
    )
    distribution_channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="distributionChannel",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeValueGiftLineItemChangeValue(**data)


class ChangeValueRelativeChangeValueSchema(ChangeValueChangeValueSchema):
    permyriad = marshmallow.fields.Integer(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeValueRelativeChangeValue(**data)


class CustomFieldExpandedValueSchema(helpers.BaseSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    value = marshmallow.fields.Raw(allow_none=True, load_default=None)
    label = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.CustomFieldExpandedValue(**data)


class CustomShippingMethodChangeValueSchema(helpers.BaseSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.CustomShippingMethodChangeValue(**data)


class DeliveryChangeValueSchema(helpers.BaseSchema):
    items = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    parcels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ParcelSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.DeliveryChangeValue(**data)


class EnumValueSchema(helpers.BaseSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    label = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.EnumValue(**data)


class FieldDefinitionOrderValueSchema(helpers.BaseSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    label = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.FieldDefinitionOrderValue(**data)


class InventoryQuantityValueSchema(helpers.BaseSchema):
    quantity_on_stock = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="quantityOnStock"
    )
    available_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="availableQuantity"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.InventoryQuantityValue(**data)


class LocalizedEnumValueSchema(helpers.BaseSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    label = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.LocalizedEnumValue(**data)


class ParcelChangeValueSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    created_at = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="createdAt"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ParcelChangeValue(**data)


class SetCartClassificationShippingRateInputValueSchema(helpers.BaseSchema):
    type = marshmallow.fields.String(allow_none=True, load_default=None)
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    label = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SetCartClassificationShippingRateInputValue(**data)


class SetCartScoreShippingRateInputValueSchema(helpers.BaseSchema):
    type = marshmallow.fields.String(allow_none=True, load_default=None)
    score = marshmallow.fields.Integer(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SetCartScoreShippingRateInputValue(**data)


class ShippingMethodChangeValueSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    name = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ShippingMethodChangeValue(**data)


class ShippingMethodTaxAmountChangeValueSchema(helpers.BaseSchema):
    taxed_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxedPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="taxedPrice",
    )
    tax_rate = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxRateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="taxRate",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ShippingMethodTaxAmountChangeValue(**data)


class ShoppingListLineItemValueSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ShoppingListLineItemValue(**data)


class TextLineItemValueSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.TextLineItemValue(**data)


class TransactionChangeValueSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    interaction_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="interactionId"
    )
    timestamp = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.TransactionChangeValue(**data)


class ValidFromAndUntilValueSchema(helpers.BaseSchema):
    valid_from = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="validFrom"
    )
    valid_until = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="validUntil"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ValidFromAndUntilValue(**data)
