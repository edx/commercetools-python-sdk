# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import re
import typing

import marshmallow
import marshmallow_enum

from commercetools import helpers

from ... import models
from .common import LocalizedStringField

# Fields


# Marshmallow Schemas
class LabelSchema(helpers.BaseSchema):
    type = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.Label(**data)


class AssociateRoleLabelSchema(LabelSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    name = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AssociateRoleLabel(**data)


class BusinessUnitLabelSchema(LabelSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    name = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.BusinessUnitLabel(**data)


class CustomObjectLabelSchema(LabelSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    container = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomObjectLabel(**data)


class CustomerLabelSchema(LabelSchema):
    first_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="firstName"
    )
    last_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lastName"
    )
    customer_number = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customerNumber"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.CustomerLabel(**data)


class LocalizedLabelSchema(LabelSchema):
    value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.LocalizedLabel(**data)


class OrderLabelSchema(LabelSchema):
    customer_email = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customerEmail"
    )
    order_number = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="orderNumber"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.OrderLabel(**data)


class PaymentLabelSchema(LabelSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    amount_planned = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="amountPlanned",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PaymentLabel(**data)


class ProductLabelSchema(LabelSchema):
    slug = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ProductLabel(**data)


class QuoteLabelSchema(LabelSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    staged_quote = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="stagedQuote",
    )
    quote_request = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="quoteRequest",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteLabel(**data)


class QuoteRequestLabelSchema(LabelSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.QuoteRequestLabel(**data)


class ReviewLabelSchema(LabelSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    title = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ReviewLabel(**data)


class StagedQuoteLabelSchema(LabelSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    quote_request = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="quoteRequest",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StagedQuoteLabel(**data)


class StringLabelSchema(LabelSchema):
    value = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.StringLabel(**data)
