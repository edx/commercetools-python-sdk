# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import re
import typing

import marshmallow
import marshmallow_enum

from commercetools import helpers

from ... import models
from ..common import (
    AttributeConstraintEnum,
    AuthenticationMode,
    BusinessUnitAssociateMode,
    BusinessUnitStatus,
    BusinessUnitStoreMode,
    ChannelRoleEnum,
    OrderState,
    PaymentState,
    Permission,
    QuoteRequestState,
    QuoteState,
    ReturnPaymentState,
    ReturnShipmentState,
    RoundingMode,
    ShipmentState,
    StackingMode,
    StagedQuoteState,
    StateRoleEnum,
    StateTypeEnum,
    TaxCalculationMode,
    TaxMode,
    TextInputHint,
    TransactionState,
)
from .common import LocalizedStringField

# Fields


# Marshmallow Schemas
class ChangeSchema(helpers.BaseSchema):
    type = marshmallow.fields.String(allow_none=True, load_default=None)
    change = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.Change(**data)


class AddAddressChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddAddressChange(**data)


class AddAssetChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AssetSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AssetSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddAssetChange(**data)


class AddAssociateChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddAssociateChange(**data)


class AddAttributeDefinitionChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AttributeDefinitionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddAttributeDefinitionChange(**data)


class AddBillingAddressIdChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddBillingAddressIdChange(**data)


class AddChannelRolesChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(ChannelRoleEnum, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(ChannelRoleEnum, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddChannelRolesChange(**data)


class AddCustomLineItemChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomLineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomLineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddCustomLineItemChange(**data)


class AddDeliveryChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.DeliveryChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.DeliveryChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddDeliveryChange(**data)


class AddDiscountCodeChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DiscountCodeInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddDiscountCodeChange(**data)


class AddEnumValueChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.EnumValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    field_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="fieldName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddEnumValueChange(**data)


class AddExternalImageChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ImageSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ImageSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddExternalImageChange(**data)


class AddFieldDefinitionChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.FieldDefinitionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddFieldDefinitionChange(**data)


class AddInheritedAssociateChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.InheritedAssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddInheritedAssociateChange(**data)


class AddInterfaceInteractionChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.CustomFieldExpandedValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddInterfaceInteractionChange(**data)


class AddItemShippingAddressesChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddItemShippingAddressesChange(**data)


class AddLocalizedEnumValueChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AttributeLocalizedEnumValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    field_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="fieldName"
    )
    attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="attributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddLocalizedEnumValueChange(**data)


class AddLocationChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LocationSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddLocationChange(**data)


class AddOrderLineItemChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddOrderLineItemChange(**data)


class AddParcelToDeliveryChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ParcelSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddParcelToDeliveryChange(**data)


class AddPaymentChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PaymentInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PaymentInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddPaymentChange(**data)


class AddPlainEnumValueChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AttributePlainEnumValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="attributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddPlainEnumValueChange(**data)


class AddPriceChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )
    price_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="priceId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddPriceChange(**data)


class AddProductChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    variant_selection = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ProductVariantSelectionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="variantSelection",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddProductChange(**data)


class AddProductSelectionChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ProductSelectionSettingSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ProductSelectionSettingSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddProductSelectionChange(**data)


class AddPropertyChangeSchema(ChangeSchema):
    next_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    path = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddPropertyChange(**data)


class AddReturnInfoChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReturnInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddReturnInfoChange(**data)


class AddShippingAddressIdChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddShippingAddressIdChange(**data)


class AddShoppingListLineItemChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddShoppingListLineItemChange(**data)


class AddStateRolesChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(StateRoleEnum, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(StateRoleEnum, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddStateRolesChange(**data)


class AddTaxRateChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxRateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddTaxRateChange(**data)


class AddTextLineItemChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TextLineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddTextLineItemChange(**data)


class AddToCategoryChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    category = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddToCategoryChange(**data)


class AddTransactionChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TransactionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddTransactionChange(**data)


class AddVariantChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.VariantSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.VariantSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.AddVariantChange(**data)


class ChangeAddressChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeAddressChange(**data)


class ChangeAmountAuthorizedChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeAmountAuthorizedChange(**data)


class ChangeAmountPlannedChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeAmountPlannedChange(**data)


class ChangeAssetNameChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )
    asset = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.AssetChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeAssetNameChange(**data)


class ChangeAssetOrderChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        LocalizedStringField(
            allow_none=True, values=marshmallow.fields.String(allow_none=True)
        ),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        LocalizedStringField(
            allow_none=True, values=marshmallow.fields.String(allow_none=True)
        ),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeAssetOrderChange(**data)


class ChangeAssociateChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeAssociateChange(**data)


class ChangeAssociateModeChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        BusinessUnitAssociateMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        BusinessUnitAssociateMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeAssociateModeChange(**data)


class ChangeAttributeConstraintChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        AttributeConstraintEnum,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        AttributeConstraintEnum,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )
    attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="attributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeAttributeConstraintChange(**data)


class ChangeAttributeOrderByNameChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeAttributeOrderByNameChange(**data)


class ChangeBuyerAssignableChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeBuyerAssignableChange(**data)


class ChangeCartDiscountsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeCartDiscountsChange(**data)


class ChangeCartPredicateChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeCartPredicateChange(**data)


class ChangeCustomLineItemQuantityChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    custom_line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="customLineItem",
    )
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeCustomLineItemQuantityChange(**data)


class ChangeDescriptionChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeDescriptionChange(**data)


class ChangeEmailChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeEmailChange(**data)


class ChangeEnumValueLabelChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    field_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="fieldName"
    )
    value_key = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="valueKey"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeEnumValueLabelChange(**data)


class ChangeEnumValueOrderChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.EnumValueSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.EnumValueSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    field_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="fieldName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeEnumValueOrderChange(**data)


class ChangeFieldDefinitionOrderChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.FieldDefinitionOrderValueSchema"
        ),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.FieldDefinitionOrderValueSchema"
        ),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeFieldDefinitionOrderChange(**data)


class ChangeGroupsChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeGroupsChange(**data)


class ChangeInheritedAssociateChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.InheritedAssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.InheritedAssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeInheritedAssociateChange(**data)


class ChangeInitialChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeInitialChange(**data)


class ChangeInputHintChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        TextInputHint,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        TextInputHint,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )
    field_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="fieldName"
    )
    attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="attributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeInputHintChange(**data)


class ChangeIsActiveChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeIsActiveChange(**data)


class ChangeIsSearchableChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="attributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeIsSearchableChange(**data)


class ChangeKeyChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeKeyChange(**data)


class ChangeLabelChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )
    field_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="fieldName"
    )
    attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="attributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeLabelChange(**data)


class ChangeLineItemQuantityChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="lineItem",
    )
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeLineItemQuantityChange(**data)


class ChangeLocalizedDescriptionChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeLocalizedDescriptionChange(**data)


class ChangeLocalizedEnumValueLabelChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )
    field_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="fieldName"
    )
    attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="attributeName"
    )
    value_key = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="valueKey"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeLocalizedEnumValueLabelChange(**data)


class ChangeLocalizedEnumValueOrderChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.LocalizedEnumValueSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.LocalizedEnumValueSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    field_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="fieldName"
    )
    attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="attributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeLocalizedEnumValueOrderChange(**data)


class ChangeLocalizedNameChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeLocalizedNameChange(**data)


class ChangeMasterVariantChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.VariantSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.VariantSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeMasterVariantChange(**data)


class ChangeNameChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeNameChange(**data)


class ChangeOrderHintChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeOrderHintChange(**data)


class ChangeOrderStateChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        OrderState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        OrderState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeOrderStateChange(**data)


class ChangeParentChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeParentChange(**data)


class ChangeParentUnitChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.KeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.KeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeParentUnitChange(**data)


class ChangePaymentStateChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        PaymentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        PaymentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangePaymentStateChange(**data)


class ChangePlainEnumValueLabelChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="attributeName"
    )
    value_key = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="valueKey"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangePlainEnumValueLabelChange(**data)


class ChangePlainEnumValueOrderChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.EnumValueSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.EnumValueSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="attributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangePlainEnumValueOrderChange(**data)


class ChangePredicateChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangePredicateChange(**data)


class ChangePriceChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )
    price_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="priceId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangePriceChange(**data)


class ChangeProductSelectionActiveChangeSchema(ChangeSchema):
    product_selection = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="productSelection",
    )
    previous_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeProductSelectionActiveChange(**data)


class ChangeQuantityChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.InventoryQuantityValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.InventoryQuantityValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeQuantityChange(**data)


class ChangeQuoteRequestStateChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        QuoteRequestState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        QuoteRequestState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeQuoteRequestStateChange(**data)


class ChangeQuoteStateChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        QuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        QuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeQuoteStateChange(**data)


class ChangeRequiresDiscountCodeChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeRequiresDiscountCodeChange(**data)


class ChangeReviewRatingStatisticsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReviewRatingStatisticsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReviewRatingStatisticsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeReviewRatingStatisticsChange(**data)


class ChangeShipmentStateChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        ShipmentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        ShipmentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeShipmentStateChange(**data)


class ChangeShoppingListLineItemQuantityChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    line_item = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.ShoppingListLineItemValueSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="lineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeShoppingListLineItemQuantityChange(**data)


class ChangeShoppingListLineItemsOrderChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.ShoppingListLineItemValueSchema"
        ),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.ShoppingListLineItemValueSchema"
        ),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeShoppingListLineItemsOrderChange(**data)


class ChangeSlugChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeSlugChange(**data)


class ChangeSortOrderChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeSortOrderChange(**data)


class ChangeStackingModeChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        StackingMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        StackingMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeStackingModeChange(**data)


class ChangeStagedQuoteStateChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        StagedQuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        StagedQuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeStagedQuoteStateChange(**data)


class ChangeStateTypeChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        StateTypeEnum,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        StateTypeEnum,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeStateTypeChange(**data)


class ChangeStatusChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        BusinessUnitStatus,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        BusinessUnitStatus,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeStatusChange(**data)


class ChangeTargetChangeSchema(ChangeSchema):
    previous_value = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "customLineItems": helpers.absmod(
                __name__, ".change_value.ChangeTargetCustomLineItemsChangeValueSchema"
            ),
            "lineItems": helpers.absmod(
                __name__, ".change_value.ChangeTargetLineItemsChangeValueSchema"
            ),
            "multiBuyCustomLineItems": helpers.absmod(
                __name__,
                ".change_value.ChangeTargetMultiBuyCustomLineItemsChangeValueSchema",
            ),
            "multiBuyLineItems": helpers.absmod(
                __name__, ".change_value.ChangeTargetMultiBuyLineItemsChangeValueSchema"
            ),
            "shipping": helpers.absmod(
                __name__, ".change_value.ChangeTargetShippingChangeValueSchema"
            ),
        },
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "customLineItems": helpers.absmod(
                __name__, ".change_value.ChangeTargetCustomLineItemsChangeValueSchema"
            ),
            "lineItems": helpers.absmod(
                __name__, ".change_value.ChangeTargetLineItemsChangeValueSchema"
            ),
            "multiBuyCustomLineItems": helpers.absmod(
                __name__,
                ".change_value.ChangeTargetMultiBuyCustomLineItemsChangeValueSchema",
            ),
            "multiBuyLineItems": helpers.absmod(
                __name__, ".change_value.ChangeTargetMultiBuyLineItemsChangeValueSchema"
            ),
            "shipping": helpers.absmod(
                __name__, ".change_value.ChangeTargetShippingChangeValueSchema"
            ),
        },
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTargetChange(**data)


class ChangeTaxCalculationModeChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        TaxCalculationMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        TaxCalculationMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTaxCalculationModeChange(**data)


class ChangeTaxModeChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        TaxMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        TaxMode, by_value=True, allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTaxModeChange(**data)


class ChangeTaxRoundingModeChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        RoundingMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        RoundingMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTaxRoundingModeChange(**data)


class ChangeTextLineItemNameChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )
    text_line_item = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.TextLineItemValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="textLineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTextLineItemNameChange(**data)


class ChangeTextLineItemQuantityChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    text_line_item = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.TextLineItemValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="textLineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTextLineItemQuantityChange(**data)


class ChangeTextLineItemsOrderChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.TextLineItemValueSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.TextLineItemValueSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTextLineItemsOrderChange(**data)


class ChangeTransactionInteractionIdChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    transaction = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.TransactionChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTransactionInteractionIdChange(**data)


class ChangeTransactionStateChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        TransactionState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        TransactionState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )
    transaction = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.TransactionChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTransactionStateChange(**data)


class ChangeTransactionTimestampChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    transaction = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.TransactionChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeTransactionTimestampChange(**data)


class ChangeValueChangeSchema(ChangeSchema):
    previous_value = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "absolute": helpers.absmod(
                __name__, ".change_value.ChangeValueAbsoluteChangeValueSchema"
            ),
            "external": helpers.absmod(
                __name__, ".change_value.ChangeValueExternalChangeValueSchema"
            ),
            "giftLineItem": helpers.absmod(
                __name__, ".change_value.ChangeValueGiftLineItemChangeValueSchema"
            ),
            "relative": helpers.absmod(
                __name__, ".change_value.ChangeValueRelativeChangeValueSchema"
            ),
        },
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.Discriminator(
        allow_none=True,
        discriminator_field=("type", "type"),
        discriminator_schemas={
            "absolute": helpers.absmod(
                __name__, ".change_value.ChangeValueAbsoluteChangeValueSchema"
            ),
            "external": helpers.absmod(
                __name__, ".change_value.ChangeValueExternalChangeValueSchema"
            ),
            "giftLineItem": helpers.absmod(
                __name__, ".change_value.ChangeValueGiftLineItemChangeValueSchema"
            ),
            "relative": helpers.absmod(
                __name__, ".change_value.ChangeValueRelativeChangeValueSchema"
            ),
        },
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.ChangeValueChange(**data)


class MoveImageToPositionChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ImageSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ImageSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.MoveImageToPositionChange(**data)


class PublishChangeSchema(ChangeSchema):

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.PublishChange(**data)


class RemoveAddressChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveAddressChange(**data)


class RemoveAssetChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AssetSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveAssetChange(**data)


class RemoveAssociateChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveAssociateChange(**data)


class RemoveAttributeDefinitionChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AttributeDefinitionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveAttributeDefinitionChange(**data)


class RemoveBillingAddressIdChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveBillingAddressIdChange(**data)


class RemoveChannelRolesChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(ChannelRoleEnum, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(ChannelRoleEnum, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveChannelRolesChange(**data)


class RemoveCustomLineItemChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomLineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomLineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveCustomLineItemChange(**data)


class RemoveDeliveryItemsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DeliverySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveDeliveryItemsChange(**data)


class RemoveDiscountCodeChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DiscountCodeInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveDiscountCodeChange(**data)


class RemoveEnumValuesChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.EnumValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="attributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveEnumValuesChange(**data)


class RemoveFieldDefinitionChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.FieldDefinitionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveFieldDefinitionChange(**data)


class RemoveFromCategoryChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    category = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveFromCategoryChange(**data)


class RemoveImageChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ImageSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ImageSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveImageChange(**data)


class RemoveInheritedAssociateChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.InheritedAssociateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveInheritedAssociateChange(**data)


class RemoveItemShippingAddressesChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveItemShippingAddressesChange(**data)


class RemoveLocalizedEnumValuesChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.LocalizedEnumValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="attributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveLocalizedEnumValuesChange(**data)


class RemoveLocationChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LocationSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveLocationChange(**data)


class RemoveOrderLineItemChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveOrderLineItemChange(**data)


class RemoveParcelFromDeliveryChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ParcelSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveParcelFromDeliveryChange(**data)


class RemovePaymentChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PaymentInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PaymentInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemovePaymentChange(**data)


class RemovePriceChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )
    price_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="priceId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemovePriceChange(**data)


class RemoveProductChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveProductChange(**data)


class RemoveProductSelectionChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ProductSelectionSettingSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveProductSelectionChange(**data)


class RemovePropertyChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    path = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemovePropertyChange(**data)


class RemoveShippingAddressIdChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveShippingAddressIdChange(**data)


class RemoveShoppingListLineItemChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.LineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveShoppingListLineItemChange(**data)


class RemoveStateRolesChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(StateRoleEnum, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(StateRoleEnum, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveStateRolesChange(**data)


class RemoveTaxRateChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxRateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveTaxRateChange(**data)


class RemoveTextLineItemChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TextLineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TextLineItemSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveTextLineItemChange(**data)


class RemoveVariantChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.VariantSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.VariantSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RemoveVariantChange(**data)


class RequestQuoteRenegotiationChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        QuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        QuoteState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )
    buyer_comment = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="buyerComment"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.RequestQuoteRenegotiationChange(**data)


class SetAddressChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetAddressChange(**data)


class SetAddressCustomFieldChangeSchema(ChangeSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    custom_type_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customTypeId"
    )
    previous_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetAddressCustomFieldChange(**data)


class SetAddressCustomTypeChangeSchema(ChangeSchema):
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetAddressCustomTypeChange(**data)


class SetAnonymousIdChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetAnonymousIdChange(**data)


class SetApplicationVersionChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetApplicationVersionChange(**data)


class SetAssetCustomFieldChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    custom_type_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customTypeId"
    )
    asset = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.AssetChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetAssetCustomFieldChange(**data)


class SetAssetCustomTypeChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    asset = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.AssetChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetAssetCustomTypeChange(**data)


class SetAssetDescriptionChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )
    asset = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.AssetChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetAssetDescriptionChange(**data)


class SetAssetKeyChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    asset = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.AssetChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetAssetKeyChange(**data)


class SetAssetSourcesChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AssetSourceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AssetSourceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    asset = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.AssetChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetAssetSourcesChange(**data)


class SetAssetTagsChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )
    asset = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.AssetChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetAssetTagsChange(**data)


class SetAttributeChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.AttributeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.AttributeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetAttributeChange(**data)


class SetAuthenticationModeChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        AuthenticationMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        AuthenticationMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetAuthenticationModeChange(**data)


class SetAuthorNameChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetAuthorNameChange(**data)


class SetBillingAddressChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetBillingAddressChange(**data)


class SetCartPredicateChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCartPredicateChange(**data)


class SetCategoryOrderHintChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CategoryOrderHintsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CategoryOrderHintsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )
    category_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="categoryId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCategoryOrderHintChange(**data)


class SetChannelRolesChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(ChannelRoleEnum, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(ChannelRoleEnum, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetChannelRolesChange(**data)


class SetCompanyNameChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCompanyNameChange(**data)


class SetContactEmailChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetContactEmailChange(**data)


class SetCountriesChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.StoreCountrySchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.StoreCountrySchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCountriesChange(**data)


class SetCountryChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCountryChange(**data)


class SetCustomFieldChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    custom_type_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customTypeId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomFieldChange(**data)


class SetCustomLineItemCustomFieldChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    custom_line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="customLineItem",
    )
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomLineItemCustomFieldChange(**data)


class SetCustomLineItemCustomTypeChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    custom_line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="customLineItem",
    )
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomLineItemCustomTypeChange(**data)


class SetCustomLineItemMoneyChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    custom_line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="customLineItem",
    )
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomLineItemMoneyChange(**data)


class SetCustomLineItemShippingDetailsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ItemShippingDetailsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ItemShippingDetailsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomLineItemShippingDetailsChange(**data)


class SetCustomLineItemTaxAmountChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxRateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxRateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    custom_line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="customLineItem",
    )
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )
    tax_mode = marshmallow_enum.EnumField(
        TaxMode, by_value=True, allow_none=True, load_default=None, data_key="taxMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomLineItemTaxAmountChange(**data)


class SetCustomLineItemTaxCategoryChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    custom_line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="customLineItem",
    )
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomLineItemTaxCategoryChange(**data)


class SetCustomLineItemTaxRateChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxRateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxRateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    custom_line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="customLineItem",
    )
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )
    tax_mode = marshmallow_enum.EnumField(
        TaxMode, by_value=True, allow_none=True, load_default=None, data_key="taxMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomLineItemTaxRateChange(**data)


class SetCustomLineItemTaxedPriceChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    custom_line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="customLineItem",
    )
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomLineItemTaxedPriceChange(**data)


class SetCustomLineItemTotalPriceChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    custom_line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="customLineItem",
    )
    custom_line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customLineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomLineItemTotalPriceChange(**data)


class SetCustomShippingMethodChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.CustomShippingMethodChangeValueSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.CustomShippingMethodChangeValueSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomShippingMethodChange(**data)


class SetCustomTypeChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomTypeChange(**data)


class SetCustomerChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomerChange(**data)


class SetCustomerEmailChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomerEmailChange(**data)


class SetCustomerGroupChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomerGroupChange(**data)


class SetCustomerIdChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomerIdChange(**data)


class SetCustomerNumberChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetCustomerNumberChange(**data)


class SetDateOfBirthChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetDateOfBirthChange(**data)


class SetDefaultBillingAddressChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetDefaultBillingAddressChange(**data)


class SetDefaultShippingAddressChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetDefaultShippingAddressChange(**data)


class SetDeleteDaysAfterLastModificationChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetDeleteDaysAfterLastModificationChange(**data)


class SetDeliveryAddressChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetDeliveryAddressChange(**data)


class SetDeliveryItemsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    delivery_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="deliveryId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetDeliveryItemsChange(**data)


class SetDescriptionChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetDescriptionChange(**data)


class SetDiscountedPriceChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )
    variant = marshmallow.fields.String(allow_none=True, load_default=None)
    price_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="priceId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetDiscountedPriceChange(**data)


class SetDistributionChannelsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetDistributionChannelsChange(**data)


class SetExpectedDeliveryChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetExpectedDeliveryChange(**data)


class SetExternalIdChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetExternalIdChange(**data)


class SetFirstNameChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetFirstNameChange(**data)


class SetGeoLocationChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.GeoLocationSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.GeoLocationSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetGeoLocationChange(**data)


class SetImageLabelChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ImageSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ImageSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetImageLabelChange(**data)


class SetInputTipChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )
    attribute_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="attributeName"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetInputTipChange(**data)


class SetInterfaceIdChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetInterfaceIdChange(**data)


class SetIsValidChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetIsValidChange(**data)


class SetKeyChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetKeyChange(**data)


class SetLanguagesChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLanguagesChange(**data)


class SetLastNameChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLastNameChange(**data)


class SetLineItemDeactivatedAtChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    line_item = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.ShoppingListLineItemValueSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="lineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLineItemDeactivatedAtChange(**data)


class SetLineItemDiscountedPriceChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DiscountedLineItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DiscountedLineItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="lineItem",
    )
    variant = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLineItemDiscountedPriceChange(**data)


class SetLineItemDiscountedPricePerQuantityChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".common.DiscountedLineItemPriceForQuantitySchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".common.DiscountedLineItemPriceForQuantitySchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="lineItem",
    )
    variant = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLineItemDiscountedPricePerQuantityChange(**data)


class SetLineItemDistributionChannelChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="lineItem",
    )
    variant = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLineItemDistributionChannelChange(**data)


class SetLineItemPriceChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="lineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLineItemPriceChange(**data)


class SetLineItemProductKeyChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="lineItem",
    )
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )
    variant = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLineItemProductKeyChange(**data)


class SetLineItemProductSlugChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )
    line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="lineItem",
    )
    variant = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLineItemProductSlugChange(**data)


class SetLineItemShippingDetailsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ItemShippingDetailsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ItemShippingDetailsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLineItemShippingDetailsChange(**data)


class SetLineItemTaxAmountChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxRateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxRateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="lineItem",
    )
    variant = marshmallow.fields.String(allow_none=True, load_default=None)
    tax_mode = marshmallow_enum.EnumField(
        TaxMode, by_value=True, allow_none=True, load_default=None, data_key="taxMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLineItemTaxAmountChange(**data)


class SetLineItemTaxRateChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxRateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxRateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="lineItem",
    )
    variant = marshmallow.fields.String(allow_none=True, load_default=None)
    tax_mode = marshmallow_enum.EnumField(
        TaxMode, by_value=True, allow_none=True, load_default=None, data_key="taxMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLineItemTaxRateChange(**data)


class SetLineItemTaxedPriceChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxedItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxedItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="lineItem",
    )
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLineItemTaxedPriceChange(**data)


class SetLineItemTotalPriceChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="lineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLineItemTotalPriceChange(**data)


class SetLocaleChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLocaleChange(**data)


class SetLocalizedDescriptionChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLocalizedDescriptionChange(**data)


class SetMaxApplicationsChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetMaxApplicationsChange(**data)


class SetMaxApplicationsPerCustomerChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetMaxApplicationsPerCustomerChange(**data)


class SetMetaDescriptionChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetMetaDescriptionChange(**data)


class SetMetaKeywordsChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetMetaKeywordsChange(**data)


class SetMetaTitleChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetMetaTitleChange(**data)


class SetMethodInfoInterfaceChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetMethodInfoInterfaceChange(**data)


class SetMethodInfoMethodChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetMethodInfoMethodChange(**data)


class SetMethodInfoNameChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetMethodInfoNameChange(**data)


class SetMiddleNameChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetMiddleNameChange(**data)


class SetNameChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetNameChange(**data)


class SetLocalizedNameChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetLocalizedNameChange(**data)


class SetOrderLineItemCustomFieldChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    custom_type_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customTypeId"
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="lineItem",
    )
    variant = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetOrderLineItemCustomFieldChange(**data)


class SetOrderLineItemCustomTypeChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    line_item = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="lineItem",
    )
    variant = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetOrderLineItemCustomTypeChange(**data)


class SetOrderNumberChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetOrderNumberChange(**data)


class SetOrderTaxedPriceChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxedItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxedItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    tax_mode = marshmallow_enum.EnumField(
        TaxMode, by_value=True, allow_none=True, load_default=None, data_key="taxMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetOrderTaxedPriceChange(**data)


class SetOrderTotalPriceChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetOrderTotalPriceChange(**data)


class SetOrderTotalTaxChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    tax_mode = marshmallow_enum.EnumField(
        TaxMode, by_value=True, allow_none=True, load_default=None, data_key="taxMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetOrderTotalTaxChange(**data)


class SetParcelItemsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    parcel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.ParcelChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetParcelItemsChange(**data)


class SetParcelMeasurementsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ParcelMeasurementsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ParcelMeasurementsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    parcel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.ParcelChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetParcelMeasurementsChange(**data)


class SetParcelTrackingDataChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TrackingDataSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TrackingDataSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    parcel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.ParcelChangeValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetParcelTrackingDataChange(**data)


class SetPermissionsChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(Permission, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(Permission, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetPermissionsChange(**data)


class SetPricesChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.PriceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )
    variant = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetPricesChange(**data)


class SetProductCountChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetProductCountChange(**data)


class SetProductPriceCustomFieldChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetProductPriceCustomFieldChange(**data)


class SetProductPriceCustomTypeChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetProductPriceCustomTypeChange(**data)


class SetProductSelectionsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ProductSelectionSettingSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ProductSelectionSettingSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetProductSelectionsChange(**data)


class SetProductVariantKeyChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetProductVariantKeyChange(**data)


class SetPropertyChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    path = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetPropertyChange(**data)


class SetPurchaseOrderNumberChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetPurchaseOrderNumberChange(**data)


class SetRatingChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetRatingChange(**data)


class SetReservationsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReservationSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReservationSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetReservationsChange(**data)


class SetRestockableInDaysChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetRestockableInDaysChange(**data)


class SetReturnPaymentStateChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        ReturnPaymentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        ReturnPaymentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetReturnPaymentStateChange(**data)


class SetReturnShipmentStateChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        ReturnShipmentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        ReturnShipmentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetReturnShipmentStateChange(**data)


class SetSalutationChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetSalutationChange(**data)


class SetSearchKeywordsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.SearchKeywordsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.SearchKeywordsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetSearchKeywordsChange(**data)


class SetSellerCommentChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetSellerCommentChange(**data)


class SetShippingAddressChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetShippingAddressChange(**data)


class SetShippingInfoPriceChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetShippingInfoPriceChange(**data)


class SetShippingInfoTaxedPriceChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxedPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxedPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetShippingInfoTaxedPriceChange(**data)


class SetShippingMethodChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.ShippingMethodChangeValueSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.ShippingMethodChangeValueSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetShippingMethodChange(**data)


class SetShippingMethodTaxAmountChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.ShippingMethodTaxAmountChangeValueSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.ShippingMethodTaxAmountChangeValueSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    tax_mode = marshmallow_enum.EnumField(
        TaxMode, by_value=True, allow_none=True, load_default=None, data_key="taxMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetShippingMethodTaxAmountChange(**data)


class SetShippingMethodTaxRateChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxRateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.TaxRateSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    tax_mode = marshmallow_enum.EnumField(
        TaxMode, by_value=True, allow_none=True, load_default=None, data_key="taxMode"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetShippingMethodTaxRateChange(**data)


class SetShippingRateChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetShippingRateChange(**data)


class SetShippingRateInputChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.SetCartClassificationShippingRateInputValueSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.SetCartClassificationShippingRateInputValueSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetShippingRateInputChange(**data)


class SetShoppingListLineItemCustomFieldChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    custom_type_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customTypeId"
    )
    line_item = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.ShoppingListLineItemValueSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="lineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetShoppingListLineItemCustomFieldChange(**data)


class SetShoppingListLineItemCustomTypeChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    line_item = helpers.LazyNestedField(
        nested=helpers.absmod(
            __name__, ".change_value.ShoppingListLineItemValueSchema"
        ),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="lineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetShoppingListLineItemCustomTypeChange(**data)


class SetSkuChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetSkuChange(**data)


class SetSlugChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetSlugChange(**data)


class SetStateRolesChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(StateRoleEnum, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow.fields.List(
        marshmallow_enum.EnumField(StateRoleEnum, by_value=True, allow_none=True),
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetStateRolesChange(**data)


class SetStatusInterfaceCodeChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetStatusInterfaceCodeChange(**data)


class SetStatusInterfaceTextChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetStatusInterfaceTextChange(**data)


class SetStoreChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetStoreChange(**data)


class SetStoreModeChangeSchema(ChangeSchema):
    previous_value = marshmallow_enum.EnumField(
        BusinessUnitStoreMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="previousValue",
    )
    next_value = marshmallow_enum.EnumField(
        BusinessUnitStoreMode,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetStoreModeChange(**data)


class SetStoresChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetStoresChange(**data)


class SetSupplyChannelChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetSupplyChannelChange(**data)


class SetSupplyChannelsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetSupplyChannelsChange(**data)


class SetTargetChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetTargetChange(**data)


class SetTaxCategoryChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetTaxCategoryChange(**data)


class SetTextChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetTextChange(**data)


class SetTextLineItemCustomFieldChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="nextValue"
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    custom_type_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="customTypeId"
    )
    text_line_item = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.TextLineItemValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="textLineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetTextLineItemCustomFieldChange(**data)


class SetTextLineItemCustomTypeChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    text_line_item = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.TextLineItemValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="textLineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetTextLineItemCustomTypeChange(**data)


class SetTextLineItemDescriptionChangeSchema(ChangeSchema):
    previous_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="previousValue",
    )
    next_value = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="nextValue",
    )
    text_line_item = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.TextLineItemValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="textLineItem",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetTextLineItemDescriptionChange(**data)


class SetTitleChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetTitleChange(**data)


class SetTransitionsChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetTransitionsChange(**data)


class SetValidFromAndUntilChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.ValidFromAndUntilValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".change_value.ValidFromAndUntilValueSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetValidFromAndUntilChange(**data)


class SetValidFromChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetValidFromChange(**data)


class SetValidToChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetValidToChange(**data)


class SetValidUntilChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetValidUntilChange(**data)


class SetValueChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetValueChange(**data)


class SetVariantAvailabilityChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ProductVariantAvailabilitySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ProductVariantAvailabilitySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    catalog_data = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="catalogData"
    )
    variant = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetVariantAvailabilityChange(**data)


class SetVariantSelectionChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ProductVariantSelectionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ProductVariantSelectionSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    product = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetVariantSelectionChange(**data)


class SetVatIdChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.SetVatIdChange(**data)


class TransitionCustomLineItemStateChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ItemStateSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ItemStateSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )
    state_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="stateId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.TransitionCustomLineItemStateChange(**data)


class TransitionLineItemStateChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ItemStateSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ItemStateSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    line_item_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lineItemId"
    )
    state_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="stateId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.TransitionLineItemStateChange(**data)


class TransitionStateChangeSchema(ChangeSchema):
    previous_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="previousValue",
    )
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.TransitionStateChange(**data)


class UnknownChangeSchema(ChangeSchema):
    previous_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="previousValue"
    )
    next_value = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="nextValue"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.UnknownChange(**data)


class UnpublishChangeSchema(ChangeSchema):

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.UnpublishChange(**data)


class UpdateSyncInfoChangeSchema(ChangeSchema):
    next_value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".common.SyncInfoSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="nextValue",
    )
    channel_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="channelId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.UpdateSyncInfoChange(**data)


class VerifyEmailChangeSchema(ChangeSchema):

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):
        del data["type"]
        return models.VerifyEmailChange(**data)
