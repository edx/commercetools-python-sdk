# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import re
import typing

import marshmallow
import marshmallow_enum

from commercetools import helpers

from ... import models
from ..common import (
    AssociateRoleInheritanceMode,
    AttributeConstraintEnum,
    DiscountCodeState,
    MoneyType,
    ProductVariantSelectionTypeEnum,
    ReferenceTypeId,
    ReturnPaymentState,
    ReturnShipmentState,
    ShippingRateTierType,
    TextInputHint,
    TransactionState,
    TransactionType,
)


# Fields
class LocalizedStringField(marshmallow.fields.Dict):

    def _deserialize(self, value, attr, data, **kwargs):
        result = super()._deserialize(value, attr, data)
        return models.LocalizedString(**result)


# Marshmallow Schemas
class AddressSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    title = marshmallow.fields.String(allow_none=True, load_default=None)
    salutation = marshmallow.fields.String(allow_none=True, load_default=None)
    first_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="firstName"
    )
    last_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lastName"
    )
    street_name = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="streetName"
    )
    street_number = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="streetNumber"
    )
    additional_street_info = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="additionalStreetInfo"
    )
    postal_code = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="postalCode"
    )
    city = marshmallow.fields.String(allow_none=True, load_default=None)
    region = marshmallow.fields.String(allow_none=True, load_default=None)
    state = marshmallow.fields.String(allow_none=True, load_default=None)
    country = marshmallow.fields.String(allow_none=True, load_default=None)
    company = marshmallow.fields.String(allow_none=True, load_default=None)
    department = marshmallow.fields.String(allow_none=True, load_default=None)
    building = marshmallow.fields.String(allow_none=True, load_default=None)
    apartment = marshmallow.fields.String(allow_none=True, load_default=None)
    p_o_box = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="pOBox"
    )
    phone = marshmallow.fields.String(allow_none=True, load_default=None)
    mobile = marshmallow.fields.String(allow_none=True, load_default=None)
    email = marshmallow.fields.String(allow_none=True, load_default=None)
    fax = marshmallow.fields.String(allow_none=True, load_default=None)
    additional_address_info = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="additionalAddressInfo"
    )
    external_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="externalId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.Address(**data)


class AssetSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    description = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    custom = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    key = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.Asset(**data)


class AssetDimensionsSchema(helpers.BaseSchema):
    w = marshmallow.fields.Integer(allow_none=True, load_default=None)
    h = marshmallow.fields.Integer(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.AssetDimensions(**data)


class AssetSourceSchema(helpers.BaseSchema):
    uri = marshmallow.fields.String(allow_none=True, load_default=None)
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    dimensions = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".AssetDimensionsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    content_type = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="contentType"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.AssetSource(**data)


class AssociateSchema(helpers.BaseSchema):
    associate_role_assignments = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".AssociateRoleAssignmentSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRoleAssignments",
    )
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.Associate(**data)


class AssociateRoleAssignmentSchema(helpers.BaseSchema):
    associate_role = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".KeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRole",
    )
    inheritance = marshmallow_enum.EnumField(
        AssociateRoleInheritanceMode, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.AssociateRoleAssignment(**data)


class AttributeDefinitionSchema(helpers.BaseSchema):
    type = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".AttributeTypeSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    label = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    is_required = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="isRequired"
    )
    attribute_constraint = marshmallow_enum.EnumField(
        AttributeConstraintEnum,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="attributeConstraint",
    )
    input_tip = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="inputTip",
    )
    input_hint = marshmallow_enum.EnumField(
        TextInputHint,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="inputHint",
    )
    is_searchable = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="isSearchable"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.AttributeDefinition(**data)


class AttributeLocalizedEnumValueSchema(helpers.BaseSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    label = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.AttributeLocalizedEnumValue(**data)


class AttributePlainEnumValueSchema(helpers.BaseSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    label = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.AttributePlainEnumValue(**data)


class AttributeTypeSchema(helpers.BaseSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.AttributeType(**data)


class CategoryOrderHintsSchema(helpers.BaseSchema):
    _regex = helpers.RegexField(
        unknown=marshmallow.EXCLUDE,
        metadata={
            "pattern": re.compile(
                "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$"
            ),
            "type": marshmallow.fields.String(
                allow_none=True,
                load_default=None,
                data_key="/^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}$/",
            ),
        },
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.CategoryOrderHints(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class CustomFieldsSchema(helpers.BaseSchema):
    type = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    fields = marshmallow.fields.Raw(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.CustomFields(**data)


class CustomLineItemSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    money = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    taxed_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".TaxedItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="taxedPrice",
    )
    total_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="totalPrice",
    )
    slug = marshmallow.fields.String(allow_none=True, load_default=None)
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.CustomLineItem(**data)


class DeliverySchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    created_at = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="createdAt"
    )
    items = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    parcels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ParcelSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    address = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".AddressSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )
    custom = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        metadata={"omit_empty": True},
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.Delivery(**data)


class DeliveryItemSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.DeliveryItem(**data)


class DiscountCodeInfoSchema(helpers.BaseSchema):
    discount_code = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="discountCode",
    )
    state = marshmallow_enum.EnumField(
        DiscountCodeState, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.DiscountCodeInfo(**data)


class DiscountedLineItemPortionSchema(helpers.BaseSchema):
    discount = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    discounted_amount = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="discountedAmount",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.DiscountedLineItemPortion(**data)


class DiscountedLineItemPriceSchema(helpers.BaseSchema):
    value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    included_discounts = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".DiscountedLineItemPortionSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="includedDiscounts",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.DiscountedLineItemPrice(**data)


class DiscountedLineItemPriceForQuantitySchema(helpers.BaseSchema):
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)
    discounted_price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".DiscountedLineItemPriceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="discountedPrice",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.DiscountedLineItemPriceForQuantity(**data)


class FieldDefinitionSchema(helpers.BaseSchema):
    type = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".FieldTypeSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    label = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    input_hint = marshmallow_enum.EnumField(
        TextInputHint,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="inputHint",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.FieldDefinition(**data)


class FieldTypeSchema(helpers.BaseSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.FieldType(**data)


class GeoLocationSchema(helpers.BaseSchema):
    type = marshmallow.fields.String(allow_none=True, load_default=None)
    coordinates = marshmallow.fields.List(
        marshmallow.fields.Integer(allow_none=True), allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.GeoLocation(**data)


class ImageSchema(helpers.BaseSchema):
    url = marshmallow.fields.String(allow_none=True, load_default=None)
    dimensions = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ImageDimensionsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    label = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.Image(**data)


class ImageDimensionsSchema(helpers.BaseSchema):
    w = marshmallow.fields.Integer(allow_none=True, load_default=None)
    h = marshmallow.fields.Integer(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ImageDimensions(**data)


class InheritedAssociateSchema(helpers.BaseSchema):
    associate_role_assignments = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".InheritedAssociateRoleAssignmentSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRoleAssignments",
    )
    customer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.InheritedAssociate(**data)


class InheritedAssociateRoleAssignmentSchema(helpers.BaseSchema):
    associate_role = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".KeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="associateRole",
    )
    source = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".KeyReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.InheritedAssociateRoleAssignment(**data)


class ItemShippingDetailsSchema(helpers.BaseSchema):
    targets = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ItemShippingTargetSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    valid = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ItemShippingDetails(**data)


class ItemShippingTargetSchema(helpers.BaseSchema):
    address_key = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="addressKey"
    )
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ItemShippingTarget(**data)


class ItemStateSchema(helpers.BaseSchema):
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)
    state = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ItemState(**data)


class KeyReferenceSchema(helpers.BaseSchema):
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    type_id = marshmallow_enum.EnumField(
        ReferenceTypeId,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="typeId",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.KeyReference(**data)


class LineItemSchema(helpers.BaseSchema):
    added_at = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="addedAt"
    )
    custom = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    product_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="productId"
    )
    product_slug = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
        data_key="productSlug",
    )
    product_type = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="productType",
    )
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)
    variant = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".VariantSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    variant_id = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="variantId"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.LineItem(**data)


class LocationSchema(helpers.BaseSchema):
    country = marshmallow.fields.String(allow_none=True, load_default=None)
    state = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.Location(**data)


class MoneySchema(helpers.BaseSchema):
    currency_code = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="currencyCode"
    )
    cent_amount = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="centAmount"
    )
    fraction_digits = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="fractionDigits"
    )
    type = marshmallow_enum.EnumField(
        MoneyType, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.Money(**data)


class ParcelSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    created_at = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="createdAt"
    )
    measurements = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ParcelMeasurementsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    tracking_data = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".TrackingDataSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="trackingData",
    )
    items = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".DeliveryItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.Parcel(**data)


class ParcelMeasurementsSchema(helpers.BaseSchema):
    height_in_millimeter = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="heightInMillimeter"
    )
    length_in_millimeter = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="lengthInMillimeter"
    )
    width_in_millimeter = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="widthInMillimeter"
    )
    weight_in_gram = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="weightInGram"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ParcelMeasurements(**data)


class PaymentInfoSchema(helpers.BaseSchema):
    payments = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ReferenceSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.PaymentInfo(**data)


class PriceSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    value = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.Price(**data)


class ProductSelectionSettingSchema(helpers.BaseSchema):
    product_selection = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="productSelection",
    )
    active = marshmallow.fields.Boolean(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ProductSelectionSetting(**data)


class ProductVariantAvailabilitySchema(helpers.BaseSchema):
    is_on_stock = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="isOnStock"
    )
    restockable_in_days = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="restockableInDays"
    )
    available_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="availableQuantity"
    )
    channels = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ProductVariantChannelAvailabilityMapSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ProductVariantAvailability(**data)


class ProductVariantChannelAvailabilitySchema(helpers.BaseSchema):
    is_on_stock = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="isOnStock"
    )
    restockable_in_days = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="restockableInDays"
    )
    available_quantity = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="availableQuantity"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ProductVariantChannelAvailability(**data)


class ProductVariantChannelAvailabilityMapSchema(helpers.BaseSchema):
    _regex = helpers.RegexField(
        unknown=marshmallow.EXCLUDE,
        metadata={
            "pattern": re.compile(""),
            "type": helpers.LazyNestedField(
                nested=helpers.absmod(
                    __name__, ".ProductVariantChannelAvailabilitySchema"
                ),
                allow_none=True,
                unknown=marshmallow.EXCLUDE,
                load_default=None,
            ),
        },
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.ProductVariantChannelAvailabilityMap(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ProductVariantSelectionSchema(helpers.BaseSchema):
    type = marshmallow_enum.EnumField(
        ProductVariantSelectionTypeEnum,
        by_value=True,
        allow_none=True,
        load_default=None,
    )
    skus = marshmallow.fields.List(
        marshmallow.fields.String(allow_none=True), allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ProductVariantSelection(**data)


class ReferenceSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    type_id = marshmallow_enum.EnumField(
        ReferenceTypeId,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="typeId",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.Reference(**data)


class ReservationSchema(helpers.BaseSchema):
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)
    owner = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    created_at = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="createdAt"
    )
    checkout_started_at = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="checkoutStartedAt"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.Reservation(**data)


class ResourceIdentifierSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    key = marshmallow.fields.String(allow_none=True, load_default=None)
    type_id = marshmallow_enum.EnumField(
        ReferenceTypeId,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="typeId",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ResourceIdentifier(**data)


class ReturnInfoSchema(helpers.BaseSchema):
    items = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ReturnItemSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    return_tracking_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="returnTrackingId"
    )
    return_date = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="returnDate"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ReturnInfo(**data)


class ReturnItemSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)
    type = marshmallow.fields.String(allow_none=True, load_default=None)
    comment = marshmallow.fields.String(allow_none=True, load_default=None)
    shipment_state = marshmallow_enum.EnumField(
        ReturnShipmentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="shipmentState",
    )
    payment_state = marshmallow_enum.EnumField(
        ReturnPaymentState,
        by_value=True,
        allow_none=True,
        load_default=None,
        data_key="paymentState",
    )
    last_modified_at = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="lastModifiedAt"
    )
    created_at = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="createdAt"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ReturnItem(**data)


class ReviewRatingStatisticsSchema(helpers.BaseSchema):
    average_rating = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="averageRating"
    )
    highest_rating = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="highestRating"
    )
    lowest_rating = marshmallow.fields.Integer(
        allow_none=True, load_default=None, data_key="lowestRating"
    )
    count = marshmallow.fields.Integer(allow_none=True, load_default=None)
    ratings_distribution = marshmallow.fields.Raw(
        allow_none=True, load_default=None, data_key="ratingsDistribution"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ReviewRatingStatistics(**data)


class SearchKeywordSchema(helpers.BaseSchema):
    text = marshmallow.fields.String(allow_none=True, load_default=None)
    suggest_tokenizer = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SuggestTokenizerSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="suggestTokenizer",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SearchKeyword(**data)


class SearchKeywordsSchema(helpers.BaseSchema):
    _regex = helpers.RegexField(
        unknown=marshmallow.EXCLUDE,
        metadata={
            "pattern": re.compile("^[a-z]{2}(-[A-Z]{2})?$"),
            "type": helpers.LazyNestedField(
                nested=helpers.absmod(__name__, ".SearchKeywordSchema"),
                allow_none=True,
                many=True,
                unknown=marshmallow.EXCLUDE,
                load_default=None,
                data_key="/^[a-z]{2}(-[A-Z]{2})?$/",
            ),
        },
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.pre_load
    def pre_load(self, data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.pre_load(self, data)

    @marshmallow.post_load(pass_original=True)
    def post_load(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        data = field.post_load(data, original_data)
        return models.SearchKeywords(**data)

    @marshmallow.post_dump(pass_original=True)
    def post_dump(self, data, original_data, **kwargs):
        field = typing.cast(helpers.RegexField, self.fields["_regex"])
        return field.post_dump(data, original_data)


class ShippingRateSchema(helpers.BaseSchema):
    price = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    free_above = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="freeAbove",
    )
    is_matching = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="isMatching"
    )
    tiers = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ShippingRatePriceTierSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ShippingRate(**data)


class ShippingRatePriceTierSchema(helpers.BaseSchema):
    type = marshmallow_enum.EnumField(
        ShippingRateTierType, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.ShippingRatePriceTier(**data)


class StoreCountrySchema(helpers.BaseSchema):
    code = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.StoreCountry(**data)


class SubRateSchema(helpers.BaseSchema):
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    amount = marshmallow.fields.Integer(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SubRate(**data)


class SuggestTokenizerSchema(helpers.BaseSchema):
    type = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SuggestTokenizer(**data)


class SyncInfoSchema(helpers.BaseSchema):
    channel = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".ReferenceSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    external_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="externalId"
    )
    synced_at = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="syncedAt"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.SyncInfo(**data)


class TaxRateSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    name = marshmallow.fields.String(allow_none=True, load_default=None)
    amount = marshmallow.fields.Integer(allow_none=True, load_default=None)
    included_in_price = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="includedInPrice"
    )
    country = marshmallow.fields.String(allow_none=True, load_default=None)
    state = marshmallow.fields.String(allow_none=True, load_default=None)
    sub_rates = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".SubRateSchema"),
        allow_none=True,
        many=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="subRates",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.TaxRate(**data)


class TaxedItemPriceSchema(helpers.BaseSchema):
    total_net = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="totalNet",
    )
    total_gross = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="totalGross",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.TaxedItemPrice(**data)


class TaxedPriceSchema(helpers.BaseSchema):
    total_net = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="totalNet",
    )
    total_gross = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
        data_key="totalGross",
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.TaxedPrice(**data)


class TextLineItemSchema(helpers.BaseSchema):
    added_at = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="addedAt"
    )
    custom = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".CustomFieldsSchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    description = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    name = LocalizedStringField(
        allow_none=True,
        values=marshmallow.fields.String(allow_none=True),
        load_default=None,
    )
    quantity = marshmallow.fields.Integer(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.TextLineItem(**data)


class TrackingDataSchema(helpers.BaseSchema):
    tracking_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="trackingId"
    )
    carrier = marshmallow.fields.String(allow_none=True, load_default=None)
    provider = marshmallow.fields.String(allow_none=True, load_default=None)
    provider_transaction = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="providerTransaction"
    )
    is_return = marshmallow.fields.Boolean(
        allow_none=True, load_default=None, data_key="isReturn"
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.TrackingData(**data)


class TransactionSchema(helpers.BaseSchema):
    id = marshmallow.fields.String(allow_none=True, load_default=None)
    timestamp = marshmallow.fields.String(allow_none=True, load_default=None)
    type = marshmallow_enum.EnumField(
        TransactionType, by_value=True, allow_none=True, load_default=None
    )
    amount = helpers.LazyNestedField(
        nested=helpers.absmod(__name__, ".MoneySchema"),
        allow_none=True,
        unknown=marshmallow.EXCLUDE,
        load_default=None,
    )
    interaction_id = marshmallow.fields.String(
        allow_none=True, load_default=None, data_key="interactionId"
    )
    state = marshmallow_enum.EnumField(
        TransactionState, by_value=True, allow_none=True, load_default=None
    )

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.Transaction(**data)


class VariantSchema(helpers.BaseSchema):
    id = marshmallow.fields.Integer(allow_none=True, load_default=None)
    sku = marshmallow.fields.String(allow_none=True, load_default=None)
    key = marshmallow.fields.String(allow_none=True, load_default=None)

    class Meta:
        unknown = marshmallow.EXCLUDE

    @marshmallow.post_load
    def post_load(self, data, **kwargs):

        return models.Variant(**data)
