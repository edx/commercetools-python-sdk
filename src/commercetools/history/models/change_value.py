# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen

import datetime
import enum
import typing

from ._abstract import _BaseType
from .common import SelectionMode

if typing.TYPE_CHECKING:
    from .common import (
        Address,
        DeliveryItem,
        LocalizedString,
        Money,
        Parcel,
        Reference,
        SelectionMode,
        TaxedPrice,
        TaxRate,
    )

__all__ = [
    "AssetChangeValue",
    "AttributeValue",
    "ChangeTargetChangeValue",
    "ChangeTargetCustomLineItemsChangeValue",
    "ChangeTargetLineItemsChangeValue",
    "ChangeTargetMultiBuyCustomLineItemsChangeValue",
    "ChangeTargetMultiBuyLineItemsChangeValue",
    "ChangeTargetShippingChangeValue",
    "ChangeValueAbsoluteChangeValue",
    "ChangeValueChangeValue",
    "ChangeValueExternalChangeValue",
    "ChangeValueGiftLineItemChangeValue",
    "ChangeValueRelativeChangeValue",
    "CustomFieldExpandedValue",
    "CustomShippingMethodChangeValue",
    "DeliveryChangeValue",
    "EnumValue",
    "FieldDefinitionOrderValue",
    "InventoryQuantityValue",
    "LocalizedEnumValue",
    "ParcelChangeValue",
    "SetCartClassificationShippingRateInputValue",
    "SetCartScoreShippingRateInputValue",
    "ShippingMethodChangeValue",
    "ShippingMethodTaxAmountChangeValue",
    "ShoppingListLineItemValue",
    "TextLineItemValue",
    "TransactionChangeValue",
    "ValidFromAndUntilValue",
]


class ChangeTargetChangeValue(_BaseType):
    type: str

    def __init__(self, *, type: str):
        self.type = type

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTargetChangeValue":
        if data["type"] == "customLineItems":
            from ._schemas.change_value import (
                ChangeTargetCustomLineItemsChangeValueSchema,
            )

            return ChangeTargetCustomLineItemsChangeValueSchema().load(data)
        if data["type"] == "lineItems":
            from ._schemas.change_value import ChangeTargetLineItemsChangeValueSchema

            return ChangeTargetLineItemsChangeValueSchema().load(data)
        if data["type"] == "multiBuyCustomLineItems":
            from ._schemas.change_value import (
                ChangeTargetMultiBuyCustomLineItemsChangeValueSchema,
            )

            return ChangeTargetMultiBuyCustomLineItemsChangeValueSchema().load(data)
        if data["type"] == "multiBuyLineItems":
            from ._schemas.change_value import (
                ChangeTargetMultiBuyLineItemsChangeValueSchema,
            )

            return ChangeTargetMultiBuyLineItemsChangeValueSchema().load(data)
        if data["type"] == "shipping":
            from ._schemas.change_value import ChangeTargetShippingChangeValueSchema

            return ChangeTargetShippingChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ChangeTargetChangeValueSchema

        return ChangeTargetChangeValueSchema().dump(self)


class ChangeValueChangeValue(_BaseType):
    type: str

    def __init__(self, *, type: str):
        self.type = type

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeValueChangeValue":
        if data["type"] == "absolute":
            from ._schemas.change_value import ChangeValueAbsoluteChangeValueSchema

            return ChangeValueAbsoluteChangeValueSchema().load(data)
        if data["type"] == "external":
            from ._schemas.change_value import ChangeValueExternalChangeValueSchema

            return ChangeValueExternalChangeValueSchema().load(data)
        if data["type"] == "giftLineItem":
            from ._schemas.change_value import ChangeValueGiftLineItemChangeValueSchema

            return ChangeValueGiftLineItemChangeValueSchema().load(data)
        if data["type"] == "relative":
            from ._schemas.change_value import ChangeValueRelativeChangeValueSchema

            return ChangeValueRelativeChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ChangeValueChangeValueSchema

        return ChangeValueChangeValueSchema().dump(self)


class AssetChangeValue(_BaseType):
    #: `id` of the [Asset](ctp:api:type:Asset).
    id: str
    #: Name of the Asset.
    name: "LocalizedString"

    def __init__(self, *, id: str, name: "LocalizedString"):
        self.id = id
        self.name = name

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AssetChangeValue":
        from ._schemas.change_value import AssetChangeValueSchema

        return AssetChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import AssetChangeValueSchema

        return AssetChangeValueSchema().dump(self)


class AttributeValue(_BaseType):
    #: Name of the Attribute set.
    name: str
    #: Value set for the Attribute determined by the [AttributeType](ctp:api:type:AttributeType):
    #:
    #: - For [Enum Type](ctp:api:type:AttributeEnumType) and [Localized Enum Type](ctp:api:type:AttributeLocalizedEnumType), `value` is the `key` of the [Plain Enum Value](ctp:api:type:AttributePlainEnumValue) or [Localized Enum Value](ctp:api:type:AttributeLocalizedEnumValue) objects,
    #:   or the complete objects.
    #: - For [Localizable Text Type](ctp:api:type:AttributeLocalizableTextType), `value` is the [LocalizedString](ctp:api:type:LocalizedString) object.
    #: - For [Money Type](ctp:api:type:AttributeMoneyType) Attributes, `value` is the [Money](ctp:api:type:Money) object.
    #: - For [Set Type](ctp:api:type:AttributeSetType) Attributes, `value` is the entire `set` object.
    #: - For [Nested Type](ctp:api:type:AttributeNestedType) Attributes, `value` is the list of values of all Attributes of the nested Product.
    #: - For [Reference Type](ctp:api:type:AttributeReferenceType) Attributes, `value` is the [Reference](ctp:api:type:Reference) object.
    value: typing.Any

    def __init__(self, *, name: str, value: typing.Any):
        self.name = name
        self.value = value

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AttributeValue":
        from ._schemas.change_value import AttributeValueSchema

        return AttributeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import AttributeValueSchema

        return AttributeValueSchema().dump(self)


class ChangeTargetCustomLineItemsChangeValue(ChangeTargetChangeValue):
    #: Valid [CustomLineItem target predicate](/../api/projects/predicates#customlineitem-field-identifiers).
    predicate: str

    def __init__(self, *, predicate: str):
        self.predicate = predicate

        super().__init__(type="customLineItems")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTargetCustomLineItemsChangeValue":
        from ._schemas.change_value import ChangeTargetCustomLineItemsChangeValueSchema

        return ChangeTargetCustomLineItemsChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ChangeTargetCustomLineItemsChangeValueSchema

        return ChangeTargetCustomLineItemsChangeValueSchema().dump(self)


class ChangeTargetLineItemsChangeValue(ChangeTargetChangeValue):
    #: Valid [LineItem target predicate](/../api/projects/predicates#lineitem-field-identifiers).
    predicate: str

    def __init__(self, *, predicate: str):
        self.predicate = predicate

        super().__init__(type="lineItems")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTargetLineItemsChangeValue":
        from ._schemas.change_value import ChangeTargetLineItemsChangeValueSchema

        return ChangeTargetLineItemsChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ChangeTargetLineItemsChangeValueSchema

        return ChangeTargetLineItemsChangeValueSchema().dump(self)


class ChangeTargetMultiBuyCustomLineItemsChangeValue(ChangeTargetChangeValue):
    #: Valid [CustomLineItem target predicate](/../api/projects/predicates#customlineitem-field-identifiers).
    predicate: str
    #: Quantity of Custom Line Items that triggered the application of the discount.
    trigger_quantity: int
    #: Quantity of Custom Line Items discounted per application of this discount.
    discounted_quantity: int
    #: Maximum number of times the discount is applicable.
    max_occurrence: int
    #: SelectionMode based on which particular Custom Line Items were discounted.
    selection_mode: "SelectionMode"

    def __init__(
        self,
        *,
        predicate: str,
        trigger_quantity: int,
        discounted_quantity: int,
        max_occurrence: int,
        selection_mode: "SelectionMode"
    ):
        self.predicate = predicate
        self.trigger_quantity = trigger_quantity
        self.discounted_quantity = discounted_quantity
        self.max_occurrence = max_occurrence
        self.selection_mode = selection_mode

        super().__init__(type="multiBuyCustomLineItems")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTargetMultiBuyCustomLineItemsChangeValue":
        from ._schemas.change_value import (
            ChangeTargetMultiBuyCustomLineItemsChangeValueSchema,
        )

        return ChangeTargetMultiBuyCustomLineItemsChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import (
            ChangeTargetMultiBuyCustomLineItemsChangeValueSchema,
        )

        return ChangeTargetMultiBuyCustomLineItemsChangeValueSchema().dump(self)


class ChangeTargetMultiBuyLineItemsChangeValue(ChangeTargetChangeValue):
    #: Valid [LineItem target predicate](/../api/projects/predicates#lineitem-field-identifiers).
    predicate: str
    #: Quantity of Line Items that triggered the application of the discount.
    trigger_quantity: int
    #: Quantity of Line Items discounted per application of this discount.
    discounted_quantity: int
    #: Maximum number of times the discount is applicable.
    max_occurrence: int
    #: SelectionMode based on which particular Line Items were discounted.
    selection_mode: "SelectionMode"

    def __init__(
        self,
        *,
        predicate: str,
        trigger_quantity: int,
        discounted_quantity: int,
        max_occurrence: int,
        selection_mode: "SelectionMode"
    ):
        self.predicate = predicate
        self.trigger_quantity = trigger_quantity
        self.discounted_quantity = discounted_quantity
        self.max_occurrence = max_occurrence
        self.selection_mode = selection_mode

        super().__init__(type="multiBuyLineItems")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTargetMultiBuyLineItemsChangeValue":
        from ._schemas.change_value import (
            ChangeTargetMultiBuyLineItemsChangeValueSchema,
        )

        return ChangeTargetMultiBuyLineItemsChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import (
            ChangeTargetMultiBuyLineItemsChangeValueSchema,
        )

        return ChangeTargetMultiBuyLineItemsChangeValueSchema().dump(self)


class ChangeTargetShippingChangeValue(ChangeTargetChangeValue):

    def __init__(self):

        super().__init__(type="shipping")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeTargetShippingChangeValue":
        from ._schemas.change_value import ChangeTargetShippingChangeValueSchema

        return ChangeTargetShippingChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ChangeTargetShippingChangeValueSchema

        return ChangeTargetShippingChangeValueSchema().dump(self)


class ChangeValueAbsoluteChangeValue(ChangeValueChangeValue):
    #: Money values in different currencies.
    money: typing.List["Money"]

    def __init__(self, *, money: typing.List["Money"]):
        self.money = money

        super().__init__(type="absolute")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeValueAbsoluteChangeValue":
        from ._schemas.change_value import ChangeValueAbsoluteChangeValueSchema

        return ChangeValueAbsoluteChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ChangeValueAbsoluteChangeValueSchema

        return ChangeValueAbsoluteChangeValueSchema().dump(self)


class ChangeValueExternalChangeValue(ChangeValueChangeValue):

    def __init__(self):

        super().__init__(type="external")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeValueExternalChangeValue":
        from ._schemas.change_value import ChangeValueExternalChangeValueSchema

        return ChangeValueExternalChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ChangeValueExternalChangeValueSchema

        return ChangeValueExternalChangeValueSchema().dump(self)


class ChangeValueGiftLineItemChangeValue(ChangeValueChangeValue):
    #: Reference to a [Product](ctp:api:type:Product).
    product: "Reference"
    #: `id` of the [ProductVariant](ctp:api:type:ProductVariant).
    variant_id: int
    #: Channel with [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum) `InventorySupply`.
    supply_channel: typing.Optional["Reference"]
    #: Channel with [ChannelRoleEnum](ctp:api:type:ChannelRoleEnum) `ProductDistribution`.
    distribution_channel: "Reference"

    def __init__(
        self,
        *,
        product: "Reference",
        variant_id: int,
        supply_channel: typing.Optional["Reference"] = None,
        distribution_channel: "Reference"
    ):
        self.product = product
        self.variant_id = variant_id
        self.supply_channel = supply_channel
        self.distribution_channel = distribution_channel

        super().__init__(type="giftLineItem")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeValueGiftLineItemChangeValue":
        from ._schemas.change_value import ChangeValueGiftLineItemChangeValueSchema

        return ChangeValueGiftLineItemChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ChangeValueGiftLineItemChangeValueSchema

        return ChangeValueGiftLineItemChangeValueSchema().dump(self)


class ChangeValueRelativeChangeValue(ChangeValueChangeValue):
    #: Fraction (per ten thousand) the price is reduced by. For example, 1000 results in a 10% price reduction.
    permyriad: int

    def __init__(self, *, permyriad: int):
        self.permyriad = permyriad

        super().__init__(type="relative")

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ChangeValueRelativeChangeValue":
        from ._schemas.change_value import ChangeValueRelativeChangeValueSchema

        return ChangeValueRelativeChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ChangeValueRelativeChangeValueSchema

        return ChangeValueRelativeChangeValueSchema().dump(self)


class CustomFieldExpandedValue(_BaseType):
    """Only present if `expand` is set to `true`."""

    #: Name of the Custom Field.
    name: str
    #: [CustomFieldValue](ctp:api:type:CustomFieldValue) based on the [FieldType](ctp:api:type:FieldType).
    value: typing.Any
    #: User-defined label of the Custom Field.
    label: "LocalizedString"

    def __init__(self, *, name: str, value: typing.Any, label: "LocalizedString"):
        self.name = name
        self.value = value
        self.label = label

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomFieldExpandedValue":
        from ._schemas.change_value import CustomFieldExpandedValueSchema

        return CustomFieldExpandedValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import CustomFieldExpandedValueSchema

        return CustomFieldExpandedValueSchema().dump(self)


class CustomShippingMethodChangeValue(_BaseType):
    #: Name of the Custom ShippingMethod.
    name: str

    def __init__(self, *, name: str):
        self.name = name

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "CustomShippingMethodChangeValue":
        from ._schemas.change_value import CustomShippingMethodChangeValueSchema

        return CustomShippingMethodChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import CustomShippingMethodChangeValueSchema

        return CustomShippingMethodChangeValueSchema().dump(self)


class DeliveryChangeValue(_BaseType):
    #: Line Items or Custom Line Items shipped in the [Delivery](ctp:api:type:Delivery).
    items: typing.List["DeliveryItem"]
    #: Address to which the parcels are delivered.
    address: "Address"
    #: Parcels included in the [Delivery](ctp:api:type:Delivery).
    parcels: typing.List["Parcel"]

    def __init__(
        self,
        *,
        items: typing.List["DeliveryItem"],
        address: "Address",
        parcels: typing.List["Parcel"]
    ):
        self.items = items
        self.address = address
        self.parcels = parcels

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "DeliveryChangeValue":
        from ._schemas.change_value import DeliveryChangeValueSchema

        return DeliveryChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import DeliveryChangeValueSchema

        return DeliveryChangeValueSchema().dump(self)


class EnumValue(_BaseType):
    #: Key of the value used as a programmatic identifier.
    key: str
    #: Descriptive label of the value.
    label: str

    def __init__(self, *, key: str, label: str):
        self.key = key
        self.label = label

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "EnumValue":
        from ._schemas.change_value import EnumValueSchema

        return EnumValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import EnumValueSchema

        return EnumValueSchema().dump(self)


class FieldDefinitionOrderValue(_BaseType):
    #: Name of the [FieldDefinition](ctp:api:type:FieldDefinition).
    name: str
    #: Descriptive label of the field.
    label: "LocalizedString"

    def __init__(self, *, name: str, label: "LocalizedString"):
        self.name = name
        self.label = label

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "FieldDefinitionOrderValue":
        from ._schemas.change_value import FieldDefinitionOrderValueSchema

        return FieldDefinitionOrderValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import FieldDefinitionOrderValueSchema

        return FieldDefinitionOrderValueSchema().dump(self)


class InventoryQuantityValue(_BaseType):
    #: Overall amount of stock (`availableQuantity` + reserved).
    quantity_on_stock: int
    #: Available amount of stock (`quantityOnStock` - reserved).
    available_quantity: int

    def __init__(self, *, quantity_on_stock: int, available_quantity: int):
        self.quantity_on_stock = quantity_on_stock
        self.available_quantity = available_quantity

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "InventoryQuantityValue":
        from ._schemas.change_value import InventoryQuantityValueSchema

        return InventoryQuantityValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import InventoryQuantityValueSchema

        return InventoryQuantityValueSchema().dump(self)


class LocalizedEnumValue(_BaseType):
    #: Key of the value used as a programmatic identifier.
    key: str
    #: Descriptive localized label of the value.
    label: "LocalizedString"

    def __init__(self, *, key: str, label: "LocalizedString"):
        self.key = key
        self.label = label

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "LocalizedEnumValue":
        from ._schemas.change_value import LocalizedEnumValueSchema

        return LocalizedEnumValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import LocalizedEnumValueSchema

        return LocalizedEnumValueSchema().dump(self)


class ParcelChangeValue(_BaseType):
    #: `id` of the [Parcel](ctp:api:type:Parcel).
    id: str
    #: Date and time (UTC) the Parcel was created.
    created_at: str

    def __init__(self, *, id: str, created_at: str):
        self.id = id
        self.created_at = created_at

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ParcelChangeValue":
        from ._schemas.change_value import ParcelChangeValueSchema

        return ParcelChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ParcelChangeValueSchema

        return ParcelChangeValueSchema().dump(self)


class SetCartClassificationShippingRateInputValue(_BaseType):
    type: str
    #: Key of the value used as a programmatic identifier.
    key: str
    #: Descriptive localized label of the value.
    label: "LocalizedString"

    def __init__(self, *, type: str, key: str, label: "LocalizedString"):
        self.type = type
        self.key = key
        self.label = label

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCartClassificationShippingRateInputValue":
        from ._schemas.change_value import (
            SetCartClassificationShippingRateInputValueSchema,
        )

        return SetCartClassificationShippingRateInputValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import (
            SetCartClassificationShippingRateInputValueSchema,
        )

        return SetCartClassificationShippingRateInputValueSchema().dump(self)


class SetCartScoreShippingRateInputValue(_BaseType):
    type: str
    #: Abstract value for categorizing a Cart.
    score: int

    def __init__(self, *, type: str, score: int):
        self.type = type
        self.score = score

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "SetCartScoreShippingRateInputValue":
        from ._schemas.change_value import SetCartScoreShippingRateInputValueSchema

        return SetCartScoreShippingRateInputValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import SetCartScoreShippingRateInputValueSchema

        return SetCartScoreShippingRateInputValueSchema().dump(self)


class ShippingMethodChangeValue(_BaseType):
    #: `id` of the [ShippingMethod](ctp:api:type:ShippingMethod).
    id: str
    #: Name of the ShippingMethod.
    name: str

    def __init__(self, *, id: str, name: str):
        self.id = id
        self.name = name

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ShippingMethodChangeValue":
        from ._schemas.change_value import ShippingMethodChangeValueSchema

        return ShippingMethodChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ShippingMethodChangeValueSchema

        return ShippingMethodChangeValueSchema().dump(self)


class ShippingMethodTaxAmountChangeValue(_BaseType):
    #: Taxed price for the Shipping Method based on `taxRate`.
    taxed_price: "TaxedPrice"
    #: Tax rate set externally for the Shipping Method.
    tax_rate: "TaxRate"

    def __init__(self, *, taxed_price: "TaxedPrice", tax_rate: "TaxRate"):
        self.taxed_price = taxed_price
        self.tax_rate = tax_rate

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ShippingMethodTaxAmountChangeValue":
        from ._schemas.change_value import ShippingMethodTaxAmountChangeValueSchema

        return ShippingMethodTaxAmountChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ShippingMethodTaxAmountChangeValueSchema

        return ShippingMethodTaxAmountChangeValueSchema().dump(self)


class ShoppingListLineItemValue(_BaseType):
    #: `id` of the [ShoppingListLineItem](ctp:api:type:ShoppingListLineItem).
    id: str
    #: Name of the corresponding Product the Product Variant belongs to.
    name: "LocalizedString"
    #: `id` of the [ProductVariant](ctp:api:type:ProductVariant) the ShoppingListLineItem refers to.
    variant_id: int

    def __init__(self, *, id: str, name: "LocalizedString", variant_id: int):
        self.id = id
        self.name = name
        self.variant_id = variant_id

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ShoppingListLineItemValue":
        from ._schemas.change_value import ShoppingListLineItemValueSchema

        return ShoppingListLineItemValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ShoppingListLineItemValueSchema

        return ShoppingListLineItemValueSchema().dump(self)


class TextLineItemValue(_BaseType):
    #: `id` of the [TextLineItem](ctp:api:type:TextLineItem).
    id: str
    #: Name of the TextLineItem.
    name: "LocalizedString"

    def __init__(self, *, id: str, name: "LocalizedString"):
        self.id = id
        self.name = name

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "TextLineItemValue":
        from ._schemas.change_value import TextLineItemValueSchema

        return TextLineItemValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import TextLineItemValueSchema

        return TextLineItemValueSchema().dump(self)


class TransactionChangeValue(_BaseType):
    #: `id` of the [Transaction](ctp:api:type:Transaction).
    id: str
    #: Identifier used by the interface that manages the Transaction (usually the PSP).
    interaction_id: str
    #: Date and time (UTC) the Transaction took place.
    timestamp: str

    def __init__(self, *, id: str, interaction_id: str, timestamp: str):
        self.id = id
        self.interaction_id = interaction_id
        self.timestamp = timestamp

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "TransactionChangeValue":
        from ._schemas.change_value import TransactionChangeValueSchema

        return TransactionChangeValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import TransactionChangeValueSchema

        return TransactionChangeValueSchema().dump(self)


class ValidFromAndUntilValue(_BaseType):
    #: Date and time (UTC) from when the Discount is effective.
    valid_from: str
    #: Date and time (UTC) until when the Discount is effective.
    valid_until: str

    def __init__(self, *, valid_from: str, valid_until: str):
        self.valid_from = valid_from
        self.valid_until = valid_until

        super().__init__()

    @classmethod
    def deserialize(
        cls, data: typing.Dict[str, typing.Any]
    ) -> "ValidFromAndUntilValue":
        from ._schemas.change_value import ValidFromAndUntilValueSchema

        return ValidFromAndUntilValueSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.change_value import ValidFromAndUntilValueSchema

        return ValidFromAndUntilValueSchema().dump(self)
