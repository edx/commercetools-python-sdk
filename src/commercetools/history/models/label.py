# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen

import datetime
import enum
import typing

from ._abstract import _BaseType

if typing.TYPE_CHECKING:
    from .common import LocalizedString, Money, Reference

__all__ = [
    "AssociateRoleLabel",
    "BusinessUnitLabel",
    "CustomObjectLabel",
    "CustomerLabel",
    "Label",
    "LocalizedLabel",
    "OrderLabel",
    "PaymentLabel",
    "ProductLabel",
    "QuoteLabel",
    "QuoteRequestLabel",
    "ReviewLabel",
    "StagedQuoteLabel",
    "StringLabel",
]


class Label(_BaseType):
    """Provides descriptive information specific to the resource."""

    type: str

    def __init__(self, *, type: str):
        self.type = type

        super().__init__()

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "Label":
        if data["type"] == "AssociateRoleLabel":
            from ._schemas.label import AssociateRoleLabelSchema

            return AssociateRoleLabelSchema().load(data)
        if data["type"] == "BusinessUnitLabel":
            from ._schemas.label import BusinessUnitLabelSchema

            return BusinessUnitLabelSchema().load(data)
        if data["type"] == "CustomObjectLabel":
            from ._schemas.label import CustomObjectLabelSchema

            return CustomObjectLabelSchema().load(data)
        if data["type"] == "CustomerLabel":
            from ._schemas.label import CustomerLabelSchema

            return CustomerLabelSchema().load(data)
        if data["type"] == "LocalizedLabel":
            from ._schemas.label import LocalizedLabelSchema

            return LocalizedLabelSchema().load(data)
        if data["type"] == "OrderLabel":
            from ._schemas.label import OrderLabelSchema

            return OrderLabelSchema().load(data)
        if data["type"] == "PaymentLabel":
            from ._schemas.label import PaymentLabelSchema

            return PaymentLabelSchema().load(data)
        if data["type"] == "ProductLabel":
            from ._schemas.label import ProductLabelSchema

            return ProductLabelSchema().load(data)
        if data["type"] == "QuoteLabel":
            from ._schemas.label import QuoteLabelSchema

            return QuoteLabelSchema().load(data)
        if data["type"] == "QuoteRequestLabel":
            from ._schemas.label import QuoteRequestLabelSchema

            return QuoteRequestLabelSchema().load(data)
        if data["type"] == "ReviewLabel":
            from ._schemas.label import ReviewLabelSchema

            return ReviewLabelSchema().load(data)
        if data["type"] == "StagedQuoteLabel":
            from ._schemas.label import StagedQuoteLabelSchema

            return StagedQuoteLabelSchema().load(data)
        if data["type"] == "StringLabel":
            from ._schemas.label import StringLabelSchema

            return StringLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import LabelSchema

        return LabelSchema().dump(self)


class AssociateRoleLabel(Label):
    #: User-defined unique identifier of the [Associate Role](ctp:api:type:AssociateRole).
    key: str
    #: Name of the Associate Role.
    name: str

    def __init__(self, *, key: str, name: str):
        self.key = key
        self.name = name

        super().__init__(type="AssociateRoleLabel")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "AssociateRoleLabel":
        from ._schemas.label import AssociateRoleLabelSchema

        return AssociateRoleLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import AssociateRoleLabelSchema

        return AssociateRoleLabelSchema().dump(self)


class BusinessUnitLabel(Label):
    #: User-defined unique identifier of the [Business Unit](ctp:api:type:BusinessUnit).
    key: str
    #: Name of the Business Unit.
    name: str

    def __init__(self, *, key: str, name: str):
        self.key = key
        self.name = name

        super().__init__(type="BusinessUnitLabel")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "BusinessUnitLabel":
        from ._schemas.label import BusinessUnitLabelSchema

        return BusinessUnitLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import BusinessUnitLabelSchema

        return BusinessUnitLabelSchema().dump(self)


class CustomObjectLabel(Label):
    #: User-defined unique identifier of the CustomObject within the defined `container`.
    key: str
    #: Namespace to group Custom Objects.
    container: str

    def __init__(self, *, key: str, container: str):
        self.key = key
        self.container = container

        super().__init__(type="CustomObjectLabel")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "CustomObjectLabel":
        from ._schemas.label import CustomObjectLabelSchema

        return CustomObjectLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import CustomObjectLabelSchema

        return CustomObjectLabelSchema().dump(self)


class CustomerLabel(Label):
    #: Given name (first name) of the Customer.
    first_name: str
    #: Family name (last name) of the Customer.
    last_name: str
    #: User-defined unique identifier of the [Customer](ctp:api:type:Customer).
    customer_number: str

    def __init__(self, *, first_name: str, last_name: str, customer_number: str):
        self.first_name = first_name
        self.last_name = last_name
        self.customer_number = customer_number

        super().__init__(type="CustomerLabel")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "CustomerLabel":
        from ._schemas.label import CustomerLabelSchema

        return CustomerLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import CustomerLabelSchema

        return CustomerLabelSchema().dump(self)


class LocalizedLabel(Label):
    #: Changed value.
    value: "LocalizedString"

    def __init__(self, *, value: "LocalizedString"):
        self.value = value

        super().__init__(type="LocalizedLabel")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "LocalizedLabel":
        from ._schemas.label import LocalizedLabelSchema

        return LocalizedLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import LocalizedLabelSchema

        return LocalizedLabelSchema().dump(self)


class OrderLabel(Label):
    #: Email address of the Customer that the Order belongs to.
    customer_email: str
    #: User-defined unique identifier of the Order that is unique across a Project.
    order_number: str

    def __init__(self, *, customer_email: str, order_number: str):
        self.customer_email = customer_email
        self.order_number = order_number

        super().__init__(type="OrderLabel")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "OrderLabel":
        from ._schemas.label import OrderLabelSchema

        return OrderLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import OrderLabelSchema

        return OrderLabelSchema().dump(self)


class PaymentLabel(Label):
    #: User-defined unique identifier of the Payment.
    key: str
    #: Money value the Payment intends to receive from the Customer.
    amount_planned: "Money"

    def __init__(self, *, key: str, amount_planned: "Money"):
        self.key = key
        self.amount_planned = amount_planned

        super().__init__(type="PaymentLabel")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "PaymentLabel":
        from ._schemas.label import PaymentLabelSchema

        return PaymentLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import PaymentLabelSchema

        return PaymentLabelSchema().dump(self)


class ProductLabel(Label):
    #: User-defined identifier used in a deep-link URL for the Product.
    slug: "LocalizedString"
    #: Name of the Product.
    name: "LocalizedString"

    def __init__(self, *, slug: "LocalizedString", name: "LocalizedString"):
        self.slug = slug
        self.name = name

        super().__init__(type="ProductLabel")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ProductLabel":
        from ._schemas.label import ProductLabelSchema

        return ProductLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import ProductLabelSchema

        return ProductLabelSchema().dump(self)


class QuoteLabel(Label):
    #: User-defined unique identifier of the Quote.
    key: str
    #: The [Buyer](/../api/quotes-overview#buyer) who requested the Quote.
    customer: "Reference"
    #: Staged Quote related to the Quote.
    staged_quote: "Reference"
    #: Quote Request related to the Quote.
    quote_request: "Reference"

    def __init__(
        self,
        *,
        key: str,
        customer: "Reference",
        staged_quote: "Reference",
        quote_request: "Reference"
    ):
        self.key = key
        self.customer = customer
        self.staged_quote = staged_quote
        self.quote_request = quote_request

        super().__init__(type="QuoteLabel")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "QuoteLabel":
        from ._schemas.label import QuoteLabelSchema

        return QuoteLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import QuoteLabelSchema

        return QuoteLabelSchema().dump(self)


class QuoteRequestLabel(Label):
    #: User-defined unique identifier of the Quote Request.
    key: str
    #: The [Buyer](/../api/quotes-overview#buyer) who raised the Quote Request.
    customer: "Reference"

    def __init__(self, *, key: str, customer: "Reference"):
        self.key = key
        self.customer = customer

        super().__init__(type="QuoteRequestLabel")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "QuoteRequestLabel":
        from ._schemas.label import QuoteRequestLabelSchema

        return QuoteRequestLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import QuoteRequestLabelSchema

        return QuoteRequestLabelSchema().dump(self)


class ReviewLabel(Label):
    #: User-defined unique identifier of the Review.
    key: str
    #: Title of the Review.
    title: str

    def __init__(self, *, key: str, title: str):
        self.key = key
        self.title = title

        super().__init__(type="ReviewLabel")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "ReviewLabel":
        from ._schemas.label import ReviewLabelSchema

        return ReviewLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import ReviewLabelSchema

        return ReviewLabelSchema().dump(self)


class StagedQuoteLabel(Label):
    #: User-defined unique identifier of the Staged Quote.
    key: str
    #: The [Buyer](/../api/quotes-overview#buyer) who requested the Quote.
    customer: "Reference"
    #: Quote Request related to the Staged Quote.
    quote_request: "Reference"

    def __init__(self, *, key: str, customer: "Reference", quote_request: "Reference"):
        self.key = key
        self.customer = customer
        self.quote_request = quote_request

        super().__init__(type="StagedQuoteLabel")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "StagedQuoteLabel":
        from ._schemas.label import StagedQuoteLabelSchema

        return StagedQuoteLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import StagedQuoteLabelSchema

        return StagedQuoteLabelSchema().dump(self)


class StringLabel(Label):
    #: Changed value.
    value: str

    def __init__(self, *, value: str):
        self.value = value

        super().__init__(type="StringLabel")

    @classmethod
    def deserialize(cls, data: typing.Dict[str, typing.Any]) -> "StringLabel":
        from ._schemas.label import StringLabelSchema

        return StringLabelSchema().load(data)

    def serialize(self) -> typing.Dict[str, typing.Any]:
        from ._schemas.label import StringLabelSchema

        return StringLabelSchema().dump(self)
