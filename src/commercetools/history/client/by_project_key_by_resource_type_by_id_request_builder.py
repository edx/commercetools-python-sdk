# This file is automatically generated by the rmf-codegen project.
#
# The Python code generator is maintained by Lab Digital. If you want to
# contribute to this project then please do not edit this file directly
# but send a pull request to the Lab Digital fork of rmf-codegen at
# https://github.com/labd/rmf-codegen
import typing
import warnings

from ..models.change_history import ErrorResponse, RecordPagedQueryResponse

if typing.TYPE_CHECKING:
    from ..base_client import BaseClient


class ByProjectKeyByResourceTypeByIDRequestBuilder:

    _client: "BaseClient"
    _project_key: str
    _resource_type: str
    _id: str

    def __init__(
        self,
        project_key: str,
        resource_type: str,
        id: str,
        client: "BaseClient",
    ):
        self._project_key = project_key
        self._resource_type = resource_type
        self._id = id
        self._client = client

    def get(
        self,
        *,
        date_from: object = None,
        date_to: object = None,
        limit: int = None,
        offset: int = None,
        user_id: str = None,
        client_id: str = None,
        customer_id: str = None,
        associate_id: str = None,
        business_unit: str = None,
        type: str = None,
        source: str = None,
        changes: typing.List["str"] = None,
        stores: typing.List["str"] = None,
        exclude_platform_initiated_changes: typing.List[
            "PlatformInitiatedChange"
        ] = None,
        expand: bool = None,
        headers: typing.Dict[str, str] = None,
        options: typing.Dict[str, typing.Any] = None,
    ) -> "RecordPagedQueryResponse":
        """The `view_audit_log:{projectKey}` scope is required, and depending on the [resource type](ctp:history:type:ChangeHistoryResourceType) queried, their respective scopes must be granted."""
        headers = {} if headers is None else headers
        response = self._client._get(
            endpoint=f"/{self._project_key}/{self._resource_type}/{self._id}",
            params={
                "date.from": date_from,
                "date.to": date_to,
                "limit": limit,
                "offset": offset,
                "userId": user_id,
                "clientId": client_id,
                "customerId": customer_id,
                "associateId": associate_id,
                "businessUnit": business_unit,
                "type": type,
                "source": source,
                "changes": changes,
                "stores": stores,
                "excludePlatformInitiatedChanges": exclude_platform_initiated_changes,
                "expand": expand,
            },
            headers=headers,
            options=options,
        )
        if response.status_code == 200:
            return RecordPagedQueryResponse.deserialize(response.json())
        elif response.status_code in (400, 401, 403, 500, 503):
            obj = ErrorResponse.deserialize(response.json())
            raise self._client._create_exception(obj, response)
        warnings.warn("Unhandled status code %d" % response.status_code)
